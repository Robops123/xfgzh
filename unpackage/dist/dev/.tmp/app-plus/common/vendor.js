(global["webpackJsonp"] = global["webpackJsonp"] || []).push([["common/vendor"],{

/***/ 1:
/*!***********************************************************!*\
  !*** ./node_modules/@dcloudio/uni-app-plus/dist/index.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(global) {Object.defineProperty(exports, \"__esModule\", { value: true });exports.createApp = createApp;exports.createComponent = createComponent;exports.createPage = createPage;exports.default = void 0;var _vue = _interopRequireDefault(__webpack_require__(/*! vue */ 3));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _slicedToArray(arr, i) {return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();}function _nonIterableRest() {throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");}function _iterableToArrayLimit(arr, i) {var _arr = [];var _n = true;var _d = false;var _e = undefined;try {for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {_arr.push(_s.value);if (i && _arr.length === i) break;}} catch (err) {_d = true;_e = err;} finally {try {if (!_n && _i[\"return\"] != null) _i[\"return\"]();} finally {if (_d) throw _e;}}return _arr;}function _arrayWithHoles(arr) {if (Array.isArray(arr)) return arr;}function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function _toConsumableArray(arr) {return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();}function _nonIterableSpread() {throw new TypeError(\"Invalid attempt to spread non-iterable instance\");}function _iterableToArray(iter) {if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);}function _arrayWithoutHoles(arr) {if (Array.isArray(arr)) {for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {arr2[i] = arr[i];}return arr2;}}\n\nvar _toString = Object.prototype.toString;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nfunction isFn(fn) {\n  return typeof fn === 'function';\n}\n\nfunction isStr(str) {\n  return typeof str === 'string';\n}\n\nfunction isPlainObject(obj) {\n  return _toString.call(obj) === '[object Object]';\n}\n\nfunction hasOwn(obj, key) {\n  return hasOwnProperty.call(obj, key);\n}\n\nfunction noop() {}\n\n/**\r\n                    * Create a cached version of a pure function.\r\n                    */\nfunction cached(fn) {\n  var cache = Object.create(null);\n  return function cachedFn(str) {\n    var hit = cache[str];\n    return hit || (cache[str] = fn(str));\n  };\n}\n\n/**\r\n   * Camelize a hyphen-delimited string.\r\n   */\nvar camelizeRE = /-(\\w)/g;\nvar camelize = cached(function (str) {\n  return str.replace(camelizeRE, function (_, c) {return c ? c.toUpperCase() : '';});\n});\n\nvar HOOKS = [\n'invoke',\n'success',\n'fail',\n'complete',\n'returnValue'];\n\n\nvar globalInterceptors = {};\nvar scopedInterceptors = {};\n\nfunction mergeHook(parentVal, childVal) {\n  var res = childVal ?\n  parentVal ?\n  parentVal.concat(childVal) :\n  Array.isArray(childVal) ?\n  childVal : [childVal] :\n  parentVal;\n  return res ?\n  dedupeHooks(res) :\n  res;\n}\n\nfunction dedupeHooks(hooks) {\n  var res = [];\n  for (var i = 0; i < hooks.length; i++) {\n    if (res.indexOf(hooks[i]) === -1) {\n      res.push(hooks[i]);\n    }\n  }\n  return res;\n}\n\nfunction removeHook(hooks, hook) {\n  var index = hooks.indexOf(hook);\n  if (index !== -1) {\n    hooks.splice(index, 1);\n  }\n}\n\nfunction mergeInterceptorHook(interceptor, option) {\n  Object.keys(option).forEach(function (hook) {\n    if (HOOKS.indexOf(hook) !== -1 && isFn(option[hook])) {\n      interceptor[hook] = mergeHook(interceptor[hook], option[hook]);\n    }\n  });\n}\n\nfunction removeInterceptorHook(interceptor, option) {\n  if (!interceptor || !option) {\n    return;\n  }\n  Object.keys(option).forEach(function (hook) {\n    if (HOOKS.indexOf(hook) !== -1 && isFn(option[hook])) {\n      removeHook(interceptor[hook], option[hook]);\n    }\n  });\n}\n\nfunction addInterceptor(method, option) {\n  if (typeof method === 'string' && isPlainObject(option)) {\n    mergeInterceptorHook(scopedInterceptors[method] || (scopedInterceptors[method] = {}), option);\n  } else if (isPlainObject(method)) {\n    mergeInterceptorHook(globalInterceptors, method);\n  }\n}\n\nfunction removeInterceptor(method, option) {\n  if (typeof method === 'string') {\n    if (isPlainObject(option)) {\n      removeInterceptorHook(scopedInterceptors[method], option);\n    } else {\n      delete scopedInterceptors[method];\n    }\n  } else if (isPlainObject(method)) {\n    removeInterceptorHook(globalInterceptors, method);\n  }\n}\n\nfunction wrapperHook(hook) {\n  return function (data) {\n    return hook(data) || data;\n  };\n}\n\nfunction isPromise(obj) {\n  return !!obj && (typeof obj === 'object' || typeof obj === 'function') && typeof obj.then === 'function';\n}\n\nfunction queue(hooks, data) {\n  var promise = false;\n  for (var i = 0; i < hooks.length; i++) {\n    var hook = hooks[i];\n    if (promise) {\n      promise = Promise.then(wrapperHook(hook));\n    } else {\n      var res = hook(data);\n      if (isPromise(res)) {\n        promise = Promise.resolve(res);\n      }\n      if (res === false) {\n        return {\n          then: function then() {} };\n\n      }\n    }\n  }\n  return promise || {\n    then: function then(callback) {\n      return callback(data);\n    } };\n\n}\n\nfunction wrapperOptions(interceptor) {var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  ['success', 'fail', 'complete'].forEach(function (name) {\n    if (Array.isArray(interceptor[name])) {\n      var oldCallback = options[name];\n      options[name] = function callbackInterceptor(res) {\n        queue(interceptor[name], res).then(function (res) {\n          /* eslint-disable no-mixed-operators */\n          return isFn(oldCallback) && oldCallback(res) || res;\n        });\n      };\n    }\n  });\n  return options;\n}\n\nfunction wrapperReturnValue(method, returnValue) {\n  var returnValueHooks = [];\n  if (Array.isArray(globalInterceptors.returnValue)) {\n    returnValueHooks.push.apply(returnValueHooks, _toConsumableArray(globalInterceptors.returnValue));\n  }\n  var interceptor = scopedInterceptors[method];\n  if (interceptor && Array.isArray(interceptor.returnValue)) {\n    returnValueHooks.push.apply(returnValueHooks, _toConsumableArray(interceptor.returnValue));\n  }\n  returnValueHooks.forEach(function (hook) {\n    returnValue = hook(returnValue) || returnValue;\n  });\n  return returnValue;\n}\n\nfunction getApiInterceptorHooks(method) {\n  var interceptor = Object.create(null);\n  Object.keys(globalInterceptors).forEach(function (hook) {\n    if (hook !== 'returnValue') {\n      interceptor[hook] = globalInterceptors[hook].slice();\n    }\n  });\n  var scopedInterceptor = scopedInterceptors[method];\n  if (scopedInterceptor) {\n    Object.keys(scopedInterceptor).forEach(function (hook) {\n      if (hook !== 'returnValue') {\n        interceptor[hook] = (interceptor[hook] || []).concat(scopedInterceptor[hook]);\n      }\n    });\n  }\n  return interceptor;\n}\n\nfunction invokeApi(method, api, options) {for (var _len = arguments.length, params = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {params[_key - 3] = arguments[_key];}\n  var interceptor = getApiInterceptorHooks(method);\n  if (interceptor && Object.keys(interceptor).length) {\n    if (Array.isArray(interceptor.invoke)) {\n      var res = queue(interceptor.invoke, options);\n      return res.then(function (options) {\n        return api.apply(void 0, [wrapperOptions(interceptor, options)].concat(params));\n      });\n    } else {\n      return api.apply(void 0, [wrapperOptions(interceptor, options)].concat(params));\n    }\n  }\n  return api.apply(void 0, [options].concat(params));\n}\n\nvar promiseInterceptor = {\n  returnValue: function returnValue(res) {\n    if (!isPromise(res)) {\n      return res;\n    }\n    return res.then(function (res) {\n      return res[1];\n    }).catch(function (res) {\n      return res[0];\n    });\n  } };\n\n\nvar SYNC_API_RE =\n/^\\$|getMenuButtonBoundingClientRect|^report|interceptors|Interceptor$|getSubNVueById|requireNativePlugin|upx2px|hideKeyboard|canIUse|^create|Sync$|Manager$|base64ToArrayBuffer|arrayBufferToBase64/;\n\nvar CONTEXT_API_RE = /^create|Manager$/;\n\nvar CALLBACK_API_RE = /^on/;\n\nfunction isContextApi(name) {\n  return CONTEXT_API_RE.test(name);\n}\nfunction isSyncApi(name) {\n  return SYNC_API_RE.test(name);\n}\n\nfunction isCallbackApi(name) {\n  return CALLBACK_API_RE.test(name) && name !== 'onPush';\n}\n\nfunction handlePromise(promise) {\n  return promise.then(function (data) {\n    return [null, data];\n  }).\n  catch(function (err) {return [err];});\n}\n\nfunction shouldPromise(name) {\n  if (\n  isContextApi(name) ||\n  isSyncApi(name) ||\n  isCallbackApi(name))\n  {\n    return false;\n  }\n  return true;\n}\n\nfunction promisify(name, api) {\n  if (!shouldPromise(name)) {\n    return api;\n  }\n  return function promiseApi() {var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};for (var _len2 = arguments.length, params = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {params[_key2 - 1] = arguments[_key2];}\n    if (isFn(options.success) || isFn(options.fail) || isFn(options.complete)) {\n      return wrapperReturnValue(name, invokeApi.apply(void 0, [name, api, options].concat(params)));\n    }\n    return wrapperReturnValue(name, handlePromise(new Promise(function (resolve, reject) {\n      invokeApi.apply(void 0, [name, api, Object.assign({}, options, {\n        success: resolve,\n        fail: reject })].concat(\n      params));\n      /* eslint-disable no-extend-native */\n      if (!Promise.prototype.finally) {\n        Promise.prototype.finally = function (callback) {\n          var promise = this.constructor;\n          return this.then(\n          function (value) {return promise.resolve(callback()).then(function () {return value;});},\n          function (reason) {return promise.resolve(callback()).then(function () {\n              throw reason;\n            });});\n\n        };\n      }\n    })));\n  };\n}\n\nvar EPS = 1e-4;\nvar BASE_DEVICE_WIDTH = 750;\nvar isIOS = false;\nvar deviceWidth = 0;\nvar deviceDPR = 0;\n\nfunction checkDeviceWidth() {var _wx$getSystemInfoSync =\n\n\n\n\n  wx.getSystemInfoSync(),platform = _wx$getSystemInfoSync.platform,pixelRatio = _wx$getSystemInfoSync.pixelRatio,windowWidth = _wx$getSystemInfoSync.windowWidth; // uni=>wx runtime 编译目标是 uni 对象，内部不允许直接使用 uni\n\n  deviceWidth = windowWidth;\n  deviceDPR = pixelRatio;\n  isIOS = platform === 'ios';\n}\n\nfunction upx2px(number, newDeviceWidth) {\n  if (deviceWidth === 0) {\n    checkDeviceWidth();\n  }\n\n  number = Number(number);\n  if (number === 0) {\n    return 0;\n  }\n  var result = number / BASE_DEVICE_WIDTH * (newDeviceWidth || deviceWidth);\n  if (result < 0) {\n    result = -result;\n  }\n  result = Math.floor(result + EPS);\n  if (result === 0) {\n    if (deviceDPR === 1 || !isIOS) {\n      return 1;\n    } else {\n      return 0.5;\n    }\n  }\n  return number < 0 ? -result : result;\n}\n\nvar interceptors = {\n  promiseInterceptor: promiseInterceptor };\n\n\n\n\nvar baseApi = /*#__PURE__*/Object.freeze({\n  upx2px: upx2px,\n  interceptors: interceptors,\n  addInterceptor: addInterceptor,\n  removeInterceptor: removeInterceptor });\n\n\nvar protocols = {};\nvar todos = [];\nvar canIUses = [];\n\nvar CALLBACKS = ['success', 'fail', 'cancel', 'complete'];\n\nfunction processCallback(methodName, method, returnValue) {\n  return function (res) {\n    return method(processReturnValue(methodName, res, returnValue));\n  };\n}\n\nfunction processArgs(methodName, fromArgs) {var argsOption = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};var returnValue = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};var keepFromArgs = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n  if (isPlainObject(fromArgs)) {// 一般 api 的参数解析\n    var toArgs = keepFromArgs === true ? fromArgs : {}; // returnValue 为 false 时，说明是格式化返回值，直接在返回值对象上修改赋值\n    if (isFn(argsOption)) {\n      argsOption = argsOption(fromArgs, toArgs) || {};\n    }\n    for (var key in fromArgs) {\n      if (hasOwn(argsOption, key)) {\n        var keyOption = argsOption[key];\n        if (isFn(keyOption)) {\n          keyOption = keyOption(fromArgs[key], fromArgs, toArgs);\n        }\n        if (!keyOption) {// 不支持的参数\n          console.warn(\"app-plus \".concat(methodName, \"\\u6682\\u4E0D\\u652F\\u6301\").concat(key));\n        } else if (isStr(keyOption)) {// 重写参数 key\n          toArgs[keyOption] = fromArgs[key];\n        } else if (isPlainObject(keyOption)) {// {name:newName,value:value}可重新指定参数 key:value\n          toArgs[keyOption.name ? keyOption.name : key] = keyOption.value;\n        }\n      } else if (CALLBACKS.indexOf(key) !== -1) {\n        toArgs[key] = processCallback(methodName, fromArgs[key], returnValue);\n      } else {\n        if (!keepFromArgs) {\n          toArgs[key] = fromArgs[key];\n        }\n      }\n    }\n    return toArgs;\n  } else if (isFn(fromArgs)) {\n    fromArgs = processCallback(methodName, fromArgs, returnValue);\n  }\n  return fromArgs;\n}\n\nfunction processReturnValue(methodName, res, returnValue) {var keepReturnValue = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  if (isFn(protocols.returnValue)) {// 处理通用 returnValue\n    res = protocols.returnValue(methodName, res);\n  }\n  return processArgs(methodName, res, returnValue, {}, keepReturnValue);\n}\n\nfunction wrapper(methodName, method) {\n  if (hasOwn(protocols, methodName)) {\n    var protocol = protocols[methodName];\n    if (!protocol) {// 暂不支持的 api\n      return function () {\n        console.error(\"app-plus \\u6682\\u4E0D\\u652F\\u6301\".concat(methodName));\n      };\n    }\n    return function (arg1, arg2) {// 目前 api 最多两个参数\n      var options = protocol;\n      if (isFn(protocol)) {\n        options = protocol(arg1);\n      }\n\n      arg1 = processArgs(methodName, arg1, options.args, options.returnValue);\n\n      var args = [arg1];\n      if (typeof arg2 !== 'undefined') {\n        args.push(arg2);\n      }\n      var returnValue = wx[options.name || methodName].apply(wx, args);\n      if (isSyncApi(methodName)) {// 同步 api\n        return processReturnValue(methodName, returnValue, options.returnValue, isContextApi(methodName));\n      }\n      return returnValue;\n    };\n  }\n  return method;\n}\n\nvar todoApis = Object.create(null);\n\nvar TODOS = [\n'onTabBarMidButtonTap',\n'subscribePush',\n'unsubscribePush',\n'onPush',\n'offPush',\n'share'];\n\n\nfunction createTodoApi(name) {\n  return function todoApi(_ref)\n\n\n  {var fail = _ref.fail,complete = _ref.complete;\n    var res = {\n      errMsg: \"\".concat(name, \":fail:\\u6682\\u4E0D\\u652F\\u6301 \").concat(name, \" \\u65B9\\u6CD5\") };\n\n    isFn(fail) && fail(res);\n    isFn(complete) && complete(res);\n  };\n}\n\nTODOS.forEach(function (name) {\n  todoApis[name] = createTodoApi(name);\n});\n\nvar getEmitter = function () {\n  if (typeof getUniEmitter === 'function') {\n    /* eslint-disable no-undef */\n    return getUniEmitter;\n  }\n  var Emitter;\n  return function getUniEmitter() {\n    if (!Emitter) {\n      Emitter = new _vue.default();\n    }\n    return Emitter;\n  };\n}();\n\nfunction apply(ctx, method, args) {\n  return ctx[method].apply(ctx, args);\n}\n\nfunction $on() {\n  return apply(getEmitter(), '$on', Array.prototype.slice.call(arguments));\n}\nfunction $off() {\n  return apply(getEmitter(), '$off', Array.prototype.slice.call(arguments));\n}\nfunction $once() {\n  return apply(getEmitter(), '$once', Array.prototype.slice.call(arguments));\n}\nfunction $emit() {\n  return apply(getEmitter(), '$emit', Array.prototype.slice.call(arguments));\n}\n\nvar eventApi = /*#__PURE__*/Object.freeze({\n  $on: $on,\n  $off: $off,\n  $once: $once,\n  $emit: $emit });\n\n\nfunction requireNativePlugin(pluginName) {\n  /* eslint-disable no-undef */\n  if (typeof weex !== 'undefined') {\n    return weex.requireModule(pluginName);\n  }\n  /* eslint-disable no-undef */\n  return __requireNativePlugin__(pluginName);\n}\n\nfunction wrapper$1(webview) {\n  webview.$processed = true;\n\n  webview.postMessage = function (data) {\n    plus.webview.postMessageToUniNView({\n      type: 'UniAppSubNVue',\n      data: data },\n    webview.id);\n  };\n  var callbacks = [];\n  webview.onMessage = function (callback) {\n    callbacks.push(callback);\n  };\n  webview.$consumeMessage = function (e) {\n    callbacks.forEach(function (callback) {return callback(e);});\n  };\n\n  if (!webview.__uniapp_mask_id) {\n    return;\n  }\n  var maskColor = webview.__uniapp_mask;\n  var maskWebview = webview.__uniapp_mask_id === '0' ? {\n    setStyle: function setStyle(_ref2)\n\n    {var mask = _ref2.mask;\n      requireNativePlugin('uni-tabview').setMask({\n        color: mask });\n\n    } } :\n  plus.webview.getWebviewById(webview.__uniapp_mask_id);\n  var oldShow = webview.show;\n  var oldHide = webview.hide;\n  var oldClose = webview.close;\n\n  var showMask = function showMask() {\n    maskWebview.setStyle({\n      mask: maskColor });\n\n  };\n  var closeMask = function closeMask() {\n    maskWebview.setStyle({\n      mask: 'none' });\n\n  };\n  webview.show = function () {\n    showMask();for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {args[_key3] = arguments[_key3];}\n    return oldShow.apply(webview, args);\n  };\n  webview.hide = function () {\n    closeMask();for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {args[_key4] = arguments[_key4];}\n    return oldHide.apply(webview, args);\n  };\n  webview.close = function () {\n    closeMask();\n    callbacks = [];for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {args[_key5] = arguments[_key5];}\n    return oldClose.apply(webview, args);\n  };\n}\n\nfunction getSubNVueById(id) {\n  var webview = plus.webview.getWebviewById(id);\n  if (webview && !webview.$processed) {\n    wrapper$1(webview);\n  }\n  return webview;\n}\n\n\n\nvar api = /*#__PURE__*/Object.freeze({\n  getSubNVueById: getSubNVueById,\n  requireNativePlugin: requireNativePlugin });\n\n\nvar MPPage = Page;\nvar MPComponent = Component;\n\nvar customizeRE = /:/g;\n\nvar customize = cached(function (str) {\n  return camelize(str.replace(customizeRE, '-'));\n});\n\nfunction initTriggerEvent(mpInstance) {\n  {\n    if (!wx.canIUse('nextTick')) {\n      return;\n    }\n  }\n  var oldTriggerEvent = mpInstance.triggerEvent;\n  mpInstance.triggerEvent = function (event) {for (var _len6 = arguments.length, args = new Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {args[_key6 - 1] = arguments[_key6];}\n    return oldTriggerEvent.apply(mpInstance, [customize(event)].concat(args));\n  };\n}\n\nfunction initHook(name, options) {\n  var oldHook = options[name];\n  if (!oldHook) {\n    options[name] = function () {\n      initTriggerEvent(this);\n    };\n  } else {\n    options[name] = function () {\n      initTriggerEvent(this);for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {args[_key7] = arguments[_key7];}\n      return oldHook.apply(this, args);\n    };\n  }\n}\n\nPage = function Page() {var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  initHook('onLoad', options);\n  return MPPage(options);\n};\n\nComponent = function Component() {var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  initHook('created', options);\n  return MPComponent(options);\n};\n\nvar PAGE_EVENT_HOOKS = [\n'onPullDownRefresh',\n'onReachBottom',\n'onShareAppMessage',\n'onPageScroll',\n'onResize',\n'onTabItemTap'];\n\n\nfunction initMocks(vm, mocks) {\n  var mpInstance = vm.$mp[vm.mpType];\n  mocks.forEach(function (mock) {\n    if (hasOwn(mpInstance, mock)) {\n      vm[mock] = mpInstance[mock];\n    }\n  });\n}\n\nfunction hasHook(hook, vueOptions) {\n  if (!vueOptions) {\n    return true;\n  }\n\n  if (_vue.default.options && Array.isArray(_vue.default.options[hook])) {\n    return true;\n  }\n\n  vueOptions = vueOptions.default || vueOptions;\n\n  if (isFn(vueOptions)) {\n    if (isFn(vueOptions.extendOptions[hook])) {\n      return true;\n    }\n    if (vueOptions.super &&\n    vueOptions.super.options &&\n    Array.isArray(vueOptions.super.options[hook])) {\n      return true;\n    }\n    return false;\n  }\n\n  if (isFn(vueOptions[hook])) {\n    return true;\n  }\n  var mixins = vueOptions.mixins;\n  if (Array.isArray(mixins)) {\n    return !!mixins.find(function (mixin) {return hasHook(hook, mixin);});\n  }\n}\n\nfunction initHooks(mpOptions, hooks, vueOptions) {\n  hooks.forEach(function (hook) {\n    if (hasHook(hook, vueOptions)) {\n      mpOptions[hook] = function (args) {\n        return this.$vm && this.$vm.__call_hook(hook, args);\n      };\n    }\n  });\n}\n\nfunction initVueComponent(Vue, vueOptions) {\n  vueOptions = vueOptions.default || vueOptions;\n  var VueComponent;\n  if (isFn(vueOptions)) {\n    VueComponent = vueOptions;\n    vueOptions = VueComponent.extendOptions;\n  } else {\n    VueComponent = Vue.extend(vueOptions);\n  }\n  return [VueComponent, vueOptions];\n}\n\nfunction initSlots(vm, vueSlots) {\n  if (Array.isArray(vueSlots) && vueSlots.length) {\n    var $slots = Object.create(null);\n    vueSlots.forEach(function (slotName) {\n      $slots[slotName] = true;\n    });\n    vm.$scopedSlots = vm.$slots = $slots;\n  }\n}\n\nfunction initVueIds(vueIds, mpInstance) {\n  vueIds = (vueIds || '').split(',');\n  var len = vueIds.length;\n\n  if (len === 1) {\n    mpInstance._$vueId = vueIds[0];\n  } else if (len === 2) {\n    mpInstance._$vueId = vueIds[0];\n    mpInstance._$vuePid = vueIds[1];\n  }\n}\n\nfunction initData(vueOptions, context) {\n  var data = vueOptions.data || {};\n  var methods = vueOptions.methods || {};\n\n  if (typeof data === 'function') {\n    try {\n      data = data.call(context); // 支持 Vue.prototype 上挂的数据\n    } catch (e) {\n      if (Object({\"VUE_APP_PLATFORM\":\"app-plus\",\"NODE_ENV\":\"development\",\"BASE_URL\":\"/\"}).VUE_APP_DEBUG) {\n        console.warn('根据 Vue 的 data 函数初始化小程序 data 失败，请尽量确保 data 函数中不访问 vm 对象，否则可能影响首次数据渲染速度。', data);\n      }\n    }\n  } else {\n    try {\n      // 对 data 格式化\n      data = JSON.parse(JSON.stringify(data));\n    } catch (e) {}\n  }\n\n  if (!isPlainObject(data)) {\n    data = {};\n  }\n\n  Object.keys(methods).forEach(function (methodName) {\n    if (context.__lifecycle_hooks__.indexOf(methodName) === -1 && !hasOwn(data, methodName)) {\n      data[methodName] = methods[methodName];\n    }\n  });\n\n  return data;\n}\n\nvar PROP_TYPES = [String, Number, Boolean, Object, Array, null];\n\nfunction createObserver(name) {\n  return function observer(newVal, oldVal) {\n    if (this.$vm) {\n      this.$vm[name] = newVal; // 为了触发其他非 render watcher\n    }\n  };\n}\n\nfunction initBehaviors(vueOptions, initBehavior) {\n  var vueBehaviors = vueOptions['behaviors'];\n  var vueExtends = vueOptions['extends'];\n  var vueMixins = vueOptions['mixins'];\n\n  var vueProps = vueOptions['props'];\n\n  if (!vueProps) {\n    vueOptions['props'] = vueProps = [];\n  }\n\n  var behaviors = [];\n  if (Array.isArray(vueBehaviors)) {\n    vueBehaviors.forEach(function (behavior) {\n      behaviors.push(behavior.replace('uni://', \"wx\".concat(\"://\")));\n      if (behavior === 'uni://form-field') {\n        if (Array.isArray(vueProps)) {\n          vueProps.push('name');\n          vueProps.push('value');\n        } else {\n          vueProps['name'] = {\n            type: String,\n            default: '' };\n\n          vueProps['value'] = {\n            type: [String, Number, Boolean, Array, Object, Date],\n            default: '' };\n\n        }\n      }\n    });\n  }\n  if (isPlainObject(vueExtends) && vueExtends.props) {\n    behaviors.push(\n    initBehavior({\n      properties: initProperties(vueExtends.props, true) }));\n\n\n  }\n  if (Array.isArray(vueMixins)) {\n    vueMixins.forEach(function (vueMixin) {\n      if (isPlainObject(vueMixin) && vueMixin.props) {\n        behaviors.push(\n        initBehavior({\n          properties: initProperties(vueMixin.props, true) }));\n\n\n      }\n    });\n  }\n  return behaviors;\n}\n\nfunction parsePropType(key, type, defaultValue, file) {\n  // [String]=>String\n  if (Array.isArray(type) && type.length === 1) {\n    return type[0];\n  }\n  return type;\n}\n\nfunction initProperties(props) {var isBehavior = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;var file = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n  var properties = {};\n  if (!isBehavior) {\n    properties.vueId = {\n      type: String,\n      value: '' };\n\n    properties.vueSlots = { // 小程序不能直接定义 $slots 的 props，所以通过 vueSlots 转换到 $slots\n      type: null,\n      value: [],\n      observer: function observer(newVal, oldVal) {\n        var $slots = Object.create(null);\n        newVal.forEach(function (slotName) {\n          $slots[slotName] = true;\n        });\n        this.setData({\n          $slots: $slots });\n\n      } };\n\n  }\n  if (Array.isArray(props)) {// ['title']\n    props.forEach(function (key) {\n      properties[key] = {\n        type: null,\n        observer: createObserver(key) };\n\n    });\n  } else if (isPlainObject(props)) {// {title:{type:String,default:''},content:String}\n    Object.keys(props).forEach(function (key) {\n      var opts = props[key];\n      if (isPlainObject(opts)) {// title:{type:String,default:''}\n        var value = opts['default'];\n        if (isFn(value)) {\n          value = value();\n        }\n\n        opts.type = parsePropType(key, opts.type);\n\n        properties[key] = {\n          type: PROP_TYPES.indexOf(opts.type) !== -1 ? opts.type : null,\n          value: value,\n          observer: createObserver(key) };\n\n      } else {// content:String\n        var type = parsePropType(key, opts);\n        properties[key] = {\n          type: PROP_TYPES.indexOf(type) !== -1 ? type : null,\n          observer: createObserver(key) };\n\n      }\n    });\n  }\n  return properties;\n}\n\nfunction wrapper$2(event) {\n  // TODO 又得兼容 mpvue 的 mp 对象\n  try {\n    event.mp = JSON.parse(JSON.stringify(event));\n  } catch (e) {}\n\n  event.stopPropagation = noop;\n  event.preventDefault = noop;\n\n  event.target = event.target || {};\n\n  if (!hasOwn(event, 'detail')) {\n    event.detail = {};\n  }\n\n  if (isPlainObject(event.detail)) {\n    event.target = Object.assign({}, event.target, event.detail);\n  }\n\n  return event;\n}\n\nfunction getExtraValue(vm, dataPathsArray) {\n  var context = vm;\n  dataPathsArray.forEach(function (dataPathArray) {\n    var dataPath = dataPathArray[0];\n    var value = dataPathArray[2];\n    if (dataPath || typeof value !== 'undefined') {// ['','',index,'disable']\n      var propPath = dataPathArray[1];\n      var valuePath = dataPathArray[3];\n\n      var vFor = dataPath ? vm.__get_value(dataPath, context) : context;\n\n      if (Number.isInteger(vFor)) {\n        context = value;\n      } else if (!propPath) {\n        context = vFor[value];\n      } else {\n        if (Array.isArray(vFor)) {\n          context = vFor.find(function (vForItem) {\n            return vm.__get_value(propPath, vForItem) === value;\n          });\n        } else if (isPlainObject(vFor)) {\n          context = Object.keys(vFor).find(function (vForKey) {\n            return vm.__get_value(propPath, vFor[vForKey]) === value;\n          });\n        } else {\n          console.error('v-for 暂不支持循环数据：', vFor);\n        }\n      }\n\n      if (valuePath) {\n        context = vm.__get_value(valuePath, context);\n      }\n    }\n  });\n  return context;\n}\n\nfunction processEventExtra(vm, extra, event) {\n  var extraObj = {};\n\n  if (Array.isArray(extra) && extra.length) {\n    /**\r\n                                              *[\r\n                                              *    ['data.items', 'data.id', item.data.id],\r\n                                              *    ['metas', 'id', meta.id]\r\n                                              *],\r\n                                              *[\r\n                                              *    ['data.items', 'data.id', item.data.id],\r\n                                              *    ['metas', 'id', meta.id]\r\n                                              *],\r\n                                              *'test'\r\n                                              */\n    extra.forEach(function (dataPath, index) {\n      if (typeof dataPath === 'string') {\n        if (!dataPath) {// model,prop.sync\n          extraObj['$' + index] = vm;\n        } else {\n          if (dataPath === '$event') {// $event\n            extraObj['$' + index] = event;\n          } else if (dataPath.indexOf('$event.') === 0) {// $event.target.value\n            extraObj['$' + index] = vm.__get_value(dataPath.replace('$event.', ''), event);\n          } else {\n            extraObj['$' + index] = vm.__get_value(dataPath);\n          }\n        }\n      } else {\n        extraObj['$' + index] = getExtraValue(vm, dataPath);\n      }\n    });\n  }\n\n  return extraObj;\n}\n\nfunction getObjByArray(arr) {\n  var obj = {};\n  for (var i = 1; i < arr.length; i++) {\n    var element = arr[i];\n    obj[element[0]] = element[1];\n  }\n  return obj;\n}\n\nfunction processEventArgs(vm, event) {var args = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];var extra = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];var isCustom = arguments.length > 4 ? arguments[4] : undefined;var methodName = arguments.length > 5 ? arguments[5] : undefined;\n  var isCustomMPEvent = false; // wxcomponent 组件，传递原始 event 对象\n  if (isCustom) {// 自定义事件\n    isCustomMPEvent = event.currentTarget &&\n    event.currentTarget.dataset &&\n    event.currentTarget.dataset.comType === 'wx';\n    if (!args.length) {// 无参数，直接传入 event 或 detail 数组\n      if (isCustomMPEvent) {\n        return [event];\n      }\n      return event.detail.__args__ || event.detail;\n    }\n  }\n\n  var extraObj = processEventExtra(vm, extra, event);\n\n  var ret = [];\n  args.forEach(function (arg) {\n    if (arg === '$event') {\n      if (methodName === '__set_model' && !isCustom) {// input v-model value\n        ret.push(event.target.value);\n      } else {\n        if (isCustom && !isCustomMPEvent) {\n          ret.push(event.detail.__args__[0]);\n        } else {// wxcomponent 组件或内置组件\n          ret.push(event);\n        }\n      }\n    } else {\n      if (Array.isArray(arg) && arg[0] === 'o') {\n        ret.push(getObjByArray(arg));\n      } else if (typeof arg === 'string' && hasOwn(extraObj, arg)) {\n        ret.push(extraObj[arg]);\n      } else {\n        ret.push(arg);\n      }\n    }\n  });\n\n  return ret;\n}\n\nvar ONCE = '~';\nvar CUSTOM = '^';\n\nfunction isMatchEventType(eventType, optType) {\n  return eventType === optType ||\n\n  optType === 'regionchange' && (\n\n  eventType === 'begin' ||\n  eventType === 'end');\n\n\n}\n\nfunction handleEvent(event) {var _this = this;\n  event = wrapper$2(event);\n\n  // [['tap',[['handle',[1,2,a]],['handle1',[1,2,a]]]]]\n  var dataset = (event.currentTarget || event.target).dataset;\n  if (!dataset) {\n    return console.warn(\"\\u4E8B\\u4EF6\\u4FE1\\u606F\\u4E0D\\u5B58\\u5728\");\n  }\n  var eventOpts = dataset.eventOpts || dataset['event-opts']; // 支付宝 web-view 组件 dataset 非驼峰\n  if (!eventOpts) {\n    return console.warn(\"\\u4E8B\\u4EF6\\u4FE1\\u606F\\u4E0D\\u5B58\\u5728\");\n  }\n\n  // [['handle',[1,2,a]],['handle1',[1,2,a]]]\n  var eventType = event.type;\n\n  var ret = [];\n\n  eventOpts.forEach(function (eventOpt) {\n    var type = eventOpt[0];\n    var eventsArray = eventOpt[1];\n\n    var isCustom = type.charAt(0) === CUSTOM;\n    type = isCustom ? type.slice(1) : type;\n    var isOnce = type.charAt(0) === ONCE;\n    type = isOnce ? type.slice(1) : type;\n\n    if (eventsArray && isMatchEventType(eventType, type)) {\n      eventsArray.forEach(function (eventArray) {\n        var methodName = eventArray[0];\n        if (methodName) {\n          var handlerCtx = _this.$vm;\n          if (\n          handlerCtx.$options.generic &&\n          handlerCtx.$parent &&\n          handlerCtx.$parent.$parent)\n          {// mp-weixin,mp-toutiao 抽象节点模拟 scoped slots\n            handlerCtx = handlerCtx.$parent.$parent;\n          }\n          var handler = handlerCtx[methodName];\n          if (!isFn(handler)) {\n            throw new Error(\" _vm.\".concat(methodName, \" is not a function\"));\n          }\n          if (isOnce) {\n            if (handler.once) {\n              return;\n            }\n            handler.once = true;\n          }\n          ret.push(handler.apply(handlerCtx, processEventArgs(\n          _this.$vm,\n          event,\n          eventArray[1],\n          eventArray[2],\n          isCustom,\n          methodName)));\n\n        }\n      });\n    }\n  });\n\n  if (\n  eventType === 'input' &&\n  ret.length === 1 &&\n  typeof ret[0] !== 'undefined')\n  {\n    return ret[0];\n  }\n}\n\nvar hooks = [\n'onShow',\n'onHide',\n'onError',\n'onPageNotFound'];\n\n\nfunction parseBaseApp(vm, _ref3)\n\n\n{var mocks = _ref3.mocks,initRefs = _ref3.initRefs;\n  if (vm.$options.store) {\n    _vue.default.prototype.$store = vm.$options.store;\n  }\n\n  _vue.default.prototype.mpHost = \"app-plus\";\n\n  _vue.default.mixin({\n    beforeCreate: function beforeCreate() {\n      if (!this.$options.mpType) {\n        return;\n      }\n\n      this.mpType = this.$options.mpType;\n\n      this.$mp = _defineProperty({\n        data: {} },\n      this.mpType, this.$options.mpInstance);\n\n\n      this.$scope = this.$options.mpInstance;\n\n      delete this.$options.mpType;\n      delete this.$options.mpInstance;\n\n      if (this.mpType !== 'app') {\n        initRefs(this);\n        initMocks(this, mocks);\n      }\n    } });\n\n\n  var appOptions = {\n    onLaunch: function onLaunch(args) {\n      if (this.$vm) {// 已经初始化过了，主要是为了百度，百度 onShow 在 onLaunch 之前\n        return;\n      }\n\n      this.$vm = vm;\n\n      this.$vm.$mp = {\n        app: this };\n\n\n      this.$vm.$scope = this;\n      // vm 上也挂载 globalData\n      this.$vm.globalData = this.globalData;\n\n      this.$vm._isMounted = true;\n      this.$vm.__call_hook('mounted', args);\n\n      this.$vm.__call_hook('onLaunch', args);\n    } };\n\n\n  // 兼容旧版本 globalData\n  appOptions.globalData = vm.$options.globalData || {};\n\n  initHooks(appOptions, hooks);\n\n  return appOptions;\n}\n\nvar mocks = ['__route__', '__wxExparserNodeId__', '__wxWebviewId__'];\n\nfunction findVmByVueId(vm, vuePid) {\n  var $children = vm.$children;\n  // 优先查找直属\n  var parentVm = $children.find(function (childVm) {return childVm.$scope._$vueId === vuePid;});\n  if (parentVm) {\n    return parentVm;\n  }\n  // 反向递归查找\n  for (var i = $children.length - 1; i >= 0; i--) {\n    parentVm = findVmByVueId($children[i], vuePid);\n    if (parentVm) {\n      return parentVm;\n    }\n  }\n}\n\nfunction initBehavior(options) {\n  return Behavior(options);\n}\n\nfunction isPage() {\n  return !!this.route;\n}\n\nfunction initRelation(detail) {\n  this.triggerEvent('__l', detail);\n}\n\nfunction initRefs(vm) {\n  var mpInstance = vm.$scope;\n  Object.defineProperty(vm, '$refs', {\n    get: function get() {\n      var $refs = {};\n      var components = mpInstance.selectAllComponents('.vue-ref');\n      components.forEach(function (component) {\n        var ref = component.dataset.ref;\n        $refs[ref] = component.$vm || component;\n      });\n      var forComponents = mpInstance.selectAllComponents('.vue-ref-in-for');\n      forComponents.forEach(function (component) {\n        var ref = component.dataset.ref;\n        if (!$refs[ref]) {\n          $refs[ref] = [];\n        }\n        $refs[ref].push(component.$vm || component);\n      });\n      return $refs;\n    } });\n\n}\n\nfunction handleLink(event) {var _ref4 =\n\n\n\n  event.detail || event.value,vuePid = _ref4.vuePid,vueOptions = _ref4.vueOptions; // detail 是微信,value 是百度(dipatch)\n\n  var parentVm;\n\n  if (vuePid) {\n    parentVm = findVmByVueId(this.$vm, vuePid);\n  }\n\n  if (!parentVm) {\n    parentVm = this.$vm;\n  }\n\n  vueOptions.parent = parentVm;\n}\n\nfunction parseApp(vm) {\n  return parseBaseApp(vm, {\n    mocks: mocks,\n    initRefs: initRefs });\n\n}\n\nvar hooks$1 = [\n'onUniNViewMessage'];\n\n\nfunction parseApp$1(vm) {\n  var appOptions = parseApp(vm);\n\n  initHooks(appOptions, hooks$1);\n\n  return appOptions;\n}\n\nfunction createApp(vm) {\n  App(parseApp$1(vm));\n  return vm;\n}\n\nfunction parseBaseComponent(vueComponentOptions)\n\n\n{var _ref5 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},isPage = _ref5.isPage,initRelation = _ref5.initRelation;var _initVueComponent =\n  initVueComponent(_vue.default, vueComponentOptions),_initVueComponent2 = _slicedToArray(_initVueComponent, 2),VueComponent = _initVueComponent2[0],vueOptions = _initVueComponent2[1];\n\n  var options = {\n    multipleSlots: true,\n    addGlobalClass: true };\n\n\n  var componentOptions = {\n    options: options,\n    data: initData(vueOptions, _vue.default.prototype),\n    behaviors: initBehaviors(vueOptions, initBehavior),\n    properties: initProperties(vueOptions.props, false, vueOptions.__file),\n    lifetimes: {\n      attached: function attached() {\n        var properties = this.properties;\n\n        var options = {\n          mpType: isPage.call(this) ? 'page' : 'component',\n          mpInstance: this,\n          propsData: properties };\n\n\n        initVueIds(properties.vueId, this);\n\n        // 处理父子关系\n        initRelation.call(this, {\n          vuePid: this._$vuePid,\n          vueOptions: options });\n\n\n        // 初始化 vue 实例\n        this.$vm = new VueComponent(options);\n\n        // 处理$slots,$scopedSlots（暂不支持动态变化$slots）\n        initSlots(this.$vm, properties.vueSlots);\n\n        // 触发首次 setData\n        this.$vm.$mount();\n      },\n      ready: function ready() {\n        // 当组件 props 默认值为 true，初始化时传入 false 会导致 created,ready 触发, 但 attached 不触发\n        // https://developers.weixin.qq.com/community/develop/doc/00066ae2844cc0f8eb883e2a557800\n        if (this.$vm) {\n          this.$vm._isMounted = true;\n          this.$vm.__call_hook('mounted');\n          this.$vm.__call_hook('onReady');\n        }\n      },\n      detached: function detached() {\n        this.$vm.$destroy();\n      } },\n\n    pageLifetimes: {\n      show: function show(args) {\n        this.$vm && this.$vm.__call_hook('onPageShow', args);\n      },\n      hide: function hide() {\n        this.$vm && this.$vm.__call_hook('onPageHide');\n      },\n      resize: function resize(size) {\n        this.$vm && this.$vm.__call_hook('onPageResize', size);\n      } },\n\n    methods: {\n      __l: handleLink,\n      __e: handleEvent } };\n\n\n\n  if (Array.isArray(vueOptions.wxsCallMethods)) {\n    vueOptions.wxsCallMethods.forEach(function (callMethod) {\n      componentOptions.methods[callMethod] = function (args) {\n        return this.$vm[callMethod](args);\n      };\n    });\n  }\n\n  if (isPage) {\n    return componentOptions;\n  }\n  return [componentOptions, VueComponent];\n}\n\nfunction parseComponent(vueComponentOptions) {\n  return parseBaseComponent(vueComponentOptions, {\n    isPage: isPage,\n    initRelation: initRelation });\n\n}\n\nfunction parseComponent$1(vueComponentOptions) {\n  var componentOptions = parseComponent(vueComponentOptions);\n\n  componentOptions.methods.$getAppWebview = function () {\n    return plus.webview.getWebviewById(\"\".concat(this.__wxWebviewId__));\n  };\n  return componentOptions;\n}\n\nvar hooks$2 = [\n'onShow',\n'onHide',\n'onUnload'];\n\n\nhooks$2.push.apply(hooks$2, PAGE_EVENT_HOOKS);\n\nfunction parseBasePage(vuePageOptions, _ref6)\n\n\n{var isPage = _ref6.isPage,initRelation = _ref6.initRelation;\n  var pageOptions = parseComponent$1(vuePageOptions);\n\n  initHooks(pageOptions.methods, hooks$2, vuePageOptions);\n\n  pageOptions.methods.onLoad = function (args) {\n    this.$vm.$mp.query = args; // 兼容 mpvue\n    this.$vm.__call_hook('onLoad', args);\n  };\n\n  return pageOptions;\n}\n\nfunction parsePage(vuePageOptions) {\n  return parseBasePage(vuePageOptions, {\n    isPage: isPage,\n    initRelation: initRelation });\n\n}\n\nvar hooks$3 = [\n'onBackPress',\n'onNavigationBarButtonTap',\n'onNavigationBarSearchInputChanged',\n'onNavigationBarSearchInputConfirmed',\n'onNavigationBarSearchInputClicked'];\n\n\nfunction parsePage$1(vuePageOptions) {\n  var pageOptions = parsePage(vuePageOptions);\n\n  initHooks(pageOptions.methods, hooks$3);\n\n  return pageOptions;\n}\n\nfunction createPage(vuePageOptions) {\n  {\n    return Component(parsePage$1(vuePageOptions));\n  }\n}\n\nfunction createComponent(vueOptions) {\n  {\n    return Component(parseComponent$1(vueOptions));\n  }\n}\n\ntodos.forEach(function (todoApi) {\n  protocols[todoApi] = false;\n});\n\ncanIUses.forEach(function (canIUseApi) {\n  var apiName = protocols[canIUseApi] && protocols[canIUseApi].name ? protocols[canIUseApi].name :\n  canIUseApi;\n  if (!wx.canIUse(apiName)) {\n    protocols[canIUseApi] = false;\n  }\n});\n\nvar uni = {};\n\nif (typeof Proxy !== 'undefined' && \"app-plus\" !== 'app-plus') {\n  uni = new Proxy({}, {\n    get: function get(target, name) {\n      if (target[name]) {\n        return target[name];\n      }\n      if (baseApi[name]) {\n        return baseApi[name];\n      }\n      if (api[name]) {\n        return promisify(name, api[name]);\n      }\n      if (eventApi[name]) {\n        return eventApi[name];\n      }\n      if (!hasOwn(wx, name) && !hasOwn(protocols, name)) {\n        return;\n      }\n      return promisify(name, wrapper(name, wx[name]));\n    },\n    set: function set(target, name, value) {\n      target[name] = value;\n      return true;\n    } });\n\n} else {\n  Object.keys(baseApi).forEach(function (name) {\n    uni[name] = baseApi[name];\n  });\n\n  Object.keys(eventApi).forEach(function (name) {\n    uni[name] = eventApi[name];\n  });\n\n  Object.keys(api).forEach(function (name) {\n    uni[name] = promisify(name, api[name]);\n  });\n\n  Object.keys(wx).forEach(function (name) {\n    if (hasOwn(wx, name) || hasOwn(protocols, name)) {\n      uni[name] = promisify(name, wrapper(name, wx[name]));\n    }\n  });\n}\n\n{\n  if (typeof global !== 'undefined') {\n    global.uni = uni;\n    global.UniEmitter = eventApi;\n  }\n}\n\nwx.createApp = createApp;\nwx.createPage = createPage;\nwx.createComponent = createComponent;\n\nvar uni$1 = uni;var _default =\n\nuni$1;exports.default = _default;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../webpack/buildin/global.js */ 2)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1\n");

/***/ }),

/***/ 10:
/*!*********************************************************************!*\
  !*** ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = formatLog;function typof(v) {\n  var s = Object.prototype.toString.call(v);\n  return s.substring(8, s.length - 1);\n}\n\nfunction formatLog() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  var msgs = args.map(function (v) {\n    var type = Object.prototype.toString.call(v);\n\n    if (type.toLowerCase() === '[object object]') {\n      try {\n        v = '---BEGIN:JSON---' + JSON.stringify(v) + '---END:JSON---';\n      } catch (e) {\n        v = '[object object]';\n      }\n    } else {\n      if (v === null) {\n        v = '---NULL---';\n      } else if (v === undefined) {\n        v = '---UNDEFINED---';\n      } else {\n        var vType = typof(v).toUpperCase();\n\n        if (vType === 'NUMBER' || vType === 'BOOLEAN') {\n          v = '---BEGIN:' + vType + '---' + v + '---END:' + vType + '---';\n        } else {\n          v = String(v);\n        }\n      }\n    }\n\n    return v;\n  });\n  var msg = '';\n\n  if (msgs.length > 1) {\n    var lastMsg = msgs.pop();\n    msg = msgs.join('---COMMA---');\n\n    if (lastMsg.indexOf(' at ') === 0) {\n      msg += lastMsg;\n    } else {\n      msg += '---COMMA---' + lastMsg;\n    }\n  } else {\n    msg = msgs[0];\n  }\n\n  return msg;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbInR5cG9mIiwidiIsInMiLCJPYmplY3QiLCJwcm90b3R5cGUiLCJ0b1N0cmluZyIsImNhbGwiLCJzdWJzdHJpbmciLCJsZW5ndGgiLCJmb3JtYXRMb2ciLCJfbGVuIiwiYXJndW1lbnRzIiwiYXJncyIsIkFycmF5IiwiX2tleSIsIm1zZ3MiLCJtYXAiLCJ0eXBlIiwidG9Mb3dlckNhc2UiLCJKU09OIiwic3RyaW5naWZ5IiwiZSIsInVuZGVmaW5lZCIsInZUeXBlIiwidG9VcHBlckNhc2UiLCJTdHJpbmciLCJtc2ciLCJsYXN0TXNnIiwicG9wIiwiam9pbiIsImluZGV4T2YiXSwibWFwcGluZ3MiOiIwRkFBQSxTQUFTQSxLQUFULENBQWdCQyxDQUFoQixFQUFtQjtBQUNqQixNQUFJQyxDQUFDLEdBQUdDLE1BQU0sQ0FBQ0MsU0FBUCxDQUFpQkMsUUFBakIsQ0FBMEJDLElBQTFCLENBQStCTCxDQUEvQixDQUFSO0FBQ0EsU0FBT0MsQ0FBQyxDQUFDSyxTQUFGLENBQVksQ0FBWixFQUFlTCxDQUFDLENBQUNNLE1BQUYsR0FBVyxDQUExQixDQUFQO0FBQ0Q7O0FBRWMsU0FBU0MsU0FBVCxHQUFzQjtBQUNuQyxPQUFLLElBQUlDLElBQUksR0FBR0MsU0FBUyxDQUFDSCxNQUFyQixFQUE2QkksSUFBSSxHQUFHLElBQUlDLEtBQUosQ0FBVUgsSUFBVixDQUFwQyxFQUFxREksSUFBSSxHQUFHLENBQWpFLEVBQW9FQSxJQUFJLEdBQUdKLElBQTNFLEVBQWlGSSxJQUFJLEVBQXJGLEVBQXlGO0FBQ3ZGRixRQUFJLENBQUNFLElBQUQsQ0FBSixHQUFhSCxTQUFTLENBQUNHLElBQUQsQ0FBdEI7QUFDRDs7QUFFRCxNQUFJQyxJQUFJLEdBQUdILElBQUksQ0FBQ0ksR0FBTCxDQUFTLFVBQVVmLENBQVYsRUFBYTtBQUMvQixRQUFJZ0IsSUFBSSxHQUFHZCxNQUFNLENBQUNDLFNBQVAsQ0FBaUJDLFFBQWpCLENBQTBCQyxJQUExQixDQUErQkwsQ0FBL0IsQ0FBWDs7QUFFQSxRQUFJZ0IsSUFBSSxDQUFDQyxXQUFMLE9BQXVCLGlCQUEzQixFQUE4QztBQUM1QyxVQUFJO0FBQ0ZqQixTQUFDLEdBQUcscUJBQXFCa0IsSUFBSSxDQUFDQyxTQUFMLENBQWVuQixDQUFmLENBQXJCLEdBQXlDLGdCQUE3QztBQUNELE9BRkQsQ0FFRSxPQUFPb0IsQ0FBUCxFQUFVO0FBQ1ZwQixTQUFDLEdBQUcsaUJBQUo7QUFDRDtBQUNGLEtBTkQsTUFNTztBQUNMLFVBQUlBLENBQUMsS0FBSyxJQUFWLEVBQWdCO0FBQ2RBLFNBQUMsR0FBRyxZQUFKO0FBQ0QsT0FGRCxNQUVPLElBQUlBLENBQUMsS0FBS3FCLFNBQVYsRUFBcUI7QUFDMUJyQixTQUFDLEdBQUcsaUJBQUo7QUFDRCxPQUZNLE1BRUE7QUFDTCxZQUFJc0IsS0FBSyxHQUFHdkIsS0FBSyxDQUFDQyxDQUFELENBQUwsQ0FBU3VCLFdBQVQsRUFBWjs7QUFFQSxZQUFJRCxLQUFLLEtBQUssUUFBVixJQUFzQkEsS0FBSyxLQUFLLFNBQXBDLEVBQStDO0FBQzdDdEIsV0FBQyxHQUFHLGNBQWNzQixLQUFkLEdBQXNCLEtBQXRCLEdBQThCdEIsQ0FBOUIsR0FBa0MsU0FBbEMsR0FBOENzQixLQUE5QyxHQUFzRCxLQUExRDtBQUNELFNBRkQsTUFFTztBQUNMdEIsV0FBQyxHQUFHd0IsTUFBTSxDQUFDeEIsQ0FBRCxDQUFWO0FBQ0Q7QUFDRjtBQUNGOztBQUVELFdBQU9BLENBQVA7QUFDRCxHQTFCVSxDQUFYO0FBMkJBLE1BQUl5QixHQUFHLEdBQUcsRUFBVjs7QUFFQSxNQUFJWCxJQUFJLENBQUNQLE1BQUwsR0FBYyxDQUFsQixFQUFxQjtBQUNuQixRQUFJbUIsT0FBTyxHQUFHWixJQUFJLENBQUNhLEdBQUwsRUFBZDtBQUNBRixPQUFHLEdBQUdYLElBQUksQ0FBQ2MsSUFBTCxDQUFVLGFBQVYsQ0FBTjs7QUFFQSxRQUFJRixPQUFPLENBQUNHLE9BQVIsQ0FBZ0IsTUFBaEIsTUFBNEIsQ0FBaEMsRUFBbUM7QUFDakNKLFNBQUcsSUFBSUMsT0FBUDtBQUNELEtBRkQsTUFFTztBQUNMRCxTQUFHLElBQUksZ0JBQWdCQyxPQUF2QjtBQUNEO0FBQ0YsR0FURCxNQVNPO0FBQ0xELE9BQUcsR0FBR1gsSUFBSSxDQUFDLENBQUQsQ0FBVjtBQUNEOztBQUVELFNBQU9XLEdBQVA7QUFDRCIsImZpbGUiOiIxMC5qcyIsInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIHR5cG9mICh2KSB7XHJcbiAgdmFyIHMgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodilcclxuICByZXR1cm4gcy5zdWJzdHJpbmcoOCwgcy5sZW5ndGggLSAxKVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmb3JtYXRMb2cgKCkge1xyXG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xyXG4gICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XVxyXG4gIH1cclxuXHJcbiAgdmFyIG1zZ3MgPSBhcmdzLm1hcChmdW5jdGlvbiAodikge1xyXG4gICAgdmFyIHR5cGUgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodilcclxuXHJcbiAgICBpZiAodHlwZS50b0xvd2VyQ2FzZSgpID09PSAnW29iamVjdCBvYmplY3RdJykge1xyXG4gICAgICB0cnkge1xyXG4gICAgICAgIHYgPSAnLS0tQkVHSU46SlNPTi0tLScgKyBKU09OLnN0cmluZ2lmeSh2KSArICctLS1FTkQ6SlNPTi0tLSdcclxuICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgIHYgPSAnW29iamVjdCBvYmplY3RdJ1xyXG4gICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBpZiAodiA9PT0gbnVsbCkge1xyXG4gICAgICAgIHYgPSAnLS0tTlVMTC0tLSdcclxuICAgICAgfSBlbHNlIGlmICh2ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICB2ID0gJy0tLVVOREVGSU5FRC0tLSdcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB2YXIgdlR5cGUgPSB0eXBvZih2KS50b1VwcGVyQ2FzZSgpXHJcblxyXG4gICAgICAgIGlmICh2VHlwZSA9PT0gJ05VTUJFUicgfHwgdlR5cGUgPT09ICdCT09MRUFOJykge1xyXG4gICAgICAgICAgdiA9ICctLS1CRUdJTjonICsgdlR5cGUgKyAnLS0tJyArIHYgKyAnLS0tRU5EOicgKyB2VHlwZSArICctLS0nXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHYgPSBTdHJpbmcodilcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdlxyXG4gIH0pXHJcbiAgdmFyIG1zZyA9ICcnXHJcblxyXG4gIGlmIChtc2dzLmxlbmd0aCA+IDEpIHtcclxuICAgIHZhciBsYXN0TXNnID0gbXNncy5wb3AoKVxyXG4gICAgbXNnID0gbXNncy5qb2luKCctLS1DT01NQS0tLScpXHJcblxyXG4gICAgaWYgKGxhc3RNc2cuaW5kZXhPZignIGF0ICcpID09PSAwKSB7XHJcbiAgICAgIG1zZyArPSBsYXN0TXNnXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBtc2cgKz0gJy0tLUNPTU1BLS0tJyArIGxhc3RNc2dcclxuICAgIH1cclxuICB9IGVsc2Uge1xyXG4gICAgbXNnID0gbXNnc1swXVxyXG4gIH1cclxuXHJcbiAgcmV0dXJuIG1zZ1xyXG59XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///10\n");

/***/ }),

/***/ 11:
/*!********************************************!*\
  !*** ./node_modules/vuex/dist/vuex.esm.js ***!
  \********************************************/
/*! exports provided: Store, install, mapState, mapMutations, mapGetters, mapActions, createNamespacedHelpers, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Store\", function() { return Store; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"install\", function() { return install; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"mapState\", function() { return mapState; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"mapMutations\", function() { return mapMutations; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"mapGetters\", function() { return mapGetters; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"mapActions\", function() { return mapActions; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"createNamespacedHelpers\", function() { return createNamespacedHelpers; });\n/**\n * vuex v3.0.1\n * (c) 2017 Evan You\n * @license MIT\n */\nvar applyMixin = function (Vue) {\n  var version = Number(Vue.version.split('.')[0]);\n\n  if (version >= 2) {\n    Vue.mixin({ beforeCreate: vuexInit });\n  } else {\n    // override init and inject vuex init procedure\n    // for 1.x backwards compatibility.\n    var _init = Vue.prototype._init;\n    Vue.prototype._init = function (options) {\n      if ( options === void 0 ) options = {};\n\n      options.init = options.init\n        ? [vuexInit].concat(options.init)\n        : vuexInit;\n      _init.call(this, options);\n    };\n  }\n\n  /**\n   * Vuex init hook, injected into each instances init hooks list.\n   */\n\n  function vuexInit () {\n    var options = this.$options;\n    // store injection\n    if (options.store) {\n      this.$store = typeof options.store === 'function'\n        ? options.store()\n        : options.store;\n    } else if (options.parent && options.parent.$store) {\n      this.$store = options.parent.$store;\n    }\n  }\n};\n\nvar devtoolHook =\n  typeof window !== 'undefined' &&\n  window.__VUE_DEVTOOLS_GLOBAL_HOOK__;\n\nfunction devtoolPlugin (store) {\n  if (!devtoolHook) { return }\n\n  store._devtoolHook = devtoolHook;\n\n  devtoolHook.emit('vuex:init', store);\n\n  devtoolHook.on('vuex:travel-to-state', function (targetState) {\n    store.replaceState(targetState);\n  });\n\n  store.subscribe(function (mutation, state) {\n    devtoolHook.emit('vuex:mutation', mutation, state);\n  });\n}\n\n/**\n * Get the first item that pass the test\n * by second argument function\n *\n * @param {Array} list\n * @param {Function} f\n * @return {*}\n */\n/**\n * Deep copy the given object considering circular structure.\n * This function caches all nested objects and its copies.\n * If it detects circular structure, use cached copy to avoid infinite loop.\n *\n * @param {*} obj\n * @param {Array<Object>} cache\n * @return {*}\n */\n\n\n/**\n * forEach for object\n */\nfunction forEachValue (obj, fn) {\n  Object.keys(obj).forEach(function (key) { return fn(obj[key], key); });\n}\n\nfunction isObject (obj) {\n  return obj !== null && typeof obj === 'object'\n}\n\nfunction isPromise (val) {\n  return val && typeof val.then === 'function'\n}\n\nfunction assert (condition, msg) {\n  if (!condition) { throw new Error((\"[vuex] \" + msg)) }\n}\n\nvar Module = function Module (rawModule, runtime) {\n  this.runtime = runtime;\n  this._children = Object.create(null);\n  this._rawModule = rawModule;\n  var rawState = rawModule.state;\n  this.state = (typeof rawState === 'function' ? rawState() : rawState) || {};\n};\n\nvar prototypeAccessors$1 = { namespaced: { configurable: true } };\n\nprototypeAccessors$1.namespaced.get = function () {\n  return !!this._rawModule.namespaced\n};\n\nModule.prototype.addChild = function addChild (key, module) {\n  this._children[key] = module;\n};\n\nModule.prototype.removeChild = function removeChild (key) {\n  delete this._children[key];\n};\n\nModule.prototype.getChild = function getChild (key) {\n  return this._children[key]\n};\n\nModule.prototype.update = function update (rawModule) {\n  this._rawModule.namespaced = rawModule.namespaced;\n  if (rawModule.actions) {\n    this._rawModule.actions = rawModule.actions;\n  }\n  if (rawModule.mutations) {\n    this._rawModule.mutations = rawModule.mutations;\n  }\n  if (rawModule.getters) {\n    this._rawModule.getters = rawModule.getters;\n  }\n};\n\nModule.prototype.forEachChild = function forEachChild (fn) {\n  forEachValue(this._children, fn);\n};\n\nModule.prototype.forEachGetter = function forEachGetter (fn) {\n  if (this._rawModule.getters) {\n    forEachValue(this._rawModule.getters, fn);\n  }\n};\n\nModule.prototype.forEachAction = function forEachAction (fn) {\n  if (this._rawModule.actions) {\n    forEachValue(this._rawModule.actions, fn);\n  }\n};\n\nModule.prototype.forEachMutation = function forEachMutation (fn) {\n  if (this._rawModule.mutations) {\n    forEachValue(this._rawModule.mutations, fn);\n  }\n};\n\nObject.defineProperties( Module.prototype, prototypeAccessors$1 );\n\nvar ModuleCollection = function ModuleCollection (rawRootModule) {\n  // register root module (Vuex.Store options)\n  this.register([], rawRootModule, false);\n};\n\nModuleCollection.prototype.get = function get (path) {\n  return path.reduce(function (module, key) {\n    return module.getChild(key)\n  }, this.root)\n};\n\nModuleCollection.prototype.getNamespace = function getNamespace (path) {\n  var module = this.root;\n  return path.reduce(function (namespace, key) {\n    module = module.getChild(key);\n    return namespace + (module.namespaced ? key + '/' : '')\n  }, '')\n};\n\nModuleCollection.prototype.update = function update$1 (rawRootModule) {\n  update([], this.root, rawRootModule);\n};\n\nModuleCollection.prototype.register = function register (path, rawModule, runtime) {\n    var this$1 = this;\n    if ( runtime === void 0 ) runtime = true;\n\n  if (true) {\n    assertRawModule(path, rawModule);\n  }\n\n  var newModule = new Module(rawModule, runtime);\n  if (path.length === 0) {\n    this.root = newModule;\n  } else {\n    var parent = this.get(path.slice(0, -1));\n    parent.addChild(path[path.length - 1], newModule);\n  }\n\n  // register nested modules\n  if (rawModule.modules) {\n    forEachValue(rawModule.modules, function (rawChildModule, key) {\n      this$1.register(path.concat(key), rawChildModule, runtime);\n    });\n  }\n};\n\nModuleCollection.prototype.unregister = function unregister (path) {\n  var parent = this.get(path.slice(0, -1));\n  var key = path[path.length - 1];\n  if (!parent.getChild(key).runtime) { return }\n\n  parent.removeChild(key);\n};\n\nfunction update (path, targetModule, newModule) {\n  if (true) {\n    assertRawModule(path, newModule);\n  }\n\n  // update target module\n  targetModule.update(newModule);\n\n  // update nested modules\n  if (newModule.modules) {\n    for (var key in newModule.modules) {\n      if (!targetModule.getChild(key)) {\n        if (true) {\n          console.warn(\n            \"[vuex] trying to add a new module '\" + key + \"' on hot reloading, \" +\n            'manual reload is needed'\n          );\n        }\n        return\n      }\n      update(\n        path.concat(key),\n        targetModule.getChild(key),\n        newModule.modules[key]\n      );\n    }\n  }\n}\n\nvar functionAssert = {\n  assert: function (value) { return typeof value === 'function'; },\n  expected: 'function'\n};\n\nvar objectAssert = {\n  assert: function (value) { return typeof value === 'function' ||\n    (typeof value === 'object' && typeof value.handler === 'function'); },\n  expected: 'function or object with \"handler\" function'\n};\n\nvar assertTypes = {\n  getters: functionAssert,\n  mutations: functionAssert,\n  actions: objectAssert\n};\n\nfunction assertRawModule (path, rawModule) {\n  Object.keys(assertTypes).forEach(function (key) {\n    if (!rawModule[key]) { return }\n\n    var assertOptions = assertTypes[key];\n\n    forEachValue(rawModule[key], function (value, type) {\n      assert(\n        assertOptions.assert(value),\n        makeAssertionMessage(path, key, type, value, assertOptions.expected)\n      );\n    });\n  });\n}\n\nfunction makeAssertionMessage (path, key, type, value, expected) {\n  var buf = key + \" should be \" + expected + \" but \\\"\" + key + \".\" + type + \"\\\"\";\n  if (path.length > 0) {\n    buf += \" in module \\\"\" + (path.join('.')) + \"\\\"\";\n  }\n  buf += \" is \" + (JSON.stringify(value)) + \".\";\n  return buf\n}\n\nvar Vue; // bind on install\n\nvar Store = function Store (options) {\n  var this$1 = this;\n  if ( options === void 0 ) options = {};\n\n  // Auto install if it is not done yet and `window` has `Vue`.\n  // To allow users to avoid auto-installation in some cases,\n  // this code should be placed here. See #731\n  if (!Vue && typeof window !== 'undefined' && window.Vue) {\n    install(window.Vue);\n  }\n\n  if (true) {\n    assert(Vue, \"must call Vue.use(Vuex) before creating a store instance.\");\n    assert(typeof Promise !== 'undefined', \"vuex requires a Promise polyfill in this browser.\");\n    assert(this instanceof Store, \"Store must be called with the new operator.\");\n  }\n\n  var plugins = options.plugins; if ( plugins === void 0 ) plugins = [];\n  var strict = options.strict; if ( strict === void 0 ) strict = false;\n\n  var state = options.state; if ( state === void 0 ) state = {};\n  if (typeof state === 'function') {\n    state = state() || {};\n  }\n\n  // store internal state\n  this._committing = false;\n  this._actions = Object.create(null);\n  this._actionSubscribers = [];\n  this._mutations = Object.create(null);\n  this._wrappedGetters = Object.create(null);\n  this._modules = new ModuleCollection(options);\n  this._modulesNamespaceMap = Object.create(null);\n  this._subscribers = [];\n  this._watcherVM = new Vue();\n\n  // bind commit and dispatch to self\n  var store = this;\n  var ref = this;\n  var dispatch = ref.dispatch;\n  var commit = ref.commit;\n  this.dispatch = function boundDispatch (type, payload) {\n    return dispatch.call(store, type, payload)\n  };\n  this.commit = function boundCommit (type, payload, options) {\n    return commit.call(store, type, payload, options)\n  };\n\n  // strict mode\n  this.strict = strict;\n\n  // init root module.\n  // this also recursively registers all sub-modules\n  // and collects all module getters inside this._wrappedGetters\n  installModule(this, state, [], this._modules.root);\n\n  // initialize the store vm, which is responsible for the reactivity\n  // (also registers _wrappedGetters as computed properties)\n  resetStoreVM(this, state);\n\n  // apply plugins\n  plugins.forEach(function (plugin) { return plugin(this$1); });\n\n  if (Vue.config.devtools) {\n    devtoolPlugin(this);\n  }\n};\n\nvar prototypeAccessors = { state: { configurable: true } };\n\nprototypeAccessors.state.get = function () {\n  return this._vm._data.$$state\n};\n\nprototypeAccessors.state.set = function (v) {\n  if (true) {\n    assert(false, \"Use store.replaceState() to explicit replace store state.\");\n  }\n};\n\nStore.prototype.commit = function commit (_type, _payload, _options) {\n    var this$1 = this;\n\n  // check object-style commit\n  var ref = unifyObjectStyle(_type, _payload, _options);\n    var type = ref.type;\n    var payload = ref.payload;\n    var options = ref.options;\n\n  var mutation = { type: type, payload: payload };\n  var entry = this._mutations[type];\n  if (!entry) {\n    if (true) {\n      console.error((\"[vuex] unknown mutation type: \" + type));\n    }\n    return\n  }\n  this._withCommit(function () {\n    entry.forEach(function commitIterator (handler) {\n      handler(payload);\n    });\n  });\n  this._subscribers.forEach(function (sub) { return sub(mutation, this$1.state); });\n\n  if (\n     true &&\n    options && options.silent\n  ) {\n    console.warn(\n      \"[vuex] mutation type: \" + type + \". Silent option has been removed. \" +\n      'Use the filter functionality in the vue-devtools'\n    );\n  }\n};\n\nStore.prototype.dispatch = function dispatch (_type, _payload) {\n    var this$1 = this;\n\n  // check object-style dispatch\n  var ref = unifyObjectStyle(_type, _payload);\n    var type = ref.type;\n    var payload = ref.payload;\n\n  var action = { type: type, payload: payload };\n  var entry = this._actions[type];\n  if (!entry) {\n    if (true) {\n      console.error((\"[vuex] unknown action type: \" + type));\n    }\n    return\n  }\n\n  this._actionSubscribers.forEach(function (sub) { return sub(action, this$1.state); });\n\n  return entry.length > 1\n    ? Promise.all(entry.map(function (handler) { return handler(payload); }))\n    : entry[0](payload)\n};\n\nStore.prototype.subscribe = function subscribe (fn) {\n  return genericSubscribe(fn, this._subscribers)\n};\n\nStore.prototype.subscribeAction = function subscribeAction (fn) {\n  return genericSubscribe(fn, this._actionSubscribers)\n};\n\nStore.prototype.watch = function watch (getter, cb, options) {\n    var this$1 = this;\n\n  if (true) {\n    assert(typeof getter === 'function', \"store.watch only accepts a function.\");\n  }\n  return this._watcherVM.$watch(function () { return getter(this$1.state, this$1.getters); }, cb, options)\n};\n\nStore.prototype.replaceState = function replaceState (state) {\n    var this$1 = this;\n\n  this._withCommit(function () {\n    this$1._vm._data.$$state = state;\n  });\n};\n\nStore.prototype.registerModule = function registerModule (path, rawModule, options) {\n    if ( options === void 0 ) options = {};\n\n  if (typeof path === 'string') { path = [path]; }\n\n  if (true) {\n    assert(Array.isArray(path), \"module path must be a string or an Array.\");\n    assert(path.length > 0, 'cannot register the root module by using registerModule.');\n  }\n\n  this._modules.register(path, rawModule);\n  installModule(this, this.state, path, this._modules.get(path), options.preserveState);\n  // reset store to update getters...\n  resetStoreVM(this, this.state);\n};\n\nStore.prototype.unregisterModule = function unregisterModule (path) {\n    var this$1 = this;\n\n  if (typeof path === 'string') { path = [path]; }\n\n  if (true) {\n    assert(Array.isArray(path), \"module path must be a string or an Array.\");\n  }\n\n  this._modules.unregister(path);\n  this._withCommit(function () {\n    var parentState = getNestedState(this$1.state, path.slice(0, -1));\n    Vue.delete(parentState, path[path.length - 1]);\n  });\n  resetStore(this);\n};\n\nStore.prototype.hotUpdate = function hotUpdate (newOptions) {\n  this._modules.update(newOptions);\n  resetStore(this, true);\n};\n\nStore.prototype._withCommit = function _withCommit (fn) {\n  var committing = this._committing;\n  this._committing = true;\n  fn();\n  this._committing = committing;\n};\n\nObject.defineProperties( Store.prototype, prototypeAccessors );\n\nfunction genericSubscribe (fn, subs) {\n  if (subs.indexOf(fn) < 0) {\n    subs.push(fn);\n  }\n  return function () {\n    var i = subs.indexOf(fn);\n    if (i > -1) {\n      subs.splice(i, 1);\n    }\n  }\n}\n\nfunction resetStore (store, hot) {\n  store._actions = Object.create(null);\n  store._mutations = Object.create(null);\n  store._wrappedGetters = Object.create(null);\n  store._modulesNamespaceMap = Object.create(null);\n  var state = store.state;\n  // init all modules\n  installModule(store, state, [], store._modules.root, true);\n  // reset vm\n  resetStoreVM(store, state, hot);\n}\n\nfunction resetStoreVM (store, state, hot) {\n  var oldVm = store._vm;\n\n  // bind store public getters\n  store.getters = {};\n  var wrappedGetters = store._wrappedGetters;\n  var computed = {};\n  forEachValue(wrappedGetters, function (fn, key) {\n    // use computed to leverage its lazy-caching mechanism\n    computed[key] = function () { return fn(store); };\n    Object.defineProperty(store.getters, key, {\n      get: function () { return store._vm[key]; },\n      enumerable: true // for local getters\n    });\n  });\n\n  // use a Vue instance to store the state tree\n  // suppress warnings just in case the user has added\n  // some funky global mixins\n  var silent = Vue.config.silent;\n  Vue.config.silent = true;\n  store._vm = new Vue({\n    data: {\n      $$state: state\n    },\n    computed: computed\n  });\n  Vue.config.silent = silent;\n\n  // enable strict mode for new vm\n  if (store.strict) {\n    enableStrictMode(store);\n  }\n\n  if (oldVm) {\n    if (hot) {\n      // dispatch changes in all subscribed watchers\n      // to force getter re-evaluation for hot reloading.\n      store._withCommit(function () {\n        oldVm._data.$$state = null;\n      });\n    }\n    Vue.nextTick(function () { return oldVm.$destroy(); });\n  }\n}\n\nfunction installModule (store, rootState, path, module, hot) {\n  var isRoot = !path.length;\n  var namespace = store._modules.getNamespace(path);\n\n  // register in namespace map\n  if (module.namespaced) {\n    store._modulesNamespaceMap[namespace] = module;\n  }\n\n  // set state\n  if (!isRoot && !hot) {\n    var parentState = getNestedState(rootState, path.slice(0, -1));\n    var moduleName = path[path.length - 1];\n    store._withCommit(function () {\n      Vue.set(parentState, moduleName, module.state);\n    });\n  }\n\n  var local = module.context = makeLocalContext(store, namespace, path);\n\n  module.forEachMutation(function (mutation, key) {\n    var namespacedType = namespace + key;\n    registerMutation(store, namespacedType, mutation, local);\n  });\n\n  module.forEachAction(function (action, key) {\n    var type = action.root ? key : namespace + key;\n    var handler = action.handler || action;\n    registerAction(store, type, handler, local);\n  });\n\n  module.forEachGetter(function (getter, key) {\n    var namespacedType = namespace + key;\n    registerGetter(store, namespacedType, getter, local);\n  });\n\n  module.forEachChild(function (child, key) {\n    installModule(store, rootState, path.concat(key), child, hot);\n  });\n}\n\n/**\n * make localized dispatch, commit, getters and state\n * if there is no namespace, just use root ones\n */\nfunction makeLocalContext (store, namespace, path) {\n  var noNamespace = namespace === '';\n\n  var local = {\n    dispatch: noNamespace ? store.dispatch : function (_type, _payload, _options) {\n      var args = unifyObjectStyle(_type, _payload, _options);\n      var payload = args.payload;\n      var options = args.options;\n      var type = args.type;\n\n      if (!options || !options.root) {\n        type = namespace + type;\n        if ( true && !store._actions[type]) {\n          console.error((\"[vuex] unknown local action type: \" + (args.type) + \", global type: \" + type));\n          return\n        }\n      }\n\n      return store.dispatch(type, payload)\n    },\n\n    commit: noNamespace ? store.commit : function (_type, _payload, _options) {\n      var args = unifyObjectStyle(_type, _payload, _options);\n      var payload = args.payload;\n      var options = args.options;\n      var type = args.type;\n\n      if (!options || !options.root) {\n        type = namespace + type;\n        if ( true && !store._mutations[type]) {\n          console.error((\"[vuex] unknown local mutation type: \" + (args.type) + \", global type: \" + type));\n          return\n        }\n      }\n\n      store.commit(type, payload, options);\n    }\n  };\n\n  // getters and state object must be gotten lazily\n  // because they will be changed by vm update\n  Object.defineProperties(local, {\n    getters: {\n      get: noNamespace\n        ? function () { return store.getters; }\n        : function () { return makeLocalGetters(store, namespace); }\n    },\n    state: {\n      get: function () { return getNestedState(store.state, path); }\n    }\n  });\n\n  return local\n}\n\nfunction makeLocalGetters (store, namespace) {\n  var gettersProxy = {};\n\n  var splitPos = namespace.length;\n  Object.keys(store.getters).forEach(function (type) {\n    // skip if the target getter is not match this namespace\n    if (type.slice(0, splitPos) !== namespace) { return }\n\n    // extract local getter type\n    var localType = type.slice(splitPos);\n\n    // Add a port to the getters proxy.\n    // Define as getter property because\n    // we do not want to evaluate the getters in this time.\n    Object.defineProperty(gettersProxy, localType, {\n      get: function () { return store.getters[type]; },\n      enumerable: true\n    });\n  });\n\n  return gettersProxy\n}\n\nfunction registerMutation (store, type, handler, local) {\n  var entry = store._mutations[type] || (store._mutations[type] = []);\n  entry.push(function wrappedMutationHandler (payload) {\n    handler.call(store, local.state, payload);\n  });\n}\n\nfunction registerAction (store, type, handler, local) {\n  var entry = store._actions[type] || (store._actions[type] = []);\n  entry.push(function wrappedActionHandler (payload, cb) {\n    var res = handler.call(store, {\n      dispatch: local.dispatch,\n      commit: local.commit,\n      getters: local.getters,\n      state: local.state,\n      rootGetters: store.getters,\n      rootState: store.state\n    }, payload, cb);\n    if (!isPromise(res)) {\n      res = Promise.resolve(res);\n    }\n    if (store._devtoolHook) {\n      return res.catch(function (err) {\n        store._devtoolHook.emit('vuex:error', err);\n        throw err\n      })\n    } else {\n      return res\n    }\n  });\n}\n\nfunction registerGetter (store, type, rawGetter, local) {\n  if (store._wrappedGetters[type]) {\n    if (true) {\n      console.error((\"[vuex] duplicate getter key: \" + type));\n    }\n    return\n  }\n  store._wrappedGetters[type] = function wrappedGetter (store) {\n    return rawGetter(\n      local.state, // local state\n      local.getters, // local getters\n      store.state, // root state\n      store.getters // root getters\n    )\n  };\n}\n\nfunction enableStrictMode (store) {\n  store._vm.$watch(function () { return this._data.$$state }, function () {\n    if (true) {\n      assert(store._committing, \"Do not mutate vuex store state outside mutation handlers.\");\n    }\n  }, { deep: true, sync: true });\n}\n\nfunction getNestedState (state, path) {\n  return path.length\n    ? path.reduce(function (state, key) { return state[key]; }, state)\n    : state\n}\n\nfunction unifyObjectStyle (type, payload, options) {\n  if (isObject(type) && type.type) {\n    options = payload;\n    payload = type;\n    type = type.type;\n  }\n\n  if (true) {\n    assert(typeof type === 'string', (\"Expects string as the type, but found \" + (typeof type) + \".\"));\n  }\n\n  return { type: type, payload: payload, options: options }\n}\n\nfunction install (_Vue) {\n  if (Vue && _Vue === Vue) {\n    if (true) {\n      console.error(\n        '[vuex] already installed. Vue.use(Vuex) should be called only once.'\n      );\n    }\n    return\n  }\n  Vue = _Vue;\n  applyMixin(Vue);\n}\n\nvar mapState = normalizeNamespace(function (namespace, states) {\n  var res = {};\n  normalizeMap(states).forEach(function (ref) {\n    var key = ref.key;\n    var val = ref.val;\n\n    res[key] = function mappedState () {\n      var state = this.$store.state;\n      var getters = this.$store.getters;\n      if (namespace) {\n        var module = getModuleByNamespace(this.$store, 'mapState', namespace);\n        if (!module) {\n          return\n        }\n        state = module.context.state;\n        getters = module.context.getters;\n      }\n      return typeof val === 'function'\n        ? val.call(this, state, getters)\n        : state[val]\n    };\n    // mark vuex getter for devtools\n    res[key].vuex = true;\n  });\n  return res\n});\n\nvar mapMutations = normalizeNamespace(function (namespace, mutations) {\n  var res = {};\n  normalizeMap(mutations).forEach(function (ref) {\n    var key = ref.key;\n    var val = ref.val;\n\n    res[key] = function mappedMutation () {\n      var args = [], len = arguments.length;\n      while ( len-- ) args[ len ] = arguments[ len ];\n\n      var commit = this.$store.commit;\n      if (namespace) {\n        var module = getModuleByNamespace(this.$store, 'mapMutations', namespace);\n        if (!module) {\n          return\n        }\n        commit = module.context.commit;\n      }\n      return typeof val === 'function'\n        ? val.apply(this, [commit].concat(args))\n        : commit.apply(this.$store, [val].concat(args))\n    };\n  });\n  return res\n});\n\nvar mapGetters = normalizeNamespace(function (namespace, getters) {\n  var res = {};\n  normalizeMap(getters).forEach(function (ref) {\n    var key = ref.key;\n    var val = ref.val;\n\n    val = namespace + val;\n    res[key] = function mappedGetter () {\n      if (namespace && !getModuleByNamespace(this.$store, 'mapGetters', namespace)) {\n        return\n      }\n      if ( true && !(val in this.$store.getters)) {\n        console.error((\"[vuex] unknown getter: \" + val));\n        return\n      }\n      return this.$store.getters[val]\n    };\n    // mark vuex getter for devtools\n    res[key].vuex = true;\n  });\n  return res\n});\n\nvar mapActions = normalizeNamespace(function (namespace, actions) {\n  var res = {};\n  normalizeMap(actions).forEach(function (ref) {\n    var key = ref.key;\n    var val = ref.val;\n\n    res[key] = function mappedAction () {\n      var args = [], len = arguments.length;\n      while ( len-- ) args[ len ] = arguments[ len ];\n\n      var dispatch = this.$store.dispatch;\n      if (namespace) {\n        var module = getModuleByNamespace(this.$store, 'mapActions', namespace);\n        if (!module) {\n          return\n        }\n        dispatch = module.context.dispatch;\n      }\n      return typeof val === 'function'\n        ? val.apply(this, [dispatch].concat(args))\n        : dispatch.apply(this.$store, [val].concat(args))\n    };\n  });\n  return res\n});\n\nvar createNamespacedHelpers = function (namespace) { return ({\n  mapState: mapState.bind(null, namespace),\n  mapGetters: mapGetters.bind(null, namespace),\n  mapMutations: mapMutations.bind(null, namespace),\n  mapActions: mapActions.bind(null, namespace)\n}); };\n\nfunction normalizeMap (map) {\n  return Array.isArray(map)\n    ? map.map(function (key) { return ({ key: key, val: key }); })\n    : Object.keys(map).map(function (key) { return ({ key: key, val: map[key] }); })\n}\n\nfunction normalizeNamespace (fn) {\n  return function (namespace, map) {\n    if (typeof namespace !== 'string') {\n      map = namespace;\n      namespace = '';\n    } else if (namespace.charAt(namespace.length - 1) !== '/') {\n      namespace += '/';\n    }\n    return fn(namespace, map)\n  }\n}\n\nfunction getModuleByNamespace (store, helper, namespace) {\n  var module = store._modulesNamespaceMap[namespace];\n  if ( true && !module) {\n    console.error((\"[vuex] module namespace not found in \" + helper + \"(): \" + namespace));\n  }\n  return module\n}\n\nvar index_esm = {\n  Store: Store,\n  install: install,\n  version: '3.0.1',\n  mapState: mapState,\n  mapMutations: mapMutations,\n  mapGetters: mapGetters,\n  mapActions: mapActions,\n  createNamespacedHelpers: createNamespacedHelpers\n};\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (index_esm);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///11\n");

/***/ }),

/***/ 169:
/*!***************************************************************!*\
  !*** C:/Users/a/Desktop/toCWechat/uniapp/static/js/myPull.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(uni, __f__) {Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;} /**\n                                                                                                                                                                                                                                                                                                                * @name 封装下拉\n                                                                                                                                                                                                                                                                                                                * @params getList 刷新数据的函数\n                                                                                                                                                                                                                                                                                                                * @params listData 存放数据的变量名\n                                                                                                                                                                                                                                                                                                                * @params page 页数变量名\n                                                                                                                                                                                                                                                                                                                */var _default =\nfunction _default(_ref) {var _ref$getList = _ref.getList,getList = _ref$getList === void 0 ? \"getList\" : _ref$getList,_ref$listData = _ref.listData,listData = _ref$listData === void 0 ? \"listData\" : _ref$listData,_ref$page = _ref.page,page = _ref$page === void 0 ? \"page\" : _ref$page,_ref$initIndex = _ref.initIndex,initIndex = _ref$initIndex === void 0 ? \"initIndex\" : _ref$initIndex,_ref$modelData = _ref.modelData,modelData = _ref$modelData === void 0 ? \"modelData\" : _ref$modelData;\n  var startPoint = {};\n  var endPoint = {};\n  return {\n    data: function data() {var _ref2;\n      return _ref2 = {}, _defineProperty(_ref2,\n      listData, []), _defineProperty(_ref2,\n      page, 1), _defineProperty(_ref2,\n      initIndex, 0), _defineProperty(_ref2,\n      modelData, [\n      { label: \"全部\", backgroud: \"color:#000000\" },\n      { label: \"告警\", backgroud: \"color:#FF0000\" },\n      { label: \"故障\", backgroud: \"color:#FFB400\" },\n      { label: \"离线\", backgroud: \"color:#666666\" }]), _ref2;\n\n\n    },\n    onPullDownRefresh: function onPullDownRefresh() {\n      this.refreshes();\n    },\n    // onReachBottom() {\n    // \tthis[getList].call(this, this[page], this.__pulldone);\n    // },\n    methods: {\n      refreshes: function refreshes() {\n        this[page] = 1;\n        this[getList].call(this, this[page], this.__pulldone);\n      },\n      __pulldone: function __pulldone(data) {\n        var db = data || [];\n        if (this[page] == 1) {\n          this[listData] = db;\n        } else {\n          this[listData] = (this[listData] || []).concat(db);\n        }\n        uni.stopPullDownRefresh();\n        this[page]++;\n      },\n\n      /**\n          * @name 动态开启或关闭pulldown\n          * @params {boolean} isOpen\n          */\n      setPullDown: function setPullDown(isOpen) {\n\n        var pages = getCurrentPages();\n        var page = pages[pages.length - 1];\n        var currentWebview = page.$getAppWebview();\n        currentWebview.setStyle({ //设置当前webview的style\n          pullToRefresh: {\n            support: isOpen,\n            style: plus.os.name === 'Android' ? 'circle' : 'default' } });\n\n\n\n      },\n\n      /**\n          * @name 开始滑动\n          */\n      touchstart: function touchstart(e) {\n        startPoint = {\n          pageX: e.pageX || e.changedTouches[0].pageX,\n          pageY: e.pageY || e.changedTouches[0].pageY };\n\n      },\n\n      /**\n          * @name 滑动结束\n          */\n      touchend: function touchend(e) {\n        endPoint = {\n          pageX: e.mp.changedTouches[0].pageX,\n          pageY: e.mp.changedTouches[0].pageY\n\n          // 判断是左滑动还是右滑动 当横向位移大于10，纵向位移大于100，则判定为滑动事件\n        };var disX = endPoint.pageX - startPoint.pageX; //计算移动的位移差\n        var disY = endPoint.pageY - startPoint.pageY;\n        if (Math.abs(disX) > 10 || Math.abs(disY) > 100) {\n          if (Math.abs(disX) > Math.abs(disY)) {//判断是横向滑动还是纵向滑动\n            if (disX > 10) {\n              this.swiperight(); //右滑\n            };\n            if (disX < -10) {\n              this.swipeleft(); //左滑\n            };\n          }\n        }\n      },\n\n      /**\n          * @name 向左滑动\n          */\n      swipeleft: function swipeleft() {\n        if (this[initIndex] < this[modelData].length - 1) this[initIndex]++;\n        console.log(__f__(\"左滑\", \" at static\\\\js\\\\myPull.js:102\"));\n      },\n\n      /**\n          * @name 监听右滑\n          */\n      swiperight: function swiperight() {\n        if (this[initIndex] > 0) this[initIndex]--;\n        console.log(__f__(\"右滑\", \" at static\\\\js\\\\myPull.js:110\"));\n      } } };\n\n\n};exports.default = _default;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"default\"], __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js */ 10)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///169\n");

/***/ }),

/***/ 17:
/*!********************************************************************!*\
  !*** ./node_modules/vue-loader/lib/runtime/componentNormalizer.js ***!
  \********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return normalizeComponent; });\n/* globals __VUE_SSR_CONTEXT__ */\n\n// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).\n// This module is a runtime utility for cleaner component module output and will\n// be included in the final webpack user bundle.\n\nfunction normalizeComponent (\n  scriptExports,\n  render,\n  staticRenderFns,\n  functionalTemplate,\n  injectStyles,\n  scopeId,\n  moduleIdentifier, /* server only */\n  shadowMode /* vue-cli only */\n) {\n  // Vue.extend constructor export interop\n  var options = typeof scriptExports === 'function'\n    ? scriptExports.options\n    : scriptExports\n\n  // render functions\n  if (render) {\n    options.render = render\n    options.staticRenderFns = staticRenderFns\n    options._compiled = true\n  }\n\n  // functional template\n  if (functionalTemplate) {\n    options.functional = true\n  }\n\n  // scopedId\n  if (scopeId) {\n    options._scopeId = 'data-v-' + scopeId\n  }\n\n  var hook\n  if (moduleIdentifier) { // server build\n    hook = function (context) {\n      // 2.3 injection\n      context =\n        context || // cached call\n        (this.$vnode && this.$vnode.ssrContext) || // stateful\n        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional\n      // 2.2 with runInNewContext: true\n      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {\n        context = __VUE_SSR_CONTEXT__\n      }\n      // inject component styles\n      if (injectStyles) {\n        injectStyles.call(this, context)\n      }\n      // register component module identifier for async chunk inferrence\n      if (context && context._registeredComponents) {\n        context._registeredComponents.add(moduleIdentifier)\n      }\n    }\n    // used by ssr in case component is cached and beforeCreate\n    // never gets called\n    options._ssrRegister = hook\n  } else if (injectStyles) {\n    hook = shadowMode\n      ? function () { injectStyles.call(this, this.$root.$options.shadowRoot) }\n      : injectStyles\n  }\n\n  if (hook) {\n    if (options.functional) {\n      // for template-only hot-reload because in that case the render fn doesn't\n      // go through the normalizer\n      options._injectStyles = hook\n      // register for functioal component in vue file\n      var originalRender = options.render\n      options.render = function renderWithStyleInjection (h, context) {\n        hook.call(context)\n        return originalRender(h, context)\n      }\n    } else {\n      // inject component registration as beforeCreate hook\n      var existing = options.beforeCreate\n      options.beforeCreate = existing\n        ? [].concat(existing, hook)\n        : [hook]\n    }\n  }\n\n  return {\n    exports: scriptExports,\n    options: options\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiMTcuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBnbG9iYWxzIF9fVlVFX1NTUl9DT05URVhUX18gKi9cblxuLy8gSU1QT1JUQU5UOiBEbyBOT1QgdXNlIEVTMjAxNSBmZWF0dXJlcyBpbiB0aGlzIGZpbGUgKGV4Y2VwdCBmb3IgbW9kdWxlcykuXG4vLyBUaGlzIG1vZHVsZSBpcyBhIHJ1bnRpbWUgdXRpbGl0eSBmb3IgY2xlYW5lciBjb21wb25lbnQgbW9kdWxlIG91dHB1dCBhbmQgd2lsbFxuLy8gYmUgaW5jbHVkZWQgaW4gdGhlIGZpbmFsIHdlYnBhY2sgdXNlciBidW5kbGUuXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG5vcm1hbGl6ZUNvbXBvbmVudCAoXG4gIHNjcmlwdEV4cG9ydHMsXG4gIHJlbmRlcixcbiAgc3RhdGljUmVuZGVyRm5zLFxuICBmdW5jdGlvbmFsVGVtcGxhdGUsXG4gIGluamVjdFN0eWxlcyxcbiAgc2NvcGVJZCxcbiAgbW9kdWxlSWRlbnRpZmllciwgLyogc2VydmVyIG9ubHkgKi9cbiAgc2hhZG93TW9kZSAvKiB2dWUtY2xpIG9ubHkgKi9cbikge1xuICAvLyBWdWUuZXh0ZW5kIGNvbnN0cnVjdG9yIGV4cG9ydCBpbnRlcm9wXG4gIHZhciBvcHRpb25zID0gdHlwZW9mIHNjcmlwdEV4cG9ydHMgPT09ICdmdW5jdGlvbidcbiAgICA/IHNjcmlwdEV4cG9ydHMub3B0aW9uc1xuICAgIDogc2NyaXB0RXhwb3J0c1xuXG4gIC8vIHJlbmRlciBmdW5jdGlvbnNcbiAgaWYgKHJlbmRlcikge1xuICAgIG9wdGlvbnMucmVuZGVyID0gcmVuZGVyXG4gICAgb3B0aW9ucy5zdGF0aWNSZW5kZXJGbnMgPSBzdGF0aWNSZW5kZXJGbnNcbiAgICBvcHRpb25zLl9jb21waWxlZCA9IHRydWVcbiAgfVxuXG4gIC8vIGZ1bmN0aW9uYWwgdGVtcGxhdGVcbiAgaWYgKGZ1bmN0aW9uYWxUZW1wbGF0ZSkge1xuICAgIG9wdGlvbnMuZnVuY3Rpb25hbCA9IHRydWVcbiAgfVxuXG4gIC8vIHNjb3BlZElkXG4gIGlmIChzY29wZUlkKSB7XG4gICAgb3B0aW9ucy5fc2NvcGVJZCA9ICdkYXRhLXYtJyArIHNjb3BlSWRcbiAgfVxuXG4gIHZhciBob29rXG4gIGlmIChtb2R1bGVJZGVudGlmaWVyKSB7IC8vIHNlcnZlciBidWlsZFxuICAgIGhvb2sgPSBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgLy8gMi4zIGluamVjdGlvblxuICAgICAgY29udGV4dCA9XG4gICAgICAgIGNvbnRleHQgfHwgLy8gY2FjaGVkIGNhbGxcbiAgICAgICAgKHRoaXMuJHZub2RlICYmIHRoaXMuJHZub2RlLnNzckNvbnRleHQpIHx8IC8vIHN0YXRlZnVsXG4gICAgICAgICh0aGlzLnBhcmVudCAmJiB0aGlzLnBhcmVudC4kdm5vZGUgJiYgdGhpcy5wYXJlbnQuJHZub2RlLnNzckNvbnRleHQpIC8vIGZ1bmN0aW9uYWxcbiAgICAgIC8vIDIuMiB3aXRoIHJ1bkluTmV3Q29udGV4dDogdHJ1ZVxuICAgICAgaWYgKCFjb250ZXh0ICYmIHR5cGVvZiBfX1ZVRV9TU1JfQ09OVEVYVF9fICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBjb250ZXh0ID0gX19WVUVfU1NSX0NPTlRFWFRfX1xuICAgICAgfVxuICAgICAgLy8gaW5qZWN0IGNvbXBvbmVudCBzdHlsZXNcbiAgICAgIGlmIChpbmplY3RTdHlsZXMpIHtcbiAgICAgICAgaW5qZWN0U3R5bGVzLmNhbGwodGhpcywgY29udGV4dClcbiAgICAgIH1cbiAgICAgIC8vIHJlZ2lzdGVyIGNvbXBvbmVudCBtb2R1bGUgaWRlbnRpZmllciBmb3IgYXN5bmMgY2h1bmsgaW5mZXJyZW5jZVxuICAgICAgaWYgKGNvbnRleHQgJiYgY29udGV4dC5fcmVnaXN0ZXJlZENvbXBvbmVudHMpIHtcbiAgICAgICAgY29udGV4dC5fcmVnaXN0ZXJlZENvbXBvbmVudHMuYWRkKG1vZHVsZUlkZW50aWZpZXIpXG4gICAgICB9XG4gICAgfVxuICAgIC8vIHVzZWQgYnkgc3NyIGluIGNhc2UgY29tcG9uZW50IGlzIGNhY2hlZCBhbmQgYmVmb3JlQ3JlYXRlXG4gICAgLy8gbmV2ZXIgZ2V0cyBjYWxsZWRcbiAgICBvcHRpb25zLl9zc3JSZWdpc3RlciA9IGhvb2tcbiAgfSBlbHNlIGlmIChpbmplY3RTdHlsZXMpIHtcbiAgICBob29rID0gc2hhZG93TW9kZVxuICAgICAgPyBmdW5jdGlvbiAoKSB7IGluamVjdFN0eWxlcy5jYWxsKHRoaXMsIHRoaXMuJHJvb3QuJG9wdGlvbnMuc2hhZG93Um9vdCkgfVxuICAgICAgOiBpbmplY3RTdHlsZXNcbiAgfVxuXG4gIGlmIChob29rKSB7XG4gICAgaWYgKG9wdGlvbnMuZnVuY3Rpb25hbCkge1xuICAgICAgLy8gZm9yIHRlbXBsYXRlLW9ubHkgaG90LXJlbG9hZCBiZWNhdXNlIGluIHRoYXQgY2FzZSB0aGUgcmVuZGVyIGZuIGRvZXNuJ3RcbiAgICAgIC8vIGdvIHRocm91Z2ggdGhlIG5vcm1hbGl6ZXJcbiAgICAgIG9wdGlvbnMuX2luamVjdFN0eWxlcyA9IGhvb2tcbiAgICAgIC8vIHJlZ2lzdGVyIGZvciBmdW5jdGlvYWwgY29tcG9uZW50IGluIHZ1ZSBmaWxlXG4gICAgICB2YXIgb3JpZ2luYWxSZW5kZXIgPSBvcHRpb25zLnJlbmRlclxuICAgICAgb3B0aW9ucy5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXJXaXRoU3R5bGVJbmplY3Rpb24gKGgsIGNvbnRleHQpIHtcbiAgICAgICAgaG9vay5jYWxsKGNvbnRleHQpXG4gICAgICAgIHJldHVybiBvcmlnaW5hbFJlbmRlcihoLCBjb250ZXh0KVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBpbmplY3QgY29tcG9uZW50IHJlZ2lzdHJhdGlvbiBhcyBiZWZvcmVDcmVhdGUgaG9va1xuICAgICAgdmFyIGV4aXN0aW5nID0gb3B0aW9ucy5iZWZvcmVDcmVhdGVcbiAgICAgIG9wdGlvbnMuYmVmb3JlQ3JlYXRlID0gZXhpc3RpbmdcbiAgICAgICAgPyBbXS5jb25jYXQoZXhpc3RpbmcsIGhvb2spXG4gICAgICAgIDogW2hvb2tdXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBleHBvcnRzOiBzY3JpcHRFeHBvcnRzLFxuICAgIG9wdGlvbnM6IG9wdGlvbnNcbiAgfVxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///17\n");

/***/ }),

/***/ 18:
/*!***************************************************!*\
  !*** C:/Users/a/Desktop/toCWechat/uniapp/Json.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0; /* 用户 */\nvar userInfo = {\n  status: 1,\n  data: {\n    id: 1,\n    mobile: 18888888888,\n    nickname: 'Leo yo',\n    portrait: 'http://img.61ef.cn/news/201409/28/2014092805595807.jpg' },\n\n  msg: '提示'\n\n  /* 首页轮播图 */ };\nvar carouselList = [{\n  src: \"/static/temp/banner3.jpg\",\n  background: \"rgb(203, 87, 60)\" },\n\n{\n  src: \"/static/temp/banner2.jpg\",\n  background: \"rgb(205, 215, 218)\" },\n\n{\n  src: \"/static/temp/banner4.jpg\",\n  background: \"rgb(183, 73, 69)\" }];\n\n\n/* 商品列表 */\nvar goodsList = [{\n  image: \"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1553187020783&di=bac9dd78b36fd984502d404d231011c0&imgtype=0&src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201609%2F26%2F20160926173213_s5adi.jpeg\",\n  image2: \"http://pic.rmb.bdstatic.com/819a044daa66718c2c40a48c1ba971e6.jpeg\",\n  image3: \"http://img001.hc360.cn/y5/M00/1B/45/wKhQUVYFE0uEZ7zVAAAAAMj3H1w418.jpg\",\n  title: \"古黛妃 短袖t恤女夏装2019新款韩版宽松\",\n  price: 179,\n  sales: 61 },\n\n{\n  image: \"https://ss0.bdstatic.com/70cFuHSh_Q1YnxGkpoWK1HF6hhy/it/u=4031878334,2682695508&fm=11&gp=0.jpg\",\n  image2: \"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1554013048&di=a3dc9fd1406dd7bad7fbb97b5489ec04&imgtype=jpg&er=1&src=http%3A%2F%2Fimg009.hc360.cn%2Fhb%2FnKo44ac2656F831c684507E3Da0E3a26841.jpg\",\n  image3: \"http://img.zcool.cn/community/017a4e58b4eab6a801219c77084373.jpg\",\n  title: \"潘歌针织连衣裙\",\n  price: 78,\n  sales: 16 },\n\n{\n  image: \"https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=1620020012,789258862&fm=26&gp=0.jpg\",\n  image2: \"http://m.360buyimg.com/n12/jfs/t247/42/1078640382/162559/3628a0b/53f5ad09N0dd79894.jpg%21q70.jpg\",\n  image3: \"http://ikids.61kids.com.cn/upload/2018-12-29/1546070626796114.jpg\",\n  title: \"巧谷2019春夏季新品新款女装\",\n  price: 108.8,\n  sales: 5 },\n{\n  image: \"https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=756705744,3505936868&fm=11&gp=0.jpg\",\n  image2: \"http://images.jaadee.com/images/201702/goods_img/30150_d85aed83521.jpg\",\n  image3: \"http://img13.360buyimg.com/popWaterMark/jfs/t865/120/206320620/138889/dcc94caa/550acedcN613e2a9d.jpg\",\n  title: \"私萱连衣裙\",\n  price: 265,\n  sales: 88 },\n{\n  image: \"https://img13.360buyimg.com/n8/jfs/t1/30343/20/1029/481370/5c449438Ecb46a15b/2b2adccb6dc742fd.jpg\",\n  image2: \"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1553418265666&di=d4a7f7eb0ae3c859edeb921641ee1c3a&imgtype=0&src=http%3A%2F%2Fimg003.hc360.cn%2Fy3%2FM02%2FF8%2F9F%2FwKhQh1TuSkGELIlQAAAAAPuLl4M987.jpg\",\n  image3: \"http://img.ef43.com.cn/product/2016/8/05100204b0c.jpg\",\n  title: \"娇诗茹 ulzzang原宿风学生潮韩版春夏短\",\n  price: 422,\n  sales: 137 },\n{\n  image: \"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1553187020783&di=bac9dd78b36fd984502d404d231011c0&imgtype=0&src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201609%2F26%2F20160926173213_s5adi.jpeg\",\n  image2: \"http://image5.suning.cn/uimg/b2c/newcatentries/0070158827-000000000622091973_2_800x800.jpg\",\n  image3: \"http://img.61ef.cn/news/201903/20/2019032009251784.jpg\",\n  title: \"古黛妃 短袖t恤女夏装2019新款韩版宽松\",\n  price: 179,\n  sales: 95 }];\n\n\n\n/* 购物车 */\nvar cartList = [{\n  id: 1,\n  image: 'https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1553005139&di=3368549edf9eee769a9bcb3fbbed2504&imgtype=jpg&er=1&src=http%3A%2F%2Fimg002.hc360.cn%2Fy3%2FM01%2F5F%2FDB%2FwKhQh1T7iceEGRdWAAAAADQvqk8733.jpg',\n  attr_val: '春装款 L',\n  stock: 15,\n  title: 'OVBE 长袖风衣',\n  price: 278.00,\n  number: 1 },\n\n{\n  id: 3,\n  image: 'https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=2319343996,1107396922&fm=26&gp=0.jpg',\n  attr_val: '激光导航 扫拖一体',\n  stock: 3,\n  title: '科沃斯 Ecovacs 扫地机器人',\n  price: 1348.00,\n  number: 5 },\n\n{\n  id: 4,\n  image: 'https://ss1.bdstatic.com/70cFvXSh_Q1YnxGkpoWK1HF6hhy/it/u=2668268226,1765897385&fm=26&gp=0.jpg',\n  attr_val: 'XL',\n  stock: 55,\n  title: '朵绒菲小西装',\n  price: 175.88,\n  number: 1 },\n\n{\n  id: 5,\n  image: 'https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1552410549432&di=06dd3758053fb6d6362516f30a42d055&imgtype=0&src=http%3A%2F%2Fimgcache.mysodao.com%2Fimg3%2FM0A%2F67%2F42%2FCgAPD1vNSsHNm-TnAAEy61txQb4543_400x400x2.JPG',\n  attr_val: '520 #粉红色',\n  stock: 15,\n  title: '迪奥（Dior）烈艳唇膏',\n  price: 1089.00,\n  number: 1 },\n\n{\n  id: 6,\n  image: 'https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=1031875829,2994442603&fm=26&gp=0.jpg',\n  attr_val: '樱花味润手霜 30ml',\n  stock: 15,\n  title: \"欧舒丹（L'OCCITANE）乳木果\",\n  price: 128,\n  number: 1 },\n\n{\n  id: 7,\n  image: 'https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1553007107&di=390915aa8a022cf0b03c03340881b0e7&imgtype=jpg&er=1&src=http%3A%2F%2Fimg13.360buyimg.com%2Fn0%2Fjfs%2Ft646%2F285%2F736444951%2F480473%2Faa701c97%2F548176feN10c9ed7b.jpg',\n  attr_val: '特级 12个',\n  stock: 7,\n  title: '新疆阿克苏苹果 特级',\n  price: 58.8,\n  number: 10 },\n\n{\n  id: 8,\n  image: 'https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=2319343996,1107396922&fm=26&gp=0.jpg',\n  attr_val: '激光导航 扫拖一体',\n  stock: 15,\n  title: '科沃斯 Ecovacs 扫地机器人',\n  price: 1348.00,\n  number: 1 },\n\n{\n  id: 9,\n  image: 'https://ss1.bdstatic.com/70cFvXSh_Q1YnxGkpoWK1HF6hhy/it/u=2668268226,1765897385&fm=26&gp=0.jpg',\n  attr_val: 'XL',\n  stock: 55,\n  title: '朵绒菲小西装',\n  price: 175.88,\n  number: 1 },\n\n{\n  id: 10,\n  image: 'https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1552410549432&di=06dd3758053fb6d6362516f30a42d055&imgtype=0&src=http%3A%2F%2Fimgcache.mysodao.com%2Fimg3%2FM0A%2F67%2F42%2FCgAPD1vNSsHNm-TnAAEy61txQb4543_400x400x2.JPG',\n  attr_val: '520 #粉红色',\n  stock: 15,\n  title: '迪奥（Dior）烈艳唇膏',\n  price: 1089.00,\n  number: 1 },\n\n{\n  id: 11,\n  image: 'https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=1031875829,2994442603&fm=26&gp=0.jpg',\n  attr_val: '樱花味润手霜 30ml',\n  stock: 15,\n  title: \"欧舒丹（L'OCCITANE）乳木果\",\n  price: 128,\n  number: 1 },\n\n{\n  id: 12,\n  image: 'https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1553007107&di=390915aa8a022cf0b03c03340881b0e7&imgtype=jpg&er=1&src=http%3A%2F%2Fimg13.360buyimg.com%2Fn0%2Fjfs%2Ft646%2F285%2F736444951%2F480473%2Faa701c97%2F548176feN10c9ed7b.jpg',\n  attr_val: '特级 12个',\n  stock: 7,\n  title: '新疆阿克苏苹果 特级',\n  price: 58.8,\n  number: 10 },\n\n{\n  id: 13,\n  image: 'https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1552405266625&di=a703f2b2cdb0fe7f3f05f62dd91307ab&imgtype=0&src=http%3A%2F%2Fwww.78.cn%2Fzixun%2Fnews%2Fupload%2F20190214%2F1550114706486250.jpg',\n  attr_val: '春装款/m',\n  stock: 15,\n  title: '女装2019春秋新款',\n  price: 420.00,\n  number: 1 }];\n\n\n//详情展示页面\nvar detailData = {\n  title: '纯种金毛幼犬活体有血统证书',\n  title2: '拆家小能手 你值得拥有',\n  favorite: true,\n  imgList: [{\n    src: 'http://img0.imgtn.bdimg.com/it/u=2396068252,4277062836&fm=26&gp=0.jpg' },\n\n  {\n    src: 'http://img.pconline.com.cn/images/upload/upc/tx/itbbs/1309/06/c4/25310541_1378426131583.jpg' },\n\n  {\n    src: 'http://img.pconline.com.cn/images/upload/upc/tx/photoblog/1610/26/c4/28926240_1477451226577_mthumb.jpg' },\n\n  {\n    src: 'http://picture.ik123.com/uploads/allimg/190219/12-1Z219105139.jpg' }],\n\n\n  episodeList: [\n  1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24],\n\n  guessList: [{\n    src: 'http://img.52z.com/upload/news/image/20180530/20180530081619_31029.jpg',\n    title: '猫眼指甲油',\n    title2: '独树一帜的免照灯猫眼指甲' },\n\n  {\n    src: 'http://m.china-7.net/uploads/14778449362891.jpg',\n    title: '创意屋',\n    title2: '创意屋形上下双层高低床' },\n\n  {\n    src: 'http://www.k73.com/up/allimg/130415/22-130415093527.jpg',\n    title: 'MissCandy 指甲油',\n    title2: '十分适合喜欢素净的妹纸，尽显淡雅的气质' },\n\n  {\n    src: 'http://img0.imgtn.bdimg.com/it/u=2108933440,2194129200&fm=214&gp=0.jpg\t',\n    title: 'RMK 2017星空海蓝唇釉',\n    title2: '唇釉质地，上唇后很滋润。少女也会心动的蓝色，透明液体形状。' }],\n\n\n  evaList: [{\n    src: 'http://gss0.baidu.com/-fo3dSag_xI4khGko9WTAnF6hhy/zhidao/pic/item/77c6a7efce1b9d1663174705fbdeb48f8d546486.jpg',\n    nickname: 'Ranth Allngal',\n    time: '09-20 12:54',\n    zan: '54',\n    content: '评论不要太苛刻，不管什么产品都会有瑕疵，客服也说了可以退货并且商家承担运费，我觉得至少态度就可以给五星。' },\n\n  {\n    src: 'http://img0.imgtn.bdimg.com/it/u=2396068252,4277062836&fm=26&gp=0.jpg',\n    nickname: 'Ranth Allngal',\n    time: '09-20 12:54',\n    zan: '54',\n    content: '楼上说的好有道理。' }] };\n\n\n\nvar shareList = [{\n  type: 1,\n  icon: '/static/temp/share_wechat.png',\n  text: '微信好友' },\n\n{\n  type: 2,\n  icon: '/static/temp/share_moment.png',\n  text: '朋友圈' },\n\n{\n  type: 3,\n  icon: '/static/temp/share_qq.png',\n  text: 'QQ好友' },\n\n{\n  type: 4,\n  icon: '/static/temp/share_qqzone.png',\n  text: 'QQ空间' }];\n\n\nvar lazyLoadList = [{\n  src: 'http://img0.imgtn.bdimg.com/it/u=2396068252,4277062836&fm=26&gp=0.jpg' },\n\n{\n  src: 'http://img.pconline.com.cn/images/upload/upc/tx/itbbs/1309/06/c4/25310541_1378426131583.jpg' },\n\n{\n  src: 'http://img.pconline.com.cn/images/upload/upc/tx/photoblog/1610/26/c4/28926240_1477451226577_mthumb.jpg' },\n\n{\n  src: 'http://picture.ik123.com/uploads/allimg/190219/12-1Z219105139.jpg' },\n\n{\n  src: 'http://img5.imgtn.bdimg.com/it/u=2904900134,438461613&fm=26&gp=0.jpg' },\n\n{\n  src: 'http://img1.imgtn.bdimg.com/it/u=1690475408,2565370337&fm=26&gp=0.jpg' },\n\n{\n  src: 'http://img.99114.com/group1/M00/7F/99/wKgGS1kVrPGAe5LmAAU2KrJmb3Q923_600_600.jpg' },\n\n{\n  src: 'http://img4.imgtn.bdimg.com/it/u=261047209,372231813&fm=26&gp=0.jpg' },\n\n{\n  src: 'http://i2.17173cdn.com/i7mz64/YWxqaGBf/tu17173com/20150107/eMyVMObjlbcvDEv.jpg' },\n\n{\n  src: 'http://img008.hc360.cn/m4/M02/E7/87/wKhQ6FSrfU6EfUoyAAAAAITAfyc280.jpg' },\n\n{\n  src: 'http://pic1.win4000.com/wallpaper/d/5991569950166.jpg' },\n\n{\n  src: 'http://gss0.baidu.com/9fo3dSag_xI4khGko9WTAnF6hhy/zhidao/pic/item/6f061d950a7b0208f9fe945e60d9f2d3572cc85e.jpg' },\n\n{\n  src: 'http://pic41.nipic.com/20140429/18169759_125841756000_2.jpg' },\n\n{\n  src: 'http://www.k73.com/up/allimg/130415/22-130415093527.jpg' },\n\n{\n  src: 'http://img.52z.com/upload/news/image/20180530/20180530081619_31029.jpg' },\n\n{\n  src: 'http://b-ssl.duitang.com/uploads/item/201410/02/20141002111638_tXAzU.jpeg' },\n\n{\n  src: 'http://img2.ph.126.net/C4JW6f57QWSB21-8jh2UGQ==/1762596304262286698.jpg' },\n\n{\n  src: 'http://att.bbs.duowan.com/forum/201405/17/190257nzcvkkdg6w2e8226.jpg' },\n\n{\n  src: 'http://attach.bbs.miui.com/forum/201504/10/223644v3intigyvva0vgym.jpg' },\n\n{\n  src: 'http://pic1.win4000.com/mobile/3/57888a298d61d.jpg' }];\n\n\n\nvar orderList = [{\n  time: '2019-04-06 11:37',\n  state: 1,\n  goodsList: [{\n    image: 'https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1553187020783&di=bac9dd78b36fd984502d404d231011c0&imgtype=0&src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201609%2F26%2F20160926173213_s5adi.jpeg' },\n\n  {\n    image: 'https://ss0.bdstatic.com/70cFuHSh_Q1YnxGkpoWK1HF6hhy/it/u=4031878334,2682695508&fm=11&gp=0.jpg' },\n\n  {\n    image: 'https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=1620020012,789258862&fm=26&gp=0.jpg' },\n\n  {\n    image: 'https://ss0.bdstatic.com/70cFuHSh_Q1YnxGkpoWK1HF6hhy/it/u=4031878334,2682695508&fm=11&gp=0.jpg' },\n\n  {\n    image: 'https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=1620020012,789258862&fm=26&gp=0.jpg' },\n\n  {\n    image: 'https://ss0.bdstatic.com/70cFuHSh_Q1YnxGkpoWK1HF6hhy/it/u=4031878334,2682695508&fm=11&gp=0.jpg' },\n\n  {\n    image: 'https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=1620020012,789258862&fm=26&gp=0.jpg' }] },\n\n\n\n{\n  time: '2019-04-06 11:37',\n  state: 9,\n  goodsList: [{\n    title: '古黛妃 短袖t恤女 春夏装2019新款韩版宽松',\n    price: 179.5,\n    image: 'https://img13.360buyimg.com/n8/jfs/t1/30343/20/1029/481370/5c449438Ecb46a15b/2b2adccb6dc742fd.jpg',\n    number: 1,\n    attr: '珊瑚粉 M' }] },\n\n\n{\n  time: '2019-04-06 11:37',\n  state: 1,\n  goodsList: [{\n    image: 'https://img.alicdn.com/imgextra/https://img.alicdn.com/imgextra/i2/2120460599/O1CN01LBPS4C1GINkwsOTXS_!!2120460599.jpg_430x430q90.jpg' },\n\n  {\n    image: 'https://img.alicdn.com/imgextra/i2/1069876356/TB2ocTQG4WYBuNjy1zkXXXGGpXa_!!1069876356.jpg_430x430q90.jpg' },\n\n  {\n    image: 'https://img.alicdn.com/imgextra/https://img.alicdn.com/imgextra/i4/2120460599/O1CN01YsmgwZ1GINkv38rkn_!!2120460599.jpg_430x430q90.jpg' }] },\n\n\n\n{\n  time: '2019-04-06 11:37',\n  state: 1,\n  goodsList: [{\n    title: '回力女鞋高帮帆布鞋女学生韩版鞋子女2019潮鞋女鞋新款春季板鞋女',\n    price: 69,\n    image: 'https://img.alicdn.com/imgextra/i3/2128794607/TB2gzzoc41YBuNjy1zcXXbNcXXa_!!2128794607.jpg_430x430q90.jpg',\n    number: 1,\n    attr: '白色-高帮 39' }] },\n\n\n{\n  time: '2019-04-06 11:37',\n  state: 1,\n  goodsList: [{\n    image: 'https://img.alicdn.com/imgextra/https://img.alicdn.com/imgextra/i4/3358098495/O1CN01dhYyid2Ccl5MWLDok_!!3358098495.jpg_430x430q90.jpg' },\n\n  {\n    image: 'https://img.alicdn.com/imgextra/https://img.alicdn.com/imgextra/i3/3358098495/O1CN01AWsnFA2Ccl5OzvqsL_!!3358098495.jpg_430x430q90.jpg' }] },\n\n\n\n{\n  time: '2019-04-06 11:37',\n  state: 1,\n  goodsList: [{\n    image: 'https://img.alicdn.com/imgextra/i4/3470687433/O1CN0124mMQOSERr18L1h_!!3470687433.jpg_430x430q90.jpg' },\n\n  {\n    image: 'https://img.alicdn.com/imgextra/i3/2888462616/O1CN01ERra5J1VCAbZaKI5n_!!0-item_pic.jpg_430x430q90.jpg' },\n\n  {\n    image: 'https://gd3.alicdn.com/imgextra/i3/819381730/O1CN01YV4mXj1OeNhQIhQlh_!!819381730.jpg_400x400.jpg' }] }];\n\n\n\n\n\nvar cateList = [{\n  id: 1,\n  name: '手机数码' },\n\n{\n  id: 2,\n  name: '礼品鲜花' },\n\n{\n  id: 3,\n  name: '男装女装' },\n\n{\n  id: 4,\n  name: '母婴用品' },\n\n{\n  id: 5,\n  pid: 1,\n  name: '手机通讯' },\n\n{\n  id: 6,\n  pid: 1,\n  name: '运营商' },\n\n{\n  id: 8,\n  pid: 5,\n  name: '全面屏手机',\n  picture: '/static/temp/cate2.jpg' },\n\n{\n  id: 9,\n  pid: 5,\n  name: '游戏手机',\n  picture: '/static/temp/cate3.jpg' },\n\n{\n  id: 10,\n  pid: 5,\n  name: '老人机',\n  picture: '/static/temp/cate1.jpg' },\n\n{\n  id: 11,\n  pid: 5,\n  name: '拍照手机',\n  picture: '/static/temp/cate4.jpg' },\n\n{\n  id: 12,\n  pid: 5,\n  name: '女性手机',\n  picture: '/static/temp/cate5.jpg' },\n\n{\n  id: 14,\n  pid: 6,\n  name: '合约机',\n  picture: '/static/temp/cate1.jpg' },\n\n{\n  id: 15,\n  pid: 6,\n  name: '选好卡',\n  picture: '/static/temp/cate4.jpg' },\n\n{\n  id: 16,\n  pid: 6,\n  name: '办套餐',\n  picture: '/static/temp/cate5.jpg' },\n\n{\n  id: 17,\n  pid: 2,\n  name: '礼品' },\n\n{\n  id: 18,\n  pid: 2,\n  name: '鲜花' },\n\n{\n  id: 19,\n  pid: 17,\n  name: '公益摆件',\n  picture: '/static/temp/cate7.jpg' },\n\n{\n  id: 20,\n  pid: 17,\n  name: '创意礼品',\n  picture: '/static/temp/cate8.jpg' },\n\n{\n  id: 21,\n  pid: 18,\n  name: '鲜花',\n  picture: '/static/temp/cate9.jpg' },\n\n{\n  id: 22,\n  pid: 18,\n  name: '每周一花',\n  picture: '/static/temp/cate10.jpg' },\n\n{\n  id: 23,\n  pid: 18,\n  name: '卡通花束',\n  picture: '/static/temp/cate11.jpg' },\n\n{\n  id: 24,\n  pid: 18,\n  name: '永生花',\n  picture: '/static/temp/cate12.jpg' },\n\n{\n  id: 25,\n  pid: 3,\n  name: '男装' },\n\n{\n  id: 26,\n  pid: 3,\n  name: '女装' },\n\n{\n  id: 27,\n  pid: 25,\n  name: '男士T恤',\n  picture: '/static/temp/cate13.jpg' },\n\n{\n  id: 28,\n  pid: 25,\n  name: '男士外套',\n  picture: '/static/temp/cate14.jpg' },\n\n{\n  id: 29,\n  pid: 26,\n  name: '裙装',\n  picture: '/static/temp/cate15.jpg' },\n\n{\n  id: 30,\n  pid: 26,\n  name: 'T恤',\n  picture: '/static/temp/cate16.jpg' },\n\n{\n  id: 31,\n  pid: 26,\n  name: '上装',\n  picture: '/static/temp/cate15.jpg' },\n\n{\n  id: 32,\n  pid: 26,\n  name: '下装',\n  picture: '/static/temp/cate16.jpg' },\n\n{\n  id: 33,\n  pid: 4,\n  name: '奶粉' },\n\n{\n  id: 34,\n  pid: 4,\n  name: '营养辅食' },\n\n{\n  id: 35,\n  pid: 4,\n  name: '童装' },\n\n{\n  id: 39,\n  pid: 4,\n  name: '喂养用品' },\n\n{\n  id: 36,\n  pid: 33,\n  name: '有机奶粉',\n  picture: '/static/temp/cate17.jpg' },\n\n{\n  id: 37,\n  pid: 34,\n  name: '果泥/果汁',\n  picture: '/static/temp/cate18.jpg' },\n\n{\n  id: 39,\n  pid: 34,\n  name: '面条/粥',\n  picture: '/static/temp/cate20.jpg' },\n\n{\n  id: 42,\n  pid: 35,\n  name: '婴童衣橱',\n  picture: '/static/temp/cate19.jpg' },\n\n{\n  id: 43,\n  pid: 39,\n  name: '吸奶器',\n  picture: '/static/temp/cate21.jpg' },\n\n{\n  id: 44,\n  pid: 39,\n  name: '儿童餐具',\n  picture: '/static/temp/cate22.jpg' },\n\n{\n  id: 45,\n  pid: 39,\n  name: '牙胶安抚',\n  picture: '/static/temp/cate23.jpg' },\n\n{\n  id: 46,\n  pid: 39,\n  name: '围兜',\n  picture: '/static/temp/cate24.jpg' }];var _default =\n\n\n\n{\n  carouselList: carouselList,\n  cartList: cartList,\n  detailData: detailData,\n  lazyLoadList: lazyLoadList,\n  userInfo: userInfo,\n  shareList: shareList,\n  goodsList: goodsList,\n  orderList: orderList,\n  cateList: cateList };exports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///18\n");

/***/ }),

/***/ 19:
/*!*******************************************************************************!*\
  !*** C:/Users/a/Desktop/toCWechat/uniapp/node_modules/vue-baidu-map/index.js ***!
  \*******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("!function (t, e) { true ? module.exports = e() : undefined;}(void 0, function () {return function (t) {function e(i) {if (n[i]) return n[i].exports;var o = n[i] = { i: i, l: !1, exports: {} };return t[i].call(o.exports, o, o.exports, e), o.l = !0, o.exports;}var n = {};return e.m = t, e.c = n, e.i = function (t) {return t;}, e.d = function (t, n, i) {e.o(t, n) || Object.defineProperty(t, n, { configurable: !1, enumerable: !0, get: i });}, e.n = function (t) {var n = t && t.__esModule ? function () {return t.default;} : function () {return t;};return e.d(n, \"a\", n), n;}, e.o = function (t, e) {return Object.prototype.hasOwnProperty.call(t, e);}, e.p = \"\", e(e.s = 42);}([function (t, e) {t.exports = function (t, e, n, i) {var o,a = t = t || {},r = typeof t.default;\"object\" !== r && \"function\" !== r || (o = t, a = t.default);var s = \"function\" == typeof a ? a.options : a;if (e && (s.render = e.render, s.staticRenderFns = e.staticRenderFns), n && (s._scopeId = n), i) {var l = s.computed || (s.computed = {});Object.keys(i).forEach(function (t) {var e = i[t];l[t] = function () {return e;};});}return { esModule: o, exports: a, options: s };};}, function (t, e, n) {var i, o, a;!function (n, r) {o = [t, e], i = r, void 0 !== (a = \"function\" == typeof i ? i.apply(e, o) : i) && (t.exports = a);}(0, function (t, e) {\"use strict\";function n(t, e) {if (!(t instanceof e)) throw new TypeError(\"Cannot call a class as a function\");}function i() {var t = this.unload,e = this.renderByParent,n = this.$parent;e && n.reload(), t();}Object.defineProperty(e, \"__esModule\", { value: !0 });var o = { control: { unload: \"removeControl\" }, layer: { unload: \"removeTileLayer\" }, overlay: { unload: \"removeOverlay\" }, contextMenu: { unload: \"removeContextMenu\" } },a = function t(e) {return e.abstract || e.$el === e.$children[0].$el ? t(e.$parent) : e;},r = function t(e) {n(this, t), this.methods = { ready: function ready() {var t = a(this.$parent),e = this.BMap = t.BMap,n = this.map = t.map;this.load(), this.$emit(\"ready\", { BMap: e, map: n });}, transmitEvent: function transmitEvent(t) {this.$emit(t.type.replace(/^on/, \"\"), t);}, reload: function reload() {var t = this;this && this.BMap && this.$nextTick(function () {t.unload(), t.$nextTick(t.load);});}, unload: function unload() {var t = this.map,n = this.originInstance;try {switch (e.type) {case \"search\":return n.clearResults();case \"autoComplete\":case \"lushu\":return n.dispose();case \"markerClusterer\":return n.clearMarkers();default:t[o[e.type].unload](n);}} catch (t) {}} }, this.computed = { renderByParent: function renderByParent() {return this.$parent.preventChildrenRender;} }, this.mounted = function () {var t = a(this.$parent),e = t.map,n = this.ready;e ? n() : t.$on(\"ready\", n);}, this.destroyed = i, this.beforeDestroy = i;};e.default = function (t) {return new r({ type: t });}, t.exports = e.default;});}, function (t, e, n) {var i, o, a;!function (n, r) {o = [e], i = r, void 0 !== (a = \"function\" == typeof i ? i.apply(e, o) : i) && (t.exports = a);}(0, function (t) {\"use strict\";function e(t) {var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},n = e.lng,i = e.lat;return new t.Point(n, i);}function n(t) {var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},n = e.x,i = e.y;return new t.Pixel(n, i);}function i(t) {var n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},i = n.sw,o = n.ne;return new t.Bounds(e(t, i), e(t, o));}function o(t) {var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},n = e.width,i = e.height;return new t.Size(n, i);}function a(t) {var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},n = e.url,i = e.size,a = e.opts,r = void 0 === a ? {} : a;return new t.Icon(n, o(t, i), { anchor: r.anchor && o(t, r.anchor), imageSize: r.imageSize && o(t, r.imageSize), imageOffset: r.imageOffset && o(t, r.imageOffset), infoWindowAnchor: r.infoWindowAnchor && o(t, r.infoWindowAnchor), printImageUrl: r.printImageUrl });}function r(t) {var n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},i = n.content,a = n.opts;return new t.Label(i, { offset: a.offset && o(t, a.offset), position: a.position && e(t, a.position), enableMassClear: a.enableMassClear });}Object.defineProperty(t, \"__esModule\", { value: !0 }), t.createPoint = e, t.createPixel = n, t.createBounds = i, t.createSize = o, t.createIcon = a, t.createLabel = r;});}, function (t, e) {var n;n = function () {return this;}();try {n = n || Function(\"return this\")() || (0, eval)(\"this\");} catch (t) {\"object\" == typeof window && (n = window);}t.exports = n;}, function (t, e, n) {var i, o, a;!function (r, s) {o = [t, e, n(41)], i = s, void 0 !== (a = \"function\" == typeof i ? i.apply(e, o) : i) && (t.exports = a);}(0, function (t, e, n) {\"use strict\";Object.defineProperty(e, \"__esModule\", { value: !0 }), e.default = function (t, e) {var n = this,o = e || i.default[this.$options.name];o && o.forEach(function (e) {var i = \"on\" === e.slice(0, 2),o = i ? e.slice(2) : e,a = n.$listeners[o];a && t.addEventListener(e, a.fns);});};var i = function (t) {return t && t.__esModule ? t : { default: t };}(n);t.exports = e.default;});}, function (t, e, n) {var i, o, a;!function (r, s) {o = [e, n(2)], i = s, void 0 !== (a = \"function\" == typeof i ? i.apply(e, o) : i) && (t.exports = a);}(0, function (t, e) {\"use strict\";Object.defineProperty(t, \"__esModule\", { value: !0 }), t.getPosition = t.checkType = t.isPoint = void 0;var n = t.isPoint = function (t) {return t.lng && t.lat;};t.checkType = function (t) {return Object.prototype.toString.call(t).slice(8, -1);}, t.getPosition = function (t, i) {return n(i) ? (0, e.createPoint)(t, i) : i;};});}, function (t, e, n) {var i = n(0)(n(71), null, null, null);t.exports = i.exports;}, function (t, e, n) {var i = n(0)(n(43), n(89), null, null);t.exports = i.exports;}, function (t, e, n) {var i = n(0)(n(44), n(87), null, null);t.exports = i.exports;}, function (t, e, n) {var i = n(0)(n(45), null, null, null);t.exports = i.exports;}, function (t, e, n) {var i = n(0)(n(46), n(94), null, null);t.exports = i.exports;}, function (t, e, n) {var i = n(0)(n(47), null, null, null);t.exports = i.exports;}, function (t, e, n) {var i = n(0)(n(48), null, null, null);t.exports = i.exports;}, function (t, e, n) {var i = n(0)(n(49), null, null, null);t.exports = i.exports;}, function (t, e, n) {var i = n(0)(n(50), null, null, null);t.exports = i.exports;}, function (t, e, n) {var i = n(0)(n(51), null, null, null);t.exports = i.exports;}, function (t, e, n) {var i = n(0)(n(52), null, null, null);t.exports = i.exports;}, function (t, e, n) {var i = n(0)(n(53), null, null, null);t.exports = i.exports;}, function (t, e, n) {var i = n(0)(n(54), null, null, null);t.exports = i.exports;}, function (t, e, n) {var i = n(0)(n(55), null, null, null);t.exports = i.exports;}, function (t, e, n) {var i = n(0)(n(56), null, null, null);t.exports = i.exports;}, function (t, e, n) {var i = n(0)(n(57), n(90), null, null);t.exports = i.exports;}, function (t, e, n) {var i = n(0)(n(58), null, null, null);t.exports = i.exports;}, function (t, e, n) {var i = n(0)(n(59), null, null, null);t.exports = i.exports;}, function (t, e, n) {var i = n(0)(n(60), n(97), null, null);t.exports = i.exports;}, function (t, e, n) {var i = n(0)(n(61), n(82), null, null);t.exports = i.exports;}, function (t, e, n) {var i = n(0)(n(62), n(95), null, null);t.exports = i.exports;}, function (t, e, n) {var i = n(0)(n(63), n(86), null, null);t.exports = i.exports;}, function (t, e, n) {var i = n(0)(n(64), null, null, null);t.exports = i.exports;}, function (t, e, n) {var i = n(0)(n(65), null, null, null);t.exports = i.exports;}, function (t, e, n) {var i = n(0)(n(66), n(83), null, null);t.exports = i.exports;}, function (t, e, n) {var i = n(0)(n(67), null, null, null);t.exports = i.exports;}, function (t, e, n) {var i = n(0)(n(68), n(96), null, null);t.exports = i.exports;}, function (t, e, n) {var i = n(0)(n(69), n(84), null, null);t.exports = i.exports;}, function (t, e, n) {var i = n(0)(n(70), null, null, null);t.exports = i.exports;}, function (t, e, n) {var i = n(0)(n(72), null, null, null);t.exports = i.exports;}, function (t, e, n) {var i = n(0)(n(73), n(91), null, null);t.exports = i.exports;}, function (t, e, n) {var i = n(0)(n(74), n(85), null, null);t.exports = i.exports;}, function (t, e, n) {var i = n(0)(n(75), n(93), null, null);t.exports = i.exports;}, function (t, e, n) {var i = n(0)(n(76), n(92), null, null);t.exports = i.exports;}, function (t, e, n) {var i = n(0)(n(77), n(88), null, null);t.exports = i.exports;}, function (t, e, n) {var i, o, a;!function (n, r) {o = [t, e], i = r, void 0 !== (a = \"function\" == typeof i ? i.apply(e, o) : i) && (t.exports = a);}(0, function (t, e) {\"use strict\";Object.defineProperty(e, \"__esModule\", { value: !0 }), e.default = { \"bm-map\": [\"click\", \"dblclick\", \"rightclick\", \"rightdblclick\", \"maptypechange\", \"mousemove\", \"mouseover\", \"mouseout\", \"movestart\", \"moving\", \"moveend\", \"zoomstart\", \"zoomend\", \"addoverlay\", \"addcontrol\", \"removecontrol\", \"removeoverlay\", \"clearoverlays\", \"dragstart\", \"dragging\", \"dragend\", \"addtilelayer\", \"removetilelayer\", \"load\", \"resize\", \"hotspotclick\", \"hotspotover\", \"hotspotout\", \"tilesloaded\", \"touchstart\", \"touchmove\", \"touchend\", \"longpress\"], \"bm-geolocation\": [\"locationSuccess\", \"locationError\"], \"bm-overview-map\": [\"viewchanged\", \"viewchanging\"], \"bm-marker\": [\"click\", \"dblclick\", \"mousedown\", \"mouseup\", \"mouseout\", \"mouseover\", \"remove\", \"infowindowclose\", \"infowindowopen\", \"dragstart\", \"dragging\", \"dragend\", \"rightclick\"], \"bm-polyline\": [\"click\", \"dblclick\", \"mousedown\", \"mouseup\", \"mouseout\", \"mouseover\", \"remove\", \"lineupdate\"], \"bm-polygon\": [\"click\", \"dblclick\", \"mousedown\", \"mouseup\", \"mouseout\", \"mouseover\", \"remove\", \"lineupdate\"], \"bm-circle\": [\"click\", \"dblclick\", \"mousedown\", \"mouseup\", \"mouseout\", \"mouseover\", \"remove\", \"lineupdate\"], \"bm-label\": [\"click\", \"dblclick\", \"mousedown\", \"mouseup\", \"mouseout\", \"mouseover\", \"remove\", \"rightclick\"], \"bm-info-window\": [\"close\", \"open\", \"maximize\", \"restore\", \"clickclose\"], \"bm-ground\": [\"click\", \"dblclick\"], \"bm-autocomplete\": [\"onconfirm\", \"onhighlight\"], \"bm-point-collection\": [\"click\", \"mouseover\", \"mouseout\"] }, t.exports = e.default;});}, function (t, e, n) {var i, o, a;!function (r, s) {o = [e, n(24), n(25), n(17), n(14), n(13), n(15), n(12), n(11), n(9), n(16), n(10), n(32), n(34), n(35), n(6), n(28), n(29), n(31), n(30), n(33), n(8), n(7), n(38), n(39), n(40), n(37), n(36), n(22), n(23), n(27), n(26), n(21), n(20), n(19), n(18)], i = s, void 0 !== (a = \"function\" == typeof i ? i.apply(e, o) : i) && (t.exports = a);}(0, function (t, e, n, i, o, a, r, s, l, c, u, h, p, d, f, m, g, y, v, _, b, x, w, M, C, k, I, S, B, P, O, E, T, z, j, L) {\"use strict\";function R(t) {return t && t.__esModule ? t : { default: t };}Object.defineProperty(t, \"__esModule\", { value: !0 }), t.BmlCurveLine = t.BmlHeatmap = t.BmlLushu = t.BmlMarkerClusterer = t.BmAutoComplete = t.BmBoundary = t.BmTraffic = t.BmTile = t.BmBus = t.BmDriving = t.BmWalking = t.BmTransit = t.BmLocalSearch = t.BmContextMenuItem = t.BmContextMenu = t.BmOverlay = t.BmInfoWindow = t.BmLabel = t.BmGround = t.BmCircle = t.BmPolygon = t.BmPolyline = t.BmPointCollection = t.BmMarker = t.BmControl = t.BmPanorama = t.BmCityList = t.BmCopyright = t.BmGeolocation = t.BmOverviewMap = t.BmMapType = t.BmNavigation = t.BmScale = t.BmView = t.BaiduMap = void 0;var A = R(e),$ = R(n),F = R(i),W = R(o),N = R(a),D = R(r),Z = R(s),V = R(l),H = R(c),G = R(u),U = R(h),J = R(p),K = R(d),X = R(f),q = R(m),Q = R(g),Y = R(y),tt = R(v),et = R(_),nt = R(b),it = R(x),ot = R(w),at = R(M),rt = R(C),st = R(k),lt = R(I),ct = R(S),ut = R(B),ht = R(P),pt = R(O),dt = R(E),ft = R(T),mt = R(z),gt = R(j),yt = R(L);t.default = { install: function install(t, e) {var n = e.ak;t.prototype._BMap = function () {return { ak: n };}, t.component(\"baidu-map\", A.default), t.component(\"bm-view\", $.default), t.component(\"bm-scale\", F.default), t.component(\"bm-navigation\", W.default), t.component(\"bm-map-type\", N.default), t.component(\"bm-overview-map\", D.default), t.component(\"bm-geolocation\", Z.default), t.component(\"bm-copyright\", V.default), t.component(\"bm-city-list\", H.default), t.component(\"bm-panorama\", G.default), t.component(\"bm-control\", U.default), t.component(\"bm-marker\", J.default), t.component(\"bm-point-collection\", K.default), t.component(\"bm-polyline\", X.default), t.component(\"bm-polygon\", q.default), t.component(\"bm-circle\", Q.default), t.component(\"bm-ground\", Y.default), t.component(\"bm-label\", tt.default), t.component(\"bm-info-window\", et.default), t.component(\"bm-overlay\", nt.default), t.component(\"bm-context-menu\", it.default), t.component(\"bm-context-menu-item\", ot.default), t.component(\"bm-local-search\", at.default), t.component(\"bm-transit\", rt.default), t.component(\"bm-walking\", st.default), t.component(\"bm-driving\", lt.default), t.component(\"bm-bus\", ct.default), t.component(\"bm-tile\", ut.default), t.component(\"bm-traffic\", ht.default), t.component(\"bm-auto-complete\", dt.default), t.component(\"bm-boundary\", pt.default);} }, t.BaiduMap = A.default, t.BmView = $.default, t.BmScale = F.default, t.BmNavigation = W.default, t.BmMapType = N.default, t.BmOverviewMap = D.default, t.BmGeolocation = Z.default, t.BmCopyright = V.default, t.BmCityList = H.default, t.BmPanorama = G.default, t.BmControl = U.default, t.BmMarker = J.default, t.BmPointCollection = K.default, t.BmPolyline = X.default, t.BmPolygon = q.default, t.BmCircle = Q.default, t.BmGround = Y.default, t.BmLabel = tt.default, t.BmInfoWindow = et.default, t.BmOverlay = nt.default, t.BmContextMenu = it.default, t.BmContextMenuItem = ot.default, t.BmLocalSearch = at.default, t.BmTransit = rt.default, t.BmWalking = st.default, t.BmDriving = lt.default, t.BmBus = ct.default, t.BmTile = ut.default, t.BmTraffic = ht.default, t.BmBoundary = pt.default, t.BmAutoComplete = dt.default, t.BmlMarkerClusterer = ft.default, t.BmlLushu = mt.default, t.BmlHeatmap = gt.default, t.BmlCurveLine = yt.default;});}, function (t, e, n) {var i, o, a;!function (n, r) {o = [t, e], i = r, void 0 !== (a = \"function\" == typeof i ? i.apply(e, o) : i) && (t.exports = a);}(0, function (t, e) {\"use strict\";Object.defineProperty(e, \"__esModule\", { value: !0 }), e.default = { name: \"bm-context-menu-item\", props: { callback: { type: Function, default: function _default() {} }, text: { type: String }, iconUrl: { type: String }, id: { type: String }, disabled: { type: Boolean }, seperator: { type: Boolean } }, methods: { reload: function reload() {this.$parent.map && this.$parent.load();} }, watch: { text: function text() {this.reload();}, iconUrl: function iconUrl() {this.reload();}, id: function id() {this.reload();}, disabled: function disabled() {this.reload();}, iseperator: function iseperator() {this.reload();}, callback: function callback() {this.reload();} }, destroyed: function destroyed() {this.reload();}, mounted: function mounted() {this.reload();} }, t.exports = e.default;});}, function (t, e, n) {var i, o, a;!function (r, s) {o = [t, e, n(1)], i = s, void 0 !== (a = \"function\" == typeof i ? i.apply(e, o) : i) && (t.exports = a);}(0, function (t, e, n) {\"use strict\";Object.defineProperty(e, \"__esModule\", { value: !0 });var i = function (t) {return t && t.__esModule ? t : { default: t };}(n);e.default = { name: \"bm-context-menu\", props: { width: { type: Number } }, mixins: [(0, i.default)(\"contextMenu\")], methods: { load: function load() {var t = this.width,e = this.BMap,n = this.map,i = this.$parent,o = this.parent = i.originInstance || n;this.originInstance && o.removeContextMenu(this.originInstance);var a = this.originInstance = new e.ContextMenu(),r = !0,s = !1,l = void 0;try {for (var c, u = this.$children[Symbol.iterator](); !(r = (c = u.next()).done); r = !0) {(function () {var i = c.value;if (i.seperator) return a.addSeparator(), \"continue\";var r = new e.MenuItem(i.text, function (t, a) {i.callback({ point: t, pixel: a, BMap: e, map: n, target: o });}, { width: t, id: i.id, iconUrl: i.iconUrl });i.disabled ? r.disable() : r.enable(), i.originInstance = r, a.addItem(r);})();}} catch (t) {s = !0, l = t;} finally {try {!r && u.return && u.return();} finally {if (s) throw l;}}o.addContextMenu(a);} } }, t.exports = e.default;});}, function (t, e, n) {(function (i) {var o, a, r;!function (i, s) {a = [t, e, n(1), n(2)], o = s, void 0 !== (r = \"function\" == typeof o ? o.apply(e, a) : o) && (t.exports = r);}(0, function (t, e, n, o) {\"use strict\";Object.defineProperty(e, \"__esModule\", { value: !0 });var a = function (t) {return t && t.__esModule ? t : { default: t };}(n);e.default = { name: \"bm-city-list\", render: function render() {}, mixins: [(0, a.default)(\"control\")], props: { anchor: { type: String }, offset: { type: Object } }, watch: { anchor: function anchor() {this.reload();}, offset: function offset() {this.reload();} }, methods: { load: function load() {var t = this.BMap,e = this.map,n = this.anchor,a = this.offset,r = this;this.originInstance = new t.CityListControl({ anchor: i[n], offset: a && (0, o.createSize)(t, a), onChangeBefore: function onChangeBefore() {r.$emit(\"changeBefore\");}, onChangeAfter: function onChangeAfter() {r.$emit(\"changeAfter\");} }), e.addControl(this.originInstance);} } }, t.exports = e.default;});}).call(e, n(3));}, function (t, e, n) {(function (i) {var o, a, r;!function (i, s) {a = [t, e, n(1), n(2)], o = s, void 0 !== (r = \"function\" == typeof o ? o.apply(e, a) : o) && (t.exports = r);}(0, function (t, e, n, o) {\"use strict\";Object.defineProperty(e, \"__esModule\", { value: !0 });var a = function (t) {return t && t.__esModule ? t : { default: t };}(n);e.default = { name: \"bm-control\", mixins: [(0, a.default)(\"control\")], props: [\"anchor\", \"offset\"], watch: { anchor: function anchor(t) {this.originInstance.setAnchor(t);}, offset: function offset(t) {this.originInstance.setOffset(t);} }, methods: { load: function load() {var t = this.BMap,e = this.map,n = this.anchor,a = this.offset,r = this.$el,s = function s() {this.defaultAnchor = i[n || \"BMAP_ANCHOR_TOP_LEFT\"], this.defaultOffset = (0, o.createSize)(t, a);};s.prototype = new t.Control(), s.prototype.initialize = function (t) {return t.getContainer().appendChild(r);}, this.originInstance = new s(n, a), e.addControl(this.originInstance);} } }, t.exports = e.default;});}).call(e, n(3));}, function (t, e, n) {(function (i) {var o, a, r;!function (i, s) {a = [t, e, n(1), n(2)], o = s, void 0 !== (r = \"function\" == typeof o ? o.apply(e, a) : o) && (t.exports = r);}(0, function (t, e, n, o) {\"use strict\";Object.defineProperty(e, \"__esModule\", { value: !0 });var a = function (t) {return t && t.__esModule ? t : { default: t };}(n);e.default = { name: \"bm-copyright\", render: function render() {}, mixins: [(0, a.default)(\"control\")], props: [\"anchor\", \"offset\", \"copyright\"], watch: { anchor: function anchor() {this.reload();}, offset: function offset() {this.reload();}, copyright: function copyright() {this.reload();} }, methods: { load: function load() {var t = this.BMap,e = this.map,n = this.offset,a = this.anchor,r = this.updateCopyrightList;this.originInstance = new t.CopyrightControl({ anchor: i[a], offset: n && (0, o.createSize)(t, n) }), r(), e.addControl(this.originInstance);}, updateCopyrightList: function updateCopyrightList() {var t = this,e = this.BMap,n = this.map,i = this.originInstance,o = i.removeCopyright,a = i.getCopyrightCollection,r = a();r && r.forEach(function (t) {o(t.id);}), this.copyright && this.copyright.forEach(function (i) {var o = i.bounds ? new e.Bounds(new e.Point(i.bounds.sw.lng, i.bounds.sw.lat), new e.Point(i.bounds.ne.lng, i.bounds.ne.lat)) : n.getBounds();t.originInstance.addCopyright({ id: i.id, content: i.content, bounds: o }), t.originInstance.getCopyrightCollection();});} } }, t.exports = e.default;});}).call(e, n(3));}, function (t, e, n) {(function (i) {var o, a, r;!function (i, s) {a = [t, e, n(1), n(4), n(2)], o = s, void 0 !== (r = \"function\" == typeof o ? o.apply(e, a) : o) && (t.exports = r);}(0, function (t, e, n, o, a) {\"use strict\";function r(t) {return t && t.__esModule ? t : { default: t };}Object.defineProperty(e, \"__esModule\", { value: !0 });var s = r(n),l = r(o);e.default = { name: \"bm-geolocation\", render: function render() {}, mixins: [(0, s.default)(\"control\")], props: { anchor: { type: String }, offset: { type: Object }, showAddressBar: { type: Boolean }, autoLocation: { type: Boolean }, locationIcon: { type: Object } }, watch: { anchor: function anchor() {this.reload();}, offset: function offset() {this.reload();}, showAddressBar: function showAddressBar() {this.reload();}, autoLocation: function autoLocation() {this.reload();}, locationIcon: function locationIcon() {this.reload();} }, methods: { load: function load() {var t = this.BMap,e = this.map,n = this.anchor,o = this.showAddressBar,r = this.autoLocation,s = this.locationIcon,c = this.offset;this.originInstance = new t.GeolocationControl({ anchor: i[n], showAddressBar: o, enableAutoLocation: r, offset: c && (0, a.createSize)(t, c), locationIcon: s && (0, a.createIcon)(t, s) }), l.default.call(this, this.originInstance), e.addControl(this.originInstance);} } }, t.exports = e.default;});}).call(e, n(3));}, function (t, e, n) {(function (i) {var o, a, r;!function (i, s) {a = [t, e, n(1), n(2)], o = s, void 0 !== (r = \"function\" == typeof o ? o.apply(e, a) : o) && (t.exports = r);}(0, function (t, e, n, o) {\"use strict\";Object.defineProperty(e, \"__esModule\", { value: !0 });var a = function (t) {return t && t.__esModule ? t : { default: t };}(n);e.default = { name: \"bm-map-type\", render: function render() {}, mixins: [(0, a.default)(\"control\")], props: [\"type\", \"mapTypes\", \"anchor\", \"offset\"], watch: { anchor: function anchor() {this.reload();}, offset: function offset() {this.reload();}, type: function type() {this.reload();}, mapTypes: function mapTypes() {this.reload();} }, methods: { load: function load() {var t = this.BMap,e = this.map,n = this.anchor,a = this.offset,r = this.type,s = [];this.mapTypes && this.mapTypes.forEach(function (t) {return s.push(i[t]);}), this.originInstance = new t.MapTypeControl({ anchor: i[n], offset: a && (0, o.createSize)(t, a), type: i[r], mapTypes: s }), e.addControl(this.originInstance);} } }, t.exports = e.default;});}).call(e, n(3));}, function (t, e, n) {(function (i) {var o, a, r;!function (i, s) {a = [t, e, n(1), n(2)], o = s, void 0 !== (r = \"function\" == typeof o ? o.apply(e, a) : o) && (t.exports = r);}(0, function (t, e, n, o) {\"use strict\";Object.defineProperty(e, \"__esModule\", { value: !0 });var a = function (t) {return t && t.__esModule ? t : { default: t };}(n);e.default = { name: \"bm-navigation\", render: function render() {}, mixins: [(0, a.default)(\"control\")], props: { anchor: { type: String }, offset: { type: Object }, type: { type: String }, showZoomInfo: { type: Boolean }, enableGeolocation: { type: Boolean, default: !1 } }, watch: { anchor: function anchor() {this.reload();}, offset: function offset() {this.reload();}, type: function type() {this.reload();}, showZoomInfo: function showZoomInfo() {this.reload();} }, methods: { load: function load() {var t = this.BMap,e = this.map,n = this.anchor,a = this.offset,r = this.type,s = this.showZoomInfo,l = this.enableGeolocation;this.originInstance = new t.NavigationControl({ anchor: i[n], offset: a && (0, o.createSize)(t, a), type: i[r], showZoomInfo: s, enableGeolocation: l }), e.addControl(this.originInstance);} } }, t.exports = e.default;});}).call(e, n(3));}, function (t, e, n) {(function (i) {var o, a, r;!function (i, s) {a = [t, e, n(2), n(1), n(4)], o = s, void 0 !== (r = \"function\" == typeof o ? o.apply(e, a) : o) && (t.exports = r);}(0, function (t, e, n, o, a) {\"use strict\";function r(t) {return t && t.__esModule ? t : { default: t };}Object.defineProperty(e, \"__esModule\", { value: !0 });var s = r(o),l = r(a);e.default = { name: \"bm-overview-map\", mixins: [(0, s.default)(\"control\")], render: function render() {}, props: { anchor: { type: String }, offset: { type: Object }, size: { type: Object }, isOpen: { type: Boolean } }, watch: { anchor: function anchor() {this.reload();}, offset: function offset() {this.reload();}, size: function size() {this.reload();}, isOpen: function isOpen() {this.reload();} }, methods: { load: function load() {var t = this.BMap,e = this.map,o = this.isOpen,a = this.size,r = this.offset,s = this.anchor,c = [];this.mapTypes && this.mapTypes.forEach(function (t) {c.push(i[t]);}), this.originInstance = new t.OverviewMapControl({ anchor: i[s], offset: (0, n.createSize)(t, r), size: (0, n.createSize)(t, a), isOpen: o }), l.default.call(this, this.originInstance), e.addControl(this.originInstance);} } }, t.exports = e.default;});}).call(e, n(3));}, function (t, e, n) {(function (i) {var o, a, r;!function (i, s) {a = [t, e, n(1), n(2)], o = s, void 0 !== (r = \"function\" == typeof o ? o.apply(e, a) : o) && (t.exports = r);}(0, function (t, e, n, o) {\"use strict\";Object.defineProperty(e, \"__esModule\", { value: !0 });var a = function (t) {return t && t.__esModule ? t : { default: t };}(n);e.default = { name: \"bm-panorama\", mixins: [(0, a.default)(\"control\")], render: function render() {}, props: [\"anchor\", \"offset\"], watch: { anchor: function anchor() {this.reload();}, offset: function offset() {this.reload();} }, methods: { load: function load() {var t = this.BMap,e = this.map,n = this.anchor,a = this.offset;this.originInstance = new t.PanoramaControl({ anchor: i[n], offset: a && (0, o.createSize)(t, a) }), e.addControl(this.originInstance);} } }, t.exports = e.default;});}).call(e, n(3));}, function (t, e, n) {(function (i) {var o, a, r;!function (i, s) {a = [t, e, n(1), n(2)], o = s, void 0 !== (r = \"function\" == typeof o ? o.apply(e, a) : o) && (t.exports = r);}(0, function (t, e, n, o) {\"use strict\";Object.defineProperty(e, \"__esModule\", { value: !0 });var a = function (t) {return t && t.__esModule ? t : { default: t };}(n);e.default = { name: \"bm-scale\", render: function render() {}, mixins: [(0, a.default)(\"control\")], props: { anchor: { type: String }, offset: { type: Object } }, watch: { anchor: function anchor() {this.reload();}, offset: function offset() {this.reload();} }, methods: { load: function load() {var t = this.BMap,e = this.map,n = this.anchor,a = this.offset;this.originInstance = new t.ScaleControl({ anchor: i[n], offset: a && (0, o.createSize)(t, a) }), e.addControl(this.originInstance);} } }, t.exports = e.default;});}).call(e, n(3));}, function (t, e, n) {var i, o, a;!function (r, s) {o = [t, e, n(78), n(1), n(4), n(2)], i = s, void 0 !== (a = \"function\" == typeof i ? i.apply(e, o) : i) && (t.exports = a);}(0, function (t, e, n, i, o, a) {\"use strict\";function r(t) {return t && t.__esModule ? t : { default: t };}Object.defineProperty(e, \"__esModule\", { value: !0 });var s = r(n),l = r(i),c = r(o),u = [\"click\", \"dblclick\", \"mousedown\", \"mouseup\", \"mouseout\", \"mouseover\", \"remove\", \"lineupdate\"];e.default = { name: \"bml-curve-line\", render: function render() {}, mixins: [(0, l.default)(\"overlay\")], props: { points: { type: Array, default: Array }, strokeColor: { type: String }, strokeWeight: { type: Number }, strokeOpacity: { type: Number }, strokeStyle: { type: String }, massClear: { type: Boolean, default: !0 }, clicking: { type: Boolean, default: !0 }, editing: { type: Boolean, default: !1 } }, watch: { points: { handler: function handler(t, e) {this.originInstance.disableEditing(), this.reload();}, deep: !0 }, strokeColor: function strokeColor(t) {this.originInstance.setStrokeColor(t);}, strokeOpacity: function strokeOpacity(t) {this.originInstance.setStrokeOpacity(t);}, strokeWeight: function strokeWeight(t) {this.originInstance.setStrokeWeight(t);}, strokeStyle: function strokeStyle(t) {this.originInstance.setStrokeStyle(t);}, editing: function editing(t) {t ? this.originInstance.enableEditing() : this.originInstance.disableEditing();}, massClear: function massClear(t) {t ? this.originInstance.enableMassClear() : this.originInstance.disableMassClear();}, clicking: function clicking(t) {this.reload();} }, methods: { load: function load() {var t = this.BMap,e = this.map,n = this.points,i = this.strokeColor,o = this.strokeWeight,r = this.strokeOpacity,l = this.strokeStyle,h = this.editing,p = this.massClear,d = this.clicking,f = new s.default(n.map(function (e) {return (0, a.createPoint)(t, e);}), { strokeColor: i, strokeWeight: o, strokeOpacity: r, strokeStyle: l, enableMassClear: p, enableClicking: d });h ? f.enableEditing() : f.disableEditing(), this.originInstance = f, e.addOverlay(f), c.default.call(this, f, u);} } }, t.exports = e.default;});}, function (t, e, n) {var i, o, a;!function (r, s) {o = [t, e, n(1), n(79)], i = s, void 0 !== (a = \"function\" == typeof i ? i.apply(e, o) : i) && (t.exports = a);}(0, function (t, e, n, i) {\"use strict\";function o(t) {return t && t.__esModule ? t : { default: t };}Object.defineProperty(e, \"__esModule\", { value: !0 });var a = o(n),r = o(i);e.default = { name: \"bml-heatmap\", render: function render() {}, mixins: [(0, a.default)(\"overlay\")], props: { data: { type: Array, default: Array }, max: { type: Number }, radius: { type: Number }, gradient: { type: Object }, opacity: { type: Number } }, watch: { data: { handler: function handler() {this.reload();}, deep: !0 }, max: function max() {this.reload();}, radius: function radius(t) {var e = this.originInstance,n = this.opacity,i = this.gradient;e.setOptions({ radius: t, opacity: n, gradient: i });}, gradient: { handler: function handler(t) {var e = this.originInstance,n = this.radius,i = this.opacity;e.setOptions({ radius: n, opacity: i, gradient: t });}, deep: !0 }, opacity: function opacity(t) {var e = this.originInstance,n = this.radius,i = this.gradient;e.setOptions({ radius: n, opacity: t, gradient: i });} }, methods: { load: function load() {var t = this.map,e = this.data,n = this.max,i = this.radius,o = this.opacity,a = this.gradient,s = this.originInstance = new r.default({ radius: i, opacity: o, gradient: a });t.addOverlay(s), s.setDataSet({ data: e, max: n });} } }, t.exports = e.default;});}, function (t, e, n) {var i, o, a;!function (r, s) {o = [t, e, n(1), n(2), n(80)], i = s, void 0 !== (a = \"function\" == typeof i ? i.apply(e, o) : i) && (t.exports = a);}(0, function (t, e, n, i, o) {\"use strict\";function a(t) {return t && t.__esModule ? t : { default: t };}Object.defineProperty(e, \"__esModule\", { value: !0 });var r = a(n),s = a(o);e.default = { name: \"bm-lushu\", render: function render(t) {}, mixins: [(0, r.default)(\"lushu\")], props: { path: { type: Array, default: [] }, landmarkPois: { type: Array, default: function _default() {return [];} }, icon: { type: Object }, speed: { type: Number, default: 4e3 }, content: { type: String, default: \"\" }, autoView: { type: Boolean, default: !1 }, rotation: { type: Boolean, default: !1 }, infoWindow: { type: Boolean, default: !0 }, play: { type: Boolean, default: !0 } }, watch: { path: { handler: function handler(t) {this.reload();}, deep: !0 }, landmarkPois: { handler: function handler(t) {this.reload();}, deep: !0 }, icon: { handler: function handler(t) {var e = this.originInstance,n = (this.content, (0, i.createIcon)(BMap, t));e._opts.icon = n, e._marker = n;}, deep: !0 }, speed: function speed(t) {var e = this.originInstance;this.content;e._opts.speed = t;}, content: function content(t) {var e = this.originInstance,n = this.infoWindow;t && n ? e.showInfoWindow() : e.hideInfoWindow(), e._opts.defaultContent = t, e._overlay && e._overlay.setHtml(t);}, autoView: function autoView(t) {var e = this.originInstance;this.content;e._opts.autoView = t;}, rotation: function rotation(t) {var e = this.originInstance;this.content;e._opts.enableRotation = t;}, infoWindow: function infoWindow(t) {var e = this.originInstance,n = this.content;e && t && n ? e.showInfoWindow() : e.hideInfoWindow();}, play: function play(t) {var e = this.originInstance;t && e ? e.start() : !this._isEnd && e.pause();} }, methods: { load: function load() {var t = this,e = this.BMap,n = this.map,o = this.path,a = this.landmarkPois,r = this.icon,l = this.speed,c = this.content,u = this.autoView,h = this.rotation,p = this.infoWindow,d = this.play,f = this.originInstance = new s.default(n, o, { enableRotation: h, landmarkPois: a, showInfoWindow: p, defaultContent: c, icon: r && (0, i.createIcon)(e, r), speed: l, autoView: u, onstart: function onstart(e) {t._isEnd = !1, t.$emit(\"start\");}, onstop: function onstop(e) {t._isEnd = !0, t.$emit(\"stop\");}, onpause: function onpause(e) {return t.$emit(\"pause\");} });d && o.length && f.start(this), o.length && (c && p ? f.showInfoWindow() : f.hideInfoWindow());} } }, t.exports = e.default;});}, function (t, e, n) {var i, o, a;!function (r, s) {o = [t, e, n(81), n(2), n(1)], i = s, void 0 !== (a = \"function\" == typeof i ? i.apply(e, o) : i) && (t.exports = a);}(0, function (t, e, n, i, o) {\"use strict\";function a(t) {return t && t.__esModule ? t : { default: t };}Object.defineProperty(e, \"__esModule\", { value: !0 });var r = a(n),s = a(o);e.default = { name: \"bml-marker-clusterer\", mixins: [(0, s.default)(\"markerClusterer\")], props: { gridSize: { type: Object }, maxZoom: { type: Number }, minClusterSize: { type: Number }, styles: { type: Array, default: function _default() {return [];} }, averageCenter: { type: Boolean, default: !1 } }, watch: { gridSize: { handler: function handler(t) {var e = this.BMap;this.originInstance.setGridSize(e, t.map);}, deep: !0 }, maxZoom: function maxZoom(t) {this.originInstance.setMaxZoom(t);}, minClusterSize: { handler: function handler(t) {var e = this.BMap;this.originInstance.setMinClusterSize((0, i.createSize)(e, t));}, deep: !0 }, styles: { handler: function handler(t) {var e = this.BMap,n = this.originInstance,o = JSON.parse(JSON.stringify(t)).map(function (t) {return t.size = t.size && (0, i.createSize)(e, t.size), t;});n.setStyles(o);}, deep: !0 }, averageCenter: function averageCenter(t) {this.reload();} }, methods: { load: function load() {var t = this,e = this.BMap,n = this.map,o = this.gridSize,a = this.minClusterSize,s = this.maxZoom,l = this.styles,c = this.averageCenter;this.originInstance = new r.default(n, { gridSize: o && (0, i.createSize)(e, o), maxZoom: s, minClusterSize: a && (0, i.createSize)(e, a), styles: l.map(function (t) {return t.size = (0, i.createSize)(e, t.size), t;}), isAverageCenter: c }), this.$nextTick(function () {var n = t.$children.map(function (t) {return t.originInstance;}).filter(function (t) {return t instanceof e.Marker;});t.originInstance.addMarkers(n);});} }, beforeCreate: function beforeCreate() {this.preventChildrenRender = !0;} }, t.exports = e.default;});}, function (t, e, n) {var i, o, a;!function (r, s) {o = [t, e, n(1), n(2)], i = s, void 0 !== (a = \"function\" == typeof i ? i.apply(e, o) : i) && (t.exports = a);}(0, function (t, e, n, i) {\"use strict\";Object.defineProperty(e, \"__esModule\", { value: !0 });var o = function (t) {return t && t.__esModule ? t : { default: t };}(n);e.default = { name: \"bm-tile\", render: function render(t) {}, mixins: [(0, o.default)(\"layer\")], props: { transparentPng: { type: Boolean }, tileUrlTemplate: { type: String }, copyright: {}, zIndex: { type: Number } }, watch: { transparentPng: function transparentPng() {this.reload();}, tileUrlTemplate: function tileUrlTemplate() {this.reload();}, copyright: function copyright() {this.reload();}, zIndex: function zIndex() {this.reload();} }, methods: { load: function load() {var t = this.BMap,e = this.map,n = this.transparentPng,o = this.tileUrlTemplate,a = this.copyright,r = this.zIndex;this.originInstance = new t.TileLayer({ transparentPng: n, tileUrlTemplate: o, copyright: a && { id: a.id, content: a.content, bounds: a.bounds && (0, i.createBounds)(a.bounds) }, zIndex: r }), e.addTileLayer(this.originInstance);} } }, t.exports = e.default;});}, function (t, e, n) {var i, o, a;!function (r, s) {o = [t, e, n(1)], i = s, void 0 !== (a = \"function\" == typeof i ? i.apply(e, o) : i) && (t.exports = a);}(0, function (t, e, n) {\"use strict\";Object.defineProperty(e, \"__esModule\", { value: !0 });var i = function (t) {return t && t.__esModule ? t : { default: t };}(n);e.default = { name: \"bm-triffic\", render: function render(t) {}, mixins: [(0, i.default)(\"layer\")], props: { predictDate: { type: Object } }, watch: { \"pridictDate.weekday\": function pridictDateWeekday() {this.reload();}, \"pridictDate.hour\": function pridictDateHour() {this.reload();}, pridictDate: function pridictDate() {this.reload();} }, methods: { load: function load() {var t = this.pridictDate,e = this.BMap,n = this.map;this.originInstance = new e.TrafficLayer({ pridictDate: t }), n.addTileLayer(this.originInstance);} } }, t.exports = e.default;});}, function (t, e, n) {(function (i) {var o, a, r;!function (i, s) {a = [t, e, n(4), n(5)], o = s, void 0 !== (r = \"function\" == typeof o ? o.apply(e, a) : o) && (t.exports = r);}(0, function (t, e, n, o) {\"use strict\";Object.defineProperty(e, \"__esModule\", { value: !0 });var a = function (t) {return t && t.__esModule ? t : { default: t };}(n);e.default = { name: \"bm-map\", props: { ak: { type: String }, center: { type: [Object, String] }, zoom: { type: Number }, minZoom: { type: Number }, maxZoom: { type: Number }, highResolution: { type: Boolean, default: !0 }, mapClick: { type: Boolean, default: !0 }, mapType: { type: String }, dragging: { type: Boolean, default: !0 }, scrollWheelZoom: { type: Boolean, default: !1 }, doubleClickZoom: { type: Boolean, default: !0 }, keyboard: { type: Boolean, default: !0 }, inertialDragging: { type: Boolean, default: !0 }, continuousZoom: { type: Boolean, default: !0 }, pinchToZoom: { type: Boolean, default: !0 }, autoResize: { type: Boolean, default: !0 }, theme: { type: Array }, mapStyle: { type: Object } }, watch: { center: function center(t, e) {var n = this.map,i = this.zoom;\"String\" === (0, o.checkType)(t) && t !== e && n.centerAndZoom(t, i);}, \"center.lng\": function centerLng(t, e) {var n = this.BMap,i = this.map,o = this.zoom,a = this.center;t !== e && t >= -180 && t <= 180 && i.centerAndZoom(new n.Point(t, a.lat), o);}, \"center.lat\": function centerLat(t, e) {var n = this.BMap,i = this.map,o = this.zoom,a = this.center;t !== e && t >= -74 && t <= 74 && i.centerAndZoom(new n.Point(a.lng, t), o);}, zoom: function zoom(t, e) {var n = this.map;t !== e && t >= 3 && t <= 19 && n.setZoom(t);}, minZoom: function minZoom(t) {this.map.setMinZoom(t);}, maxZoom: function maxZoom(t) {this.map.setMaxZoom(t);}, highResolution: function highResolution() {this.reset();}, mapClick: function mapClick() {this.reset();}, mapType: function mapType(t) {this.map.setMapType(i[t]);}, dragging: function dragging(t) {var e = this.map;t ? e.enableDragging() : e.disableDragging();}, scrollWheelZoom: function scrollWheelZoom(t) {var e = this.map;t ? e.enableScrollWheelZoom() : e.disableScrollWheelZoom();}, doubleClickZoom: function doubleClickZoom(t) {var e = this.map;t ? e.enableDoubleClickZoom() : e.disableDoubleClickZoom();}, keyboard: function keyboard(t) {var e = this.map;t ? e.enableKeyboard() : e.disableKeyboard();}, inertialDragging: function inertialDragging(t) {var e = this.map;t ? e.enableInertialDragging() : e.disableInertialDragging();}, continuousZoom: function continuousZoom(t) {var e = this.map;t ? e.enableContinuousZoom() : e.disableContinuousZoom();}, pinchToZoom: function pinchToZoom(t) {var e = this.map;t ? e.enablePinchToZoom() : e.disablePinchToZoom();}, autoResize: function autoResize(t) {var e = this.map;t ? e.enableAutoResize() : e.disableAutoResize();}, theme: function theme(t) {this.map.setMapStyle({ styleJson: t });}, \"mapStyle.features\": { handler: function handler(t, e) {var n = this.map,i = this.mapStyle,o = i.style,a = i.styleJson;n.setMapStyle({ styleJson: a, features: t, style: o });}, deep: !0 }, \"mapStyle.style\": function mapStyleStyle(t, e) {var n = this.map,i = this.mapStyle,o = i.features,a = i.styleJson;n.setMapStyle({ styleJson: a, features: o, style: t });}, \"mapStyle.styleJson\": { handler: function handler(t, e) {var n = this.map,i = this.mapStyle,o = i.features,a = i.style;n.setMapStyle({ styleJson: t, features: o, style: a });}, deep: !0 }, mapStyle: function mapStyle(t) {var e = this.map;!this.theme && e.setMapStyle(t);} }, methods: { setMapOptions: function setMapOptions() {var t = this.map,e = this.minZoom,n = this.maxZoom,o = this.mapType,a = this.dragging,r = this.scrollWheelZoom,s = this.doubleClickZoom,l = this.keyboard,c = this.inertialDragging,u = this.continuousZoom,h = this.pinchToZoom,p = this.autoResize;e && t.setMinZoom(e), n && t.setMaxZoom(n), o && t.setMapType(i[o]), a ? t.enableDragging() : t.disableDragging(), r ? t.enableScrollWheelZoom() : t.disableScrollWheelZoom(), s ? t.enableDoubleClickZoom() : t.disableDoubleClickZoom(), l ? t.enableKeyboard() : t.disableKeyboard(), c ? t.enableInertialDragging() : t.disableInertialDragging(), u ? t.enableContinuousZoom() : t.disableContinuousZoom(), h ? t.enablePinchToZoom() : t.disablePinchToZoom(), p ? t.enableAutoResize() : t.disableAutoResize();}, init: function init(t) {if (!this.map) {var e = this.$refs.view,n = !0,i = !1,o = void 0;try {for (var r, s = (this.$slots.default || [])[Symbol.iterator](); !(n = (r = s.next()).done); n = !0) {var l = r.value;l.componentOptions && \"bm-view\" === l.componentOptions.tag && (this.hasBmView = !0, e = l.elm);}} catch (t) {i = !0, o = t;} finally {try {!n && s.return && s.return();} finally {if (i) throw o;}}var c = new t.Map(e, { enableHighResolution: this.highResolution, enableMapClick: this.mapClick });this.map = c;var u = this.setMapOptions,h = this.zoom,p = this.getCenterPoint,d = this.theme,f = this.mapStyle;d ? c.setMapStyle({ styleJson: d }) : c.setMapStyle(f), u(), a.default.call(this, c), c.reset(), c.centerAndZoom(p(), h), this.$emit(\"ready\", { BMap: t, map: c });}}, getCenterPoint: function getCenterPoint() {var t = this.center,e = this.BMap;switch ((0, o.checkType)(t)) {case \"String\":return t;case \"Object\":return new e.Point(t.lng, t.lat);default:return new e.Point();}}, initMap: function initMap(t) {this.BMap = t, this.init(t);}, getMapScript: function getMapScript() {if (i.BMap) return i.BMap._preloader ? i.BMap._preloader : Promise.resolve(i.BMap);var t = this.ak || this._BMap().ak;return i.BMap = {}, i.BMap._preloader = new Promise(function (e, n) {i._initBaiduMap = function () {e(i.BMap), i.document.body.removeChild(o), i.BMap._preloader = null, i._initBaiduMap = null;};var o = document.createElement(\"script\");i.document.body.appendChild(o), o.src = \"https://api.map.baidu.com/api?v=2.0&ak=\" + t + \"&callback=_initBaiduMap\";}), i.BMap._preloader;}, reset: function reset() {var t = this.getMapScript,e = this.initMap;t().then(e);} }, mounted: function mounted() {this.reset();}, data: function data() {return { hasBmView: !1 };} }, t.exports = e.default;});}).call(e, n(3));}, function (t, e, n) {var i, o, a;!function (n, r) {o = [t, e], i = r, void 0 !== (a = \"function\" == typeof i ? i.apply(e, o) : i) && (t.exports = a);}(0, function (t, e) {\"use strict\";Object.defineProperty(e, \"__esModule\", { value: !0 }), e.default = { name: \"bm-view\" }, t.exports = e.default;});}, function (t, e, n) {var i, o, a;!function (r, s) {o = [t, e, n(1), n(4)], i = s, void 0 !== (a = \"function\" == typeof i ? i.apply(e, o) : i) && (t.exports = a);}(0, function (t, e, n, i) {\"use strict\";function o(t) {return t && t.__esModule ? t : { default: t };}Object.defineProperty(e, \"__esModule\", { value: !0 });var a = o(n),r = o(i);e.default = { name: \"bm-autocomplete\", mixins: [(0, a.default)()], props: { types: { type: String }, location: { type: String }, sugStyle: { type: Object, default: function _default() {return {};} } }, watch: { types: function types() {this.reload();}, location: function location() {this.reload();} }, methods: { load: function load() {var t = this,e = this.BMap,n = this.map,i = this.$el,o = this.types,a = this.location,s = this.sugStyle,l = i.querySelector(\"input\");l && (this.originInstance = new e.Autocomplete({ input: l, types: o, location: a || n, onSearchComplete: function onSearchComplete(e) {var n = document.querySelectorAll(\".tangram-suggestion-main\"),i = !0,o = !1,a = void 0;try {for (var r, l = n[Symbol.iterator](); !(i = (r = l.next()).done); i = !0) {var c = r.value;for (var u in s) {c.style[u] = s[u].toString();}}} catch (t) {o = !0, a = t;} finally {try {!i && l.return && l.return();} finally {if (o) throw a;}}t.$emit(\"searchcomplete\", e);} }), this.originInstance.addEventListener(\"onconfirm\", function (e) {var n = e.item.value;t.$emit(\"input\", n.province + n.city + n.district + n.street + n.business);}), r.default.call(this, this.originInstance));} } }, t.exports = e.default;});}, function (t, e, n) {var i, o, a;!function (r, s) {o = [t, e, n(6), n(1)], i = s, void 0 !== (a = \"function\" == typeof i ? i.apply(e, o) : i) && (t.exports = a);}(0, function (t, e, n, i) {\"use strict\";function o(t) {return t && t.__esModule ? t : { default: t };}Object.defineProperty(e, \"__esModule\", { value: !0 });var a = o(n),r = o(i),s = function () {function t(t, e) {var n = [],i = !0,o = !1,a = void 0;try {for (var r, s = t[Symbol.iterator](); !(i = (r = s.next()).done) && (n.push(r.value), !e || n.length !== e); i = !0) {;}} catch (t) {o = !0, a = t;} finally {try {!i && s.return && s.return();} finally {if (o) throw a;}}return n;}return function (e, n) {if (Array.isArray(e)) return e;if (Symbol.iterator in Object(e)) return t(e, n);throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");};}();e.default = { mixins: [(0, r.default)(\"abstract\")], props: [\"name\", \"strokeColor\", \"strokeWeight\", \"strokeOpacity\", \"strokeStyle\", \"fillColor\", \"fillOpacity\", \"massClear\", \"clicking\"], data: function data() {return { paths: [] };}, components: { BmPolygon: a.default }, watch: { name: function name() {this.reload();} }, methods: { load: function load() {var t = this,e = this.BMap,n = this.name;new e.Boundary().get(n, function (e) {t.paths = e.boundaries.map(function (t) {return (t || []).split(\";\").map(function (t) {return function (t) {var e = s(t, 2);return { lng: e[0], lat: e[1] };}(t.split(\",\").map(function (t) {return +t;}));});});});} } }, t.exports = e.default;});}, function (t, e, n) {var i, o, a;!function (r, s) {o = [t, e, n(1), n(4), n(2)], i = s, void 0 !== (a = \"function\" == typeof i ? i.apply(e, o) : i) && (t.exports = a);}(0, function (t, e, n, i, o) {\"use strict\";function a(t) {return t && t.__esModule ? t : { default: t };}Object.defineProperty(e, \"__esModule\", { value: !0 });var r = a(n),s = a(i);e.default = { name: \"bm-circle\", render: function render() {}, mixins: [(0, r.default)(\"overlay\")], props: { center: {}, radius: {}, strokeColor: { type: String }, strokeWeight: { type: Number }, strokeOpacity: { type: Number }, strokeStyle: { type: String }, fillColor: { type: String }, fillOpacity: { type: Number }, massClear: { type: Boolean, default: !0 }, clicking: { type: Boolean, default: !0 }, editing: { type: Boolean, default: !1 } }, watch: { \"center.lng\": function centerLng(t, e) {var n = this.BMap,i = this.originInstance,a = this.isEditing,r = this.disableEditing,s = this.enableEditing,l = this.center,c = this.editing;if (!a) {r();var u = t;t.toString() !== e.toString() && u >= -180 && u <= 180 && i.setCenter((0, o.createPoint)(n, { lng: u, lat: l.lat })), c && s();}}, \"center.lat\": function centerLat(t, e) {var n = this.BMap,i = this.originInstance,a = this.isEditing,r = this.disableEditing,s = this.enableEditing,l = this.center,c = this.editing;if (!a) {r();var u = t;t.toString() !== e.toString() && u >= -74 && u <= 74 && i.setCenter((0, o.createPoint)(n, { lng: l.lng, lat: u })), c && s();}}, radius: function radius(t, e) {var n = this.originInstance,i = this.isEditing,o = this.disableEditing,a = this.enableEditing,r = this.editing;i || (o(), n.setRadius(t), r && a());}, strokeColor: function strokeColor(t) {this.originInstance.setStrokeColor(t);}, strokeOpacity: function strokeOpacity(t) {this.originInstance.setStrokeOpacity(t);}, strokeWeight: function strokeWeight(t) {this.originInstance.setStrokeWeight(t);}, strokeStyle: function strokeStyle(t) {this.originInstance.setStrokeStyle(t);}, fillColor: function fillColor(t) {this.originInstance.setFillColor(t);}, fillOpacity: function fillOpacity(t) {this.originInstance.setFillOpacity(t);}, editing: function editing(t) {t ? this.enableEditing() : this.disableEditing();}, massClear: function massClear(t) {t ? this.originInstance.enableMassClear() : this.originInstance.disableMassClear();}, clicking: function clicking(t) {this.reload();} }, methods: { dragStartHandler: function dragStartHandler() {this.isEditing = !0;}, dragEndHandler: function dragEndHandler() {this.isEditing = !1, this.bindEditingNodeEvents();}, bindEditingNodeEvents: function bindEditingNodeEvents() {var t = this.originInstance,e = this.editingKey,n = this.dragStartHandler,i = this.dragEndHandler;t[e].forEach(function (t) {t.addEventListener(\"dragstart\", n), t.addEventListener(\"dragend\", i);});}, enableEditing: function enableEditing() {var t = this.originInstance,e = this.bindEditingNodeEvents;t.enableEditing(), e();}, disableEditing: function disableEditing() {this.originInstance.disableEditing();}, getEditingKey: function getEditingKey(t) {var e = this,n = [];t.enableEditing(), setTimeout(function () {for (var i in t) {t[i] && 2 === t[i].length && n.push(i);}t.disableEditing();for (var o in t) {t[o] && 0 === t[o].length && ~n.indexOf(o) && (e.editingKey = o);}}, 0);}, load: function load() {var t = this.BMap,e = this.map,n = this.center,i = this.radius,a = this.strokeColor,r = this.strokeWeight,l = this.strokeOpacity,c = this.strokeStyle,u = this.fillColor,h = this.fillOpacity,p = this.editing,d = this.massClear,f = this.clicking,m = this.enableEditing,g = this.disableEditing,y = this.getEditingKey,v = this.editingKey,_ = new t.Circle((0, o.createPoint)(t, { lng: n.lng, lat: n.lat }), i, { strokeColor: a, strokeWeight: r, strokeOpacity: l, strokeStyle: c, fillColor: u, fillOpacity: h, enableMassClear: d, enableClicking: f });this.originInstance = _, e.addOverlay(_), s.default.call(this, _), !v && y(_), setTimeout(function () {p ? m() : g();}, 0);} } }, t.exports = e.default;});}, function (t, e, n) {var i, o, a;!function (r, s) {o = [t, e, n(1), n(4), n(2)], i = s, void 0 !== (a = \"function\" == typeof i ? i.apply(e, o) : i) && (t.exports = a);}(0, function (t, e, n, i, o) {\"use strict\";function a(t) {return t && t.__esModule ? t : { default: t };}Object.defineProperty(e, \"__esModule\", { value: !0 });var r = a(n),s = a(i);e.default = { name: \"bm-ground\", render: function render() {}, mixins: [(0, r.default)(\"overlay\")], props: { bounds: { type: Object }, opacity: { type: Number }, imageURL: { type: String }, displayOnMinLevel: { type: Number }, displayOnMaxLevel: { type: Number } }, watch: { bounds: { handler: function handler(t) {var e = this.BMap;this.originInstance.setBounds((0, o.createBounds)(e, t));}, deep: !0 }, opacity: function opacity(t) {this.originInstance.setOpacity(t);}, imageURL: function imageURL(t) {this.originInstance.setImageURL(t);}, displayOnMinLevel: function displayOnMinLevel(t) {this.originInstance.setDisplayOnMinLevel(t);}, displayOnMaxLevel: function displayOnMaxLevel(t) {this.originInstance.setDisplayOnMaxLevel(t);} }, methods: { load: function load() {var t = this.BMap,e = this.map,n = this.bounds,i = this.opacity,a = this.imageURL,r = this.displayOnMinLevel,l = this.displayOnMaxLevel,c = new t.GroundOverlay(n && (0, o.createBounds)(t, n), { opacity: i, imageURL: a, displayOnMaxLevel: l, displayOnMinLevel: r });c.setImageURL(a), this.originInstance = c, s.default.call(this, c), e.addOverlay(c);} } }, t.exports = e.default;});}, function (t, e, n) {(function (i) {var o, a, r;!function (i, s) {a = [t, e, n(1), n(4), n(2)], o = s, void 0 !== (r = \"function\" == typeof o ? o.apply(e, a) : o) && (t.exports = r);}(0, function (t, e, n, o, a) {\"use strict\";function r(t) {return t && t.__esModule ? t : { default: t };}Object.defineProperty(e, \"__esModule\", { value: !0 });var s = r(n),l = r(o);e.default = { name: \"bm-info-window\", mixins: [(0, s.default)(\"overlay\")], props: { show: { type: Boolean }, position: { type: Object }, title: { type: String }, width: { type: Number }, height: { type: Number }, maxWidth: { type: Number }, offset: { type: Object }, maximize: { type: Boolean }, autoPan: { type: Boolean }, closeOnClick: { type: Boolean, default: !0 }, message: { type: String } }, watch: { show: function show(t) {t ? this.openInfoWindow() : this.closeInfoWindow();}, \"position.lng\": function positionLng(t, e) {this.reload();}, \"position.lat\": function positionLat(t, e) {this.reload();}, \"offset.width\": function offsetWidth(t, e) {this.reload();}, \"offset.height\": function offsetHeight(t) {this.reload();}, maxWidth: function maxWidth() {this.reload();}, width: function width(t) {this.originInstance.setWidth(t);}, height: function height(t) {this.originInstance.setHeight(t);}, title: function title(t) {this.originInstance.setTitle(t);}, maximize: function maximize(t) {t ? this.originInstance.enableMaximize() : this.originInstance.disableMaximize();}, autoPan: function autoPan(t) {t ? this.originInstance.enableAutoPan() : this.originInstance.disableAutoPan();}, closeOnClick: function closeOnClick(t) {t ? this.originInstance.enableCloseOnClick() : this.originInstance.disableCloseOnClick();} }, methods: { redraw: function redraw() {this.originInstance.redraw();}, load: function load() {var t = this.BMap,e = this.map,n = this.show,i = this.title,o = this.width,r = this.height,s = this.maxWidth,c = this.offset,u = this.autoPan,h = this.closeOnClick,p = this.message,d = this.maximize,f = this.bindObserver,m = this.$parent,g = this.$el,y = new t.InfoWindow(g, { width: o, height: r, title: i, maxWidth: s, offset: (0, a.createSize)(t, c), enableAutoPan: u, enableCloseOnClick: h, enableMessage: void 0 === p, message: p });d ? y.enableMaximize() : y.disableMaximize(), l.default.call(this, y), this.originInstance = y, y.redraw(), [].forEach.call(g.querySelectorAll(\"img\"), function (t) {t.onload = function () {return y.redraw();};}), f(), this.$container = m.originInstance && m.originInstance.openInfoWindow ? m.originInstance : e, n && this.openInfoWindow();}, bindObserver: function bindObserver() {var t = i.MutationObserver;if (t) {var e = this.$el,n = this.originInstance;this.observer = new t(function (t) {return n.redraw();}), this.observer.observe(e, { attributes: !0, childList: !0, characterData: !0, subtree: !0 });}}, openInfoWindow: function openInfoWindow() {var t = this.BMap,e = this.$container,n = this.position,i = this.originInstance;e.openInfoWindow(i, (0, a.createPoint)(t, n));}, closeInfoWindow: function closeInfoWindow() {this.$container.closeInfoWindow(this.originInstance);} } }, t.exports = e.default;});}).call(e, n(3));}, function (t, e, n) {var i, o, a;!function (r, s) {o = [t, e, n(1), n(4), n(2)], i = s, void 0 !== (a = \"function\" == typeof i ? i.apply(e, o) : i) && (t.exports = a);}(0, function (t, e, n, i, o) {\"use strict\";function a(t) {return t && t.__esModule ? t : { default: t };}Object.defineProperty(e, \"__esModule\", { value: !0 });var r = a(n),s = a(i);e.default = { name: \"bm-label\", render: function render() {}, mixins: [(0, r.default)(\"overlay\")], props: { content: { type: String }, title: { type: String }, offset: {}, position: {}, labelStyle: {}, zIndex: { type: Number, default: 0 }, massClear: { type: Boolean, default: !0 } }, watch: { content: function content(t) {this.originInstance.setContent(t);}, title: function title(t) {this.originInstance.setTitle(t);}, \"offset.width\": function offsetWidth(t, e) {var n = this.BMap;t.toString() !== e.toString() && this.originInstance.setOffset((0, o.createSize)(n, { width: t, height: this.offset.height }));}, \"offset.height\": function offsetHeight(t, e) {var n = this.BMap;t.toString() !== e.toString() && this.originInstance.setOffset((0, o.createSize)(n, { width: this.offset.width, height: t }));}, \"position.lng\": function positionLng(t, e) {var n = this.BMap,i = t;t.toString() !== e.toString() && i >= -180 && i <= 180 && this.originInstance.setCenter((0, o.createPoint)(n, { lng: i, lat: this.center.lat }));}, \"position.lat\": function positionLat(t, e) {var n = this.BMap,i = t;t.toString() !== e.toString() && i >= -74 && i <= 74 && this.originInstance.setCenter((0, o.createPoint)(n, { lng: this.center.lng, lat: i }));}, labelStyle: { handler: function handler(t) {this.originInstance.setStyle(t);}, deep: !0 }, zIndex: function zIndex(t) {this.originInstance.setZIndex(t);}, massClear: function massClear(t) {t ? this.originInstance.enableMassClear() : this.originInstance.disableMassClear();} }, methods: { load: function load() {var t = this.BMap,e = this.map,n = this.content,i = this.title,a = this.offset,r = this.position,l = this.labelStyle,c = this.zIndex,u = this.massClear,h = this.$parent,p = new t.Label(n, { offset: (0, o.createSize)(t, a), position: (0, o.createPoint)(t, r), enableMassClear: u });this.originInstance = p;try {h.originInstance.setLabel(p);} catch (t) {e.addOverlay(p);}i && p.setTitle(i), l && p.setStyle(l), c && p.setZIndex(c), s.default.call(this, p);} } }, t.exports = e.default;});}, function (t, e, n) {(function (i) {var o, a, r;!function (i, s) {a = [t, e, n(1), n(4), n(2)], o = s, void 0 !== (r = \"function\" == typeof o ? o.apply(e, a) : o) && (t.exports = r);}(0, function (t, e, n, o, a) {\"use strict\";function r(t) {return t && t.__esModule ? t : { default: t };}Object.defineProperty(e, \"__esModule\", { value: !0 });var s = r(n),l = r(o);e.default = { name: \"bm-marker\", mixins: [(0, s.default)(\"overlay\")], props: { position: {}, offset: {}, icon: {}, massClear: { type: Boolean, default: !0 }, dragging: { type: Boolean, default: !1 }, clicking: { type: Boolean, default: !0 }, raiseOnDrag: { type: Boolean, default: !1 }, draggingCursor: { type: String }, rotation: { type: Number }, shadow: { type: Object }, title: { type: String }, label: { type: Object }, animation: { type: String }, top: { type: Boolean, default: !1 }, zIndex: { type: Number, default: 0 } }, watch: { \"position.lng\": function positionLng(t, e) {var n = this.BMap,i = this.originInstance,o = this.position,r = this.renderByParent,s = this.$parent;t !== e && t >= -180 && t <= 180 && i.setPosition((0, a.createPoint)(n, { lng: t, lat: o.lat })), r && s.reload();}, \"position.lat\": function positionLat(t, e) {var n = this.BMap,i = this.originInstance,o = this.position,r = this.renderByParent,s = this.$parent;t !== e && t >= -74 && t <= 74 && i.setPosition((0, a.createPoint)(n, { lng: o.lng, lat: t })), r && s.reload();}, \"offset.width\": function offsetWidth(t, e) {var n = this.BMap,i = this.originInstance;t !== e && i.setOffset(new n.Size(t, this.offset.height));}, \"offset.height\": function offsetHeight(t, e) {var n = this.BMap,i = this.originInstance;t !== e && i.setOffset(new n.Size(this.offset.width, t));}, icon: { deep: !0, handler: function handler(t) {var e = this.BMap,n = this.originInstance,i = this.rotation;n && n.setIcon((0, a.createIcon)(e, t)), i && n && n.setRotation(i);} }, massClear: function massClear(t) {t ? this.originInstance.enableMassClear() : this.originInstance.disableMassClear();}, dragging: function dragging(t) {t ? this.originInstance.enableDragging() : this.originInstance.disableDragging();}, clicking: function clicking() {this.reload();}, raiseOnDrag: function raiseOnDrag() {this.reload();}, draggingCursor: function draggingCursor(t) {this.originInstance.setDraggingCursor(t);}, rotation: function rotation(t) {this.originInstance.setRotation(t);}, shadow: function shadow(t) {this.originInstance.setShadow(t);}, title: function title(t) {this.originInstance.setTitle(t);}, label: function label(t) {this.reload();}, animation: function animation(t) {this.originInstance.setAnimation(i[t]);}, top: function top(t) {this.originInstance.setTop(t);}, zIndex: function zIndex(t) {this.originInstance.setZIndex(t);} }, methods: { load: function load() {var t = this.BMap,e = this.map,n = this.position,o = this.offset,r = this.icon,s = this.massClear,c = this.dragging,u = this.clicking,h = this.raiseOnDrag,p = this.draggingCursor,d = this.rotation,f = this.shadow,m = this.title,g = this.label,y = this.animation,v = this.top,_ = this.renderByParent,b = this.$parent,x = this.zIndex,w = new t.Marker(new t.Point(n.lng, n.lat), { offset: o, icon: r && (0, a.createIcon)(t, r), enableMassClear: s, enableDragging: c, enableClicking: u, raiseOnDrag: h, draggingCursor: p, rotation: d, shadow: f, title: m });this.originInstance = w, g && w && w.setLabel((0, a.createLabel)(t, g)), w.setTop(v), w.setZIndex(x), l.default.call(this, w), _ ? b.reload() : e.addOverlay(w), w.setAnimation(i[y]);} } }, t.exports = e.default;});}).call(e, n(3));}, function (t, e, n) {var i, o, a;!function (r, s) {o = [t, e, n(1)], i = s, void 0 !== (a = \"function\" == typeof i ? i.apply(e, o) : i) && (t.exports = a);}(0, function (t, e, n) {\"use strict\";function i(t, e) {if (!(t instanceof e)) throw new TypeError(\"Cannot call a class as a function\");}function o(t, e) {if (!t) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");return !e || \"object\" != typeof e && \"function\" != typeof e ? t : e;}function a(t, e) {if (\"function\" != typeof e && null !== e) throw new TypeError(\"Super expression must either be null or a function, not \" + typeof e);t.prototype = Object.create(e && e.prototype, { constructor: { value: t, enumerable: !1, writable: !0, configurable: !0 } }), e && (Object.setPrototypeOf ? Object.setPrototypeOf(t, e) : t.__proto__ = e);}Object.defineProperty(e, \"__esModule\", { value: !0 });var r = function (t) {return t && t.__esModule ? t : { default: t };}(n),s = function () {function t(t, e) {for (var n = 0; n < e.length; n++) {var i = e[n];i.enumerable = i.enumerable || !1, i.configurable = !0, \"value\" in i && (i.writable = !0), Object.defineProperty(t, i.key, i);}}return function (e, n, i) {return n && t(e.prototype, n), i && t(e, i), e;};}();e.default = { name: \"bm-overlay\", mixins: [(0, r.default)(\"overlay\")], props: { pane: { type: String } }, watch: { pane: function pane() {this.reload();} }, methods: { load: function load() {var t = this.BMap,e = this.map,n = this.$el,r = this.pane,l = this.$emit.bind(this),c = function (c) {function u() {return i(this, u), o(this, (u.__proto__ || Object.getPrototypeOf(u)).apply(this, arguments));}return a(u, c), s(u, [{ key: \"initialize\", value: function value() {l(\"initialize\", { BMap: t, map: e, el: n, overlay: this });try {e.getPanes()[r].appendChild(n);} catch (t) {}return n;} }, { key: \"draw\", value: function value() {l(\"draw\", { BMap: t, map: e, el: n, overlay: this });} }]), u;}(t.Overlay),u = new c();this.originInstance = u, e.addOverlay(u);} } }, t.exports = e.default;});}, function (t, e, n) {(function (i) {var o, a, r;!function (i, s) {a = [t, e, n(1), n(4), n(2)], o = s, void 0 !== (r = \"function\" == typeof o ? o.apply(e, a) : o) && (t.exports = r);}(0, function (t, e, n, o, a) {\"use strict\";function r(t) {return t && t.__esModule ? t : { default: t };}Object.defineProperty(e, \"__esModule\", { value: !0 });var s = r(n),l = r(o);e.default = { render: function render() {}, name: \"bm-point-collection\", mixins: [(0, s.default)(\"overlay\")], props: { points: { type: Array, default: function _default() {return [];} }, shape: { type: String, default: \"BMAP_POINT_SHAPE_CIRCLE\" }, color: { type: String }, size: { type: String, default: \"BMAP_POINT_SIZE_NORMAL\" } }, watch: { shape: function shape(t) {var e = this.originInstance,n = this.color,o = this.size;e.setStyles({ shape: i[t], color: n, size: i[o] });}, size: function size(t) {var e = this.originInstance,n = this.color,o = this.shape;e.setStyles({ shape: i[o], color: n, size: i[t] });}, color: function color(t) {var e = this.originInstance,n = this.shape,o = this.size;e.setStyles({ shape: i[n], color: t, size: i[o] });}, points: { deep: !0, handler: function handler(t) {var e = this.originInstance;e.clear(), e.setPoints(t);} } }, methods: { load: function load() {var t = this.BMap,e = this.map,n = this.points,o = this.shape,r = this.color,s = this.size,c = this.originInstance = new t.PointCollection(n.map(function (e) {return (0, a.createPoint)(t, e);}), { shape: i[o], color: r, size: i[s] });l.default.call(this, c), e.addOverlay(c);} } }, t.exports = e.default;});}).call(e, n(3));}, function (t, e, n) {var i, o, a;!function (r, s) {o = [t, e, n(1), n(4), n(2)], i = s, void 0 !== (a = \"function\" == typeof i ? i.apply(e, o) : i) && (t.exports = a);}(0, function (t, e, n, i, o) {\"use strict\";function a(t) {return t && t.__esModule ? t : { default: t };}Object.defineProperty(e, \"__esModule\", { value: !0 });var r = a(n),s = a(i);e.default = { name: \"bm-polygon\", render: function render() {}, mixins: [(0, r.default)(\"overlay\")], props: { path: { type: Array, default: function _default() {return [];} }, strokeColor: { type: String }, strokeWeight: { type: Number }, strokeOpacity: { type: Number }, strokeStyle: { type: String }, fillColor: { type: String }, fillOpacity: { type: Number }, massClear: { type: Boolean, default: !0 }, clicking: { type: Boolean, default: !0 }, editing: { type: Boolean, default: !1 } }, watch: { path: { handler: function handler(t, e) {this.reload();}, deep: !0 }, strokeColor: function strokeColor(t) {this.originInstance.setStrokeColor(t);}, strokeOpacity: function strokeOpacity(t) {this.originInstance.setStrokeOpacity(t);}, strokeWeight: function strokeWeight(t) {this.originInstance.setStrokeWeight(t);}, strokeStyle: function strokeStyle(t) {this.originInstance.setStrokeStyle(t);}, fillColor: function fillColor(t) {this.originInstance.setFillColor(t);}, fillOpacity: function fillOpacity(t) {this.originInstance.setFillOpacity(t);}, editing: function editing(t) {t ? this.originInstance.enableEditing() : this.originInstance.disableEditing();}, massClear: function massClear(t) {t ? this.originInstance.enableMassClear() : this.originInstance.disableMassClear();}, clicking: function clicking(t) {this.reload();} }, methods: { load: function load() {var t = this.BMap,e = this.map,n = this.path,i = this.strokeColor,a = this.strokeWeight,r = this.strokeOpacity,l = this.strokeStyle,c = this.fillColor,u = this.fillOpacity,h = this.editing,p = this.massClear,d = this.clicking,f = new t.Polygon(n.map(function (e) {return (0, o.createPoint)(t, { lng: e.lng, lat: e.lat });}), { strokeColor: i, strokeWeight: a, strokeOpacity: r, strokeStyle: l, fillColor: c, fillOpacity: u, enableMassClear: p, enableClicking: d });this.originInstance = f, e.addOverlay(f), s.default.call(this, f), h ? f.enableEditing() : f.disableEditing();} } }, t.exports = e.default;});}, function (t, e, n) {var i, o, a;!function (r, s) {o = [t, e, n(1), n(4), n(2)], i = s, void 0 !== (a = \"function\" == typeof i ? i.apply(e, o) : i) && (t.exports = a);}(0, function (t, e, n, i, o) {\"use strict\";function a(t) {return t && t.__esModule ? t : { default: t };}Object.defineProperty(e, \"__esModule\", { value: !0 });var r = a(n),s = a(i);e.default = { name: \"bm-polyline\", render: function render() {}, mixins: [(0, r.default)(\"overlay\")], props: { path: { type: Array }, strokeColor: { type: String }, strokeWeight: { type: Number }, strokeOpacity: { type: Number }, strokeStyle: { type: String }, massClear: { type: Boolean, default: !0 }, clicking: { type: Boolean, default: !0 }, editing: { type: Boolean, default: !1 } }, watch: { path: { handler: function handler(t, e) {this.reload();}, deep: !0 }, strokeColor: function strokeColor(t) {this.originInstance.setStrokeColor(t);}, strokeOpacity: function strokeOpacity(t) {this.originInstance.setStrokeOpacity(t);}, strokeWeight: function strokeWeight(t) {this.originInstance.setStrokeWeight(t);}, strokeStyle: function strokeStyle(t) {this.originInstance.setStrokeStyle(t);}, editing: function editing(t) {t ? this.originInstance.enableEditing() : this.originInstance.disableEditing();}, massClear: function massClear(t) {t ? this.originInstance.enableMassClear() : this.originInstance.disableMassClear();}, clicking: function clicking(t) {this.reload();} }, methods: { load: function load() {var t = this.BMap,e = this.map,n = this.path,i = this.strokeColor,a = this.strokeWeight,r = this.strokeOpacity,l = this.strokeStyle,c = this.editing,u = this.massClear,h = this.clicking,p = new t.Polyline(n.map(function (e) {return (0, o.createPoint)(t, { lng: e.lng, lat: e.lat });}), { strokeColor: i, strokeWeight: a, strokeOpacity: r, strokeStyle: l, enableEditing: c, enableMassClear: u, enableClicking: h });this.originInstance = p, e.addOverlay(p), s.default.call(this, p);} } }, t.exports = e.default;});}, function (t, e, n) {var i, o, a;!function (r, s) {o = [t, e, n(2), n(5), n(1)], i = s, void 0 !== (a = \"function\" == typeof i ? i.apply(e, o) : i) && (t.exports = a);}(0, function (t, e, n, i, o) {\"use strict\";Object.defineProperty(e, \"__esModule\", { value: !0 });var a = function (t) {return t && t.__esModule ? t : { default: t };}(o);e.default = { name: \"bm-bus\", mixins: [(0, a.default)(\"search\")], props: { location: { type: [Object, String] }, keyword: { type: String }, panel: { type: Boolean, default: !0 }, pageCapacity: { type: Number }, autoViewport: { type: Boolean }, selectFirstResult: { type: Boolean } }, watch: { location: { handler: function handler(t) {var e = this.originInstance,n = this.map;e.setLocation(t || n);}, deep: !0 }, keyword: function keyword(t) {this.search(t);}, panel: function panel() {this.reload();}, autoViewport: function autoViewport(t) {this.reload();}, selectFirstResult: function selectFirstResult(t) {this.reload();} }, methods: { search: function search(t) {this.originInstance.getBusList(t);}, load: function load() {var t = this,e = this.location,o = this.selectFirstResult,a = this.autoViewport,r = this.highlightMode,s = this.keyword,l = this.search,c = this.BMap,u = this.map,h = this.originInstance,p = e ? (0, i.isPoint)(e) ? (0, n.createPoint)(c, e) : e : u,d = this.originInstance = new c.BusLineSearch(p, { renderOptions: { map: u, panel: this.$el, selectFirstResult: o, autoViewport: a, highlightMode: r }, onGetBusListComplete: function onGetBusListComplete(e) {h && h !== d && h.clearResults(), t.$emit(\"getbuslistcomplete\", e);}, onGetBusLineComplete: function onGetBusLineComplete(e) {h && h !== d && h.clearResults(), t.$emit(\"getbuslinecomplete\", e);}, onBusListHtmlSet: function onBusListHtmlSet(e) {t.$emit(\"buslisthtmlset\", e);}, onBusLineHtmlSet: function onBusLineHtmlSet(e) {t.$emit(\"buslinehtmlset\", e);}, onMarkersSet: function onMarkersSet(e) {t.$emit(\"markersset\", e);}, onPolylinesSet: function onPolylinesSet(e) {t.$emit(\"polylinesset\", e);} });l(s);} } }, t.exports = e.default;});}, function (t, e, n) {(function (i) {var o, a, r;!function (i, s) {a = [t, e, n(2), n(5), n(1)], o = s, void 0 !== (r = \"function\" == typeof o ? o.apply(e, a) : o) && (t.exports = r);}(0, function (t, e, n, o, a) {\"use strict\";Object.defineProperty(e, \"__esModule\", { value: !0 });var r = function (t) {return t && t.__esModule ? t : { default: t };}(a);e.default = { name: \"bm-driving\", mixins: [(0, r.default)(\"search\")], props: { location: { type: [Object, String] }, start: { type: [Object, String] }, end: { type: [Object, String] }, startCity: { type: [String, Number] }, endCity: { type: [String, Number] }, waypoints: { type: Array }, policy: { type: String }, panel: { type: Boolean, default: !0 }, autoViewport: { type: Boolean }, selectFirstResult: { type: Boolean } }, watch: { location: { handler: function handler(t) {var e = this.originInstance,n = this.map;e.setLocation(t || n);}, deep: !0 }, start: { handler: function handler(t) {var e = this.originInstance,n = this.end,i = this.startCity,a = this.endCity,r = this.waypoints,s = this.BMap,l = this.getWaypoints;e.search((0, o.getPosition)(s, t), (0, o.getPosition)(s, n), { startCity: i, endCity: a, waypoints: l(r) });}, deep: !0 }, end: { handler: function handler(t) {var e = this.originInstance,n = this.start,i = this.startCity,a = this.endCity,r = this.waypoints,s = this.BMap,l = this.getWaypoints;e.search((0, o.getPosition)(s, n), (0, o.getPosition)(s, t), { startCity: i, endCity: a, waypoints: l(r) });}, deep: !0 }, startCity: function startCity(t) {var e = this.originInstance,n = this.start,i = this.end,o = this.endCity,a = this.waypoints,r = this.getWaypoints;e.search(n, i, { val: t, endCity: o, waypoints: r(a) });}, endCity: function endCity(t) {var e = this.originInstance,n = this.start,i = this.end,o = this.startCity,a = this.waypoints,r = this.getWaypoints;e.search(n, i, { startCity: o, val: t, waypoints: r(a) });}, waypoints: { handler: function handler(t) {var e = this.originInstance,n = this.start,i = this.end,o = this.startCity,a = this.endCity,r = this.getWaypoints;e.search(n, i, { startCity: o, endCity: a, waypoints: r(t) });}, deep: !0 }, panel: function panel() {this.reload();}, policy: function policy(t) {this.reload();}, autoViewport: function autoViewport() {this.reload();}, selectFirstResult: function selectFirstResult() {this.reload();}, highlightMode: function highlightMode() {this.reload();} }, methods: { search: function search(t, e, n) {var i = n.startCity,o = n.endCity,a = n.waypoints,r = this.originInstance,s = this.getWaypoints;r.search(t, e, { startCity: i, endCity: o, waypoints: s(a) });}, getWaypoints: function getWaypoints(t) {var e = this.BMap;if (t) return t.map(function (t) {return (0, o.getPosition)(e, t);});}, load: function load() {var t = this,e = this.map,a = this.BMap,r = this.location,s = this.policy,l = this.selectFirstResult,c = this.autoViewport,u = this.highlightMode,h = this.search,p = this.start,d = this.end,f = this.startCity,m = this.endCity,g = this.waypoints,y = this.originInstance,v = this.getWaypoints,_ = r ? (0, o.isPoint)(r) ? (0, n.createPoint)(a, r) : r : e,b = this.originInstance = new a.DrivingRoute(_, { renderOptions: { map: e, panel: this.$el, selectFirstResult: l, autoViewport: c, highlightMode: u }, policy: i[s], onSearchComplete: function onSearchComplete(e) {y && y !== b && y.clearResults(), t.$emit(\"searchcomplete\", e);}, onMarkersSet: function onMarkersSet(e) {t.$emit(\"markersset\", e);}, onInfoHtmlSet: function onInfoHtmlSet(e) {t.$emit(\"infohtmlset\", e);}, onPolylinesSet: function onPolylinesSet(e) {t.$emit(\"polylinesset\", e);}, onResultsHtmlSet: function onResultsHtmlSet(e) {t.$emit(\"resultshtmlset\", e);} });h((0, o.getPosition)(a, p), (0, o.getPosition)(a, d), { startCity: f, endCity: m, waypoints: v(g) });} } }, t.exports = e.default;});}).call(e, n(3));}, function (t, e, n) {var i, o, a;!function (r, s) {o = [t, e, n(2), n(5), n(1)], i = s, void 0 !== (a = \"function\" == typeof i ? i.apply(e, o) : i) && (t.exports = a);}(0, function (t, e, n, i, o) {\"use strict\";Object.defineProperty(e, \"__esModule\", { value: !0 });var a = function (t) {return t && t.__esModule ? t : { default: t };}(o);e.default = { name: \"bm-local-search\", mixins: [(0, a.default)(\"search\")], props: { location: { type: [Object, String] }, keyword: { type: [Array, String] }, panel: { type: Boolean, default: !0 }, forceLocal: { type: Boolean }, customData: { type: Object }, bounds: { type: Object }, nearby: { type: Object }, pageCapacity: { type: Number }, autoViewport: { type: Boolean }, selectFirstResult: { type: Boolean } }, watch: { location: { handler: function handler(t) {var e = this.originInstance,n = this.search;e.setLocation(t || this.map), n();}, deep: !0 }, keyword: function keyword() {this.search();}, bounds: { handler: function handler(t) {(0, this.searchInBounds)(t);}, deep: !0 }, nearby: { handler: function handler(t) {(0, this.searchNearby)(t);}, deep: !0 }, forceLocal: function forceLocal() {this.reload();}, customData: { deep: !0, handler: function handler() {this.reload();} }, pageCapacity: function pageCapacity(t) {this.originInstance && this.originInstance.setPageCapacity(t);}, autoViewport: function autoViewport(t) {this.originInstance && (t ? this.originInstance.enableAutoViewport() : this.originInstance.disableAutoViewport());}, selectFirstResult: function selectFirstResult(t) {this.originInstance && (t ? this.originInstance.enableFirstResultSelection() : this.originInstance.disableFirstResultSelection());}, highlightMode: function highlightMode() {this.reload();} }, methods: { searchNearby: function searchNearby(t) {var e = this.originInstance,i = this.keyword,o = this.customData,a = this.BMap;e.searchNearby(i, (0, n.createPoint)(a, t.center), t.radius, o);}, searchInBounds: function searchInBounds(t) {var e = this.originInstance,i = this.keyword,o = this.customData,a = this.BMap;e.searchInBounds(i, (0, n.createBounds)(a, t), o);}, search: function search() {var t = this.originInstance,e = this.keyword,n = this.forceLocal,i = this.customData,o = this.nearby,a = this.bounds,r = this.searchNearby,s = this.searchInBounds;o ? r(o) : a ? s(a) : t.search(e, { forceLocal: n, customData: i });}, load: function load() {var t = this,e = this.map,o = this.BMap,a = this.search,r = this.pageCapacity,s = this.autoViewport,l = this.selectFirstResult,c = this.highlightMode,u = this.location,h = this.originInstance,p = u ? (0, i.isPoint)(u) ? (0, n.createPoint)(o, u) : u : e,d = this.originInstance = new o.LocalSearch(p, { onMarkersSet: function onMarkersSet(e) {t.$emit(\"markersset\", e);}, onInfoHtmlSet: function onInfoHtmlSet(e) {t.$emit(\"infohtmlset\", e);}, onResultsHtmlSet: function onResultsHtmlSet(e) {t.$emit(\"resultshtmlset\", e);}, onSearchComplete: function onSearchComplete(e) {h && h !== d && h.clearResults(), t.$emit(\"searchcomplete\", e);}, pageCapacity: r, renderOptions: { map: e, panel: this.$el, selectFirstResult: l, autoViewport: s, highlightMode: c } });a();} } }, t.exports = e.default;});}, function (t, e, n) {(function (i) {var o, a, r;!function (i, s) {a = [t, e, n(2), n(5), n(1)], o = s, void 0 !== (r = \"function\" == typeof o ? o.apply(e, a) : o) && (t.exports = r);}(0, function (t, e, n, o, a) {\"use strict\";Object.defineProperty(e, \"__esModule\", { value: !0 });var r = function (t) {return t && t.__esModule ? t : { default: t };}(a);e.default = { name: \"bm-transit\", mixins: [(0, r.default)(\"search\")], props: { location: { type: [Object, String] }, start: { type: [Object, String] }, end: { type: [Object, String] }, panel: { type: Boolean, default: !0 }, policy: { type: String }, pageCapacity: { type: Number }, autoViewport: { type: Boolean }, selectFirstResult: { type: Boolean } }, watch: { location: { handler: function handler(t) {var e = this.originInstance,n = this.map;e.setLocation(t || n);}, deep: !0 }, start: { handler: function handler(t) {var e = this.originInstance,n = this.end,i = this.BMap;e.search((0, o.getPosition)(i, t), (0, o.getPosition)(i, n));}, deep: !0 }, end: { handler: function handler(t) {var e = this.originInstance,n = this.start,i = this.BMap;e.search((0, o.getPosition)(i, n), (0, o.getPosition)(i, t));}, deep: !0 }, panel: function panel() {this.reload();}, policy: function policy(t) {this.originInstance.setPolicy(i[t]);}, pageCapacity: function pageCapacity(t) {this.originInstance && this.originInstance.setPageCapacity(t);}, autoViewport: function autoViewport(t) {this.originInstance && (t ? this.originInstance.enableAutoViewport() : this.originInstance.disableAutoViewport());}, selectFirstResult: function selectFirstResult() {this.reload();}, highlightMode: function highlightMode() {this.reload();} }, methods: { search: function search(t, e) {this.originInstance.search(t, e);}, load: function load() {var t = this,e = this.map,a = this.BMap,r = this.location,s = this.policy,l = this.pageCapacity,c = this.selectFirstResult,u = this.autoViewport,h = this.highlightMode,p = this.search,d = this.start,f = this.end,m = this.originInstance,g = r ? (0, o.isPoint)(r) ? (0, n.createPoint)(a, r) : r : e,y = this.originInstance = new a.TransitRoute(g, { renderOptions: { map: e, panel: this.$el, selectFirstResult: c, autoViewport: u, highlightMode: h }, policy: i[s], pageCapacity: l, onSearchComplete: function onSearchComplete(e) {m && m !== y && m.clearResults(), t.$emit(\"searchcomplete\", e);}, onMarkersSet: function onMarkersSet(e) {t.$emit(\"markersset\", e);}, onInfoHtmlSet: function onInfoHtmlSet(e) {t.$emit(\"infohtmlset\", e);}, onPolylinesSet: function onPolylinesSet(e) {t.$emit(\"polylinesset\", e);}, onResultsHtmlSet: function onResultsHtmlSet(e) {t.$emit(\"resultshtmlset\", e);} });p((0, o.isPoint)(d) ? (0, n.createPoint)(a, d) : d, (0, o.isPoint)(f) ? (0, n.createPoint)(a, f) : f);} } }, t.exports = e.default;});}).call(e, n(3));}, function (t, e, n) {var i, o, a;!function (r, s) {o = [t, e, n(2), n(5), n(1)], i = s, void 0 !== (a = \"function\" == typeof i ? i.apply(e, o) : i) && (t.exports = a);}(0, function (t, e, n, i, o) {\"use strict\";Object.defineProperty(e, \"__esModule\", { value: !0 });var a = function (t) {return t && t.__esModule ? t : { default: t };}(o);e.default = { name: \"bm-walking\", mixins: [(0, a.default)(\"search\")], props: { location: { type: [Object, String] }, start: { type: [Object, String] }, end: { type: [Object, String] }, panel: { type: Boolean, default: !0 }, pageCapacity: { type: Number }, autoViewport: { type: Boolean }, selectFirstResult: { type: Boolean } }, watch: { location: { handler: function handler(t) {var e = this.originInstance,n = this.map;e.setLocation(t || n);}, deep: !0 }, start: { handler: function handler(t) {var e = this.originInstance,n = this.end,o = this.BMap;e.search((0, i.getPosition)(o, t), (0, i.getPosition)(o, n));}, deep: !0 }, end: { handler: function handler(t) {var e = this.originInstance,n = this.start,o = this.BMap;e.search((0, i.getPosition)(o, n), (0, i.getPosition)(o, t));}, deep: !0 }, panel: function panel() {this.reload();}, autoViewport: function autoViewport(t) {this.reload();}, selectFirstResult: function selectFirstResult(t) {this.reload();}, highlightMode: function highlightMode() {this.reload();} }, methods: { search: function search(t, e) {this.originInstance.search(t, e);}, load: function load() {var t = this,e = this.map,o = this.BMap,a = this.location,r = this.selectFirstResult,s = this.autoViewport,l = this.highlightMode,c = this.search,u = this.start,h = this.end,p = this.originInstance,d = a ? (0, i.isPoint)(a) ? (0, n.createPoint)(o, a) : a : e,f = this.originInstance = new o.WalkingRoute(d, { renderOptions: { map: e, panel: this.$el, selectFirstResult: r, autoViewport: s, highlightMode: l }, onSearchComplete: function onSearchComplete(e) {p && p !== f && p.clearResults(), t.$emit(\"searchcomplete\", e);}, onMarkersSet: function onMarkersSet(e) {t.$emit(\"markersset\", e);}, onInfoHtmlSet: function onInfoHtmlSet(e) {t.$emit(\"infohtmlset\", e);}, onPolylinesSet: function onPolylinesSet(e) {t.$emit(\"polylinesset\", e);}, onResultsHtmlSet: function onResultsHtmlSet(e) {t.$emit(\"resultshtmlset\", e);} });c((0, i.isPoint)(u) ? (0, n.createPoint)(o, u) : u, (0, i.isPoint)(h) ? (0, n.createPoint)(o, h) : h);} } }, t.exports = e.default;});}, function (t, e, n) {!function (e, n) {t.exports = n();}(0, function () {function t(t, n) {try {BMap;} catch (t) {throw Error(\"Baidu Map JS API is not ready yet!\");}var i = e(t),o = new BMap.Polyline(i, n);return o.addEventListener(\"lineupdate\", function () {this.isEditing && this.enableEditing();}), o.cornerPoints = t, o.editMarkers = [], o.enableEditing = function () {var t = this;if (t.map) {t.disableEditing();for (var n = 0; n < t.cornerPoints.length; n++) {var i = new BMap.Marker(t.cornerPoints[n], { icon: new BMap.Icon(\"http://api.map.baidu.com/library/CurveLine/1.5/src/circle.png\", new BMap.Size(16, 16)), enableDragging: !0, raiseOnDrag: !0 });i.addEventListener(\"dragend\", function () {t.cornerPoints.length = 0;for (var n = 0; n < t.editMarkers.length; n++) {t.cornerPoints.push(t.editMarkers[n].getPosition());}var i = e(t.cornerPoints);t.setPath(i);}), i.index = n, t.editMarkers.push(i), t.map.addOverlay(i);}}t.isEditing = !0;}, o.disableEditing = function () {this.isEditing = !1;for (var t = 0; t < this.editMarkers.length; t++) {this.map.removeOverlay(this.editMarkers[t]), this.editMarkers[t] = null;}this.editMarkers.length = 0;}, o.getPath = function () {return i;}, o;}function e(t) {for (var e = [], i = 0; i < t.length - 1; i++) {var o = n(t[i], t[i + 1]);o && o.length > 0 && (e = e.concat(o));}return e;}function n(t, e) {var n = [];if (!(t && e && t instanceof BMap.Point && e instanceof BMap.Point)) return null;var i,o,a,r,s,l,c = function c(t) {return 1 - 2 * t + t * t;},u = function u(t) {return 2 * t - 2 * t * t;},h = function h(t) {return t * t;},p = 0,d = 0;if (void 0 === e) return void (void 0 !== n && (n = []));var f = parseFloat(t.lat),m = parseFloat(e.lat),g = parseFloat(t.lng),y = parseFloat(e.lng);for (y > g && parseFloat(y - g) > 180 && g < 0 && (g = parseFloat(360 + g)), g > y && parseFloat(g - y) > 180 && y < 0 && (y = parseFloat(360 + y)), 0, l = 0, m == f ? (i = 0, o = g - y) : y == g ? (i = Math.PI / 2, o = f - m) : (i = Math.atan((m - f) / (y - g)), o = (m - f) / Math.sin(i)), 0 == l && (l = i + Math.PI / 5), a = o / 2, s = a * Math.cos(l) + g, r = a * Math.sin(l) + f, p = 0; p < 31; p++) {n.push(new BMap.Point(g * c(d) + s * u(d) + y * h(d), f * c(d) + r * u(d) + m * h(d))), d += 1 / 30;}return n;}return t;});}, function (t, e, n) {!function (e, n) {t.exports = n();}(0, function () {function t(t, e, n) {var i,o,a = t.prototype,r = new Function();r.prototype = e.prototype, o = t.prototype = new r();for (i in a) {o[i] = a[i];}t.prototype.constructor = t, t.superClass = e.prototype, \"string\" == typeof n && (o._className = n);}var e = function () {var t = function t(_t) {var e = { data: [], heatmap: _t };this.max = 1, this.get = function (t) {return e[t];}, this.set = function (t, n) {e[t] = n;};};t.prototype = { addDataPoint: function addDataPoint(t, e) {if (!(t < 0 || e < 0)) {var n = this,i = n.get(\"heatmap\"),o = n.get(\"data\");if (o[t] || (o[t] = []), o[t][e] || (o[t][e] = 0), o[t][e] += arguments.length < 3 ? 1 : arguments[2], n.set(\"data\", o), n.max < o[t][e]) return i.get(\"actx\").clearRect(0, 0, i.get(\"width\"), i.get(\"height\")), void n.setDataSet({ max: o[t][e], data: o }, !0);i.drawAlpha(t, e, o[t][e], !0);}}, setDataSet: function setDataSet(t, e) {var n = this,i = n.get(\"heatmap\"),o = [],a = t.data,r = a.length;if (i.clear(), this.max = t.max, i.get(\"legend\") && i.get(\"legend\").update(t.max), null != e && e) {for (var s in a) {if (void 0 !== s) for (var l in a[s]) {void 0 !== l && i.drawAlpha(s, l, a[s][l], !1);}}} else for (; r--;) {var c = a[r];i.drawAlpha(c.x, c.y, c.count, !1), o[c.x] || (o[c.x] = []), o[c.x][c.y] || (o[c.x][c.y] = 0), o[c.x][c.y] = c.count;}i.colorize(), this.set(\"data\", a);}, exportDataSet: function exportDataSet() {var t = this,e = t.get(\"data\"),n = [];for (var i in e) {if (void 0 !== i) for (var o in e[i]) {void 0 !== o && n.push({ x: parseInt(i, 10), y: parseInt(o, 10), count: e[i][o] });}}return { max: t.max, data: n };}, generateRandomDataSet: function generateRandomDataSet(t) {var e = this.get(\"heatmap\"),n = e.get(\"width\"),i = e.get(\"height\"),o = {},a = Math.floor(1e3 * Math.random() + 1);o.max = a;for (var r = []; t--;) {r.push({ x: Math.floor(Math.random() * n + 1), y: Math.floor(Math.random() * i + 1), count: Math.floor(Math.random() * a + 1) });}o.data = r, this.setDataSet(o);} };var e = function e(t) {this.config = t;var e = { element: null, labelsEl: null, gradientCfg: null, ctx: null };this.get = function (t) {return e[t];}, this.set = function (t, n) {e[t] = n;}, this.init();};e.prototype = { init: function init() {var t,e,n = this,i = n.config,o = i.title || \"Legend\",a = i.position,r = i.offset || 10,s = (i.gradient, document.createElement(\"ul\")),l = \"\";n.processGradientObject(), a.indexOf(\"t\") > -1 ? l += \"top:\" + r + \"px;\" : l += \"bottom:\" + r + \"px;\", a.indexOf(\"l\") > -1 ? l += \"left:\" + r + \"px;\" : l += \"right:\" + r + \"px;\", t = document.createElement(\"div\"), t.style.cssText = \"border-radius:5px;position:absolute;\" + l + \"font-family:Helvetica; width:256px;z-index:10000000000; background:rgba(255,255,255,1);padding:10px;border:1px solid black;margin:0;\", t.innerHTML = \"<h3 style='padding:0;margin:0;text-align:center;font-size:16px;'>\" + o + \"</h3>\", s.style.cssText = \"position:relative;font-size:12px;display:block;list-style:none;list-style-type:none;margin:0;height:15px;\", e = document.createElement(\"div\"), e.style.cssText = [\"position:relative;display:block;width:256px;height:15px;border-bottom:1px solid black; background-image:url(\", n.createGradientImage(), \");\"].join(\"\"), t.appendChild(s), t.appendChild(e), n.set(\"element\", t), n.set(\"labelsEl\", s), n.update(1);}, processGradientObject: function processGradientObject() {var t = this,e = this.config.gradient,n = [];for (var i in e) {e.hasOwnProperty(i) && n.push({ stop: i, value: e[i] });}n.sort(function (t, e) {return t.stop - e.stop;}), n.unshift({ stop: 0, value: \"rgba(0,0,0,0)\" }), t.set(\"gradientArr\", n);}, createGradientImage: function createGradientImage() {var t,e = this,n = e.get(\"gradientArr\"),i = n.length,o = document.createElement(\"canvas\"),a = o.getContext(\"2d\");o.width = \"256\", o.height = \"15\", t = a.createLinearGradient(0, 5, 256, 10);for (var r = 0; r < i; r++) {t.addColorStop(1 / (i - 1) * r, n[r].value);}a.fillStyle = t, a.fillRect(0, 5, 256, 10), a.strokeStyle = \"black\", a.beginPath();for (var r = 0; r < i; r++) {a.moveTo(.5 + (1 / (i - 1) * r * 256 >> 0), 0), a.lineTo(.5 + (1 / (i - 1) * r * 256 >> 0), 0 == r ? 15 : 5);}return a.moveTo(255.5, 0), a.lineTo(255.5, 15), a.moveTo(255.5, 4.5), a.lineTo(0, 4.5), a.stroke(), e.set(\"ctx\", a), o.toDataURL();}, getElement: function getElement() {return this.get(\"element\");}, update: function update(t) {for (var e, n, i = this, o = i.get(\"gradientArr\"), a = i.get(\"ctx\"), r = i.get(\"labelsEl\"), s = \"\", l = 0; l < o.length; l++) {e = t * o[l].stop >> 0, n = a.measureText(e).width / 2 >> 0, 0 == l && (n = 0), l == o.length - 1 && (n *= 2), s += '<li style=\"position:absolute;left:' + (((1 / (o.length - 1) * l * 256 || 0) >> 0) - n + .5) + 'px\">' + e + \"</li>\";}r.innerHTML = s;} };var n = function n(e) {var n = { radius: 40, element: {}, canvas: {}, acanvas: {}, ctx: {}, actx: {}, legend: null, visible: !0, width: 0, height: 0, max: !1, gradient: !1, opacity: 180, premultiplyAlpha: !1, bounds: { l: 1e3, r: 0, t: 1e3, b: 0 }, debug: !1 };this.store = new t(this), this.get = function (t) {return n[t];}, this.set = function (t, e) {n[t] = e;}, this.configure(e), this.init();};return n.prototype = { configure: function configure(t) {var n = this;if (n.set(\"radius\", t.radius || 40), n.set(\"element\", t.element instanceof Object ? t.element : document.getElementById(t.element)), n.set(\"visible\", null == t.visible || t.visible), n.set(\"max\", t.max || !1), n.set(\"gradient\", t.gradient || { .45: \"rgb(0,0,255)\", .55: \"rgb(0,255,255)\", .65: \"rgb(0,255,0)\", .95: \"yellow\", 1: \"rgb(255,0,0)\" }), n.set(\"opacity\", parseInt(255 / (100 / t.opacity), 10) || 180), n.set(\"width\", t.width || 0), n.set(\"height\", t.height || 0), n.set(\"debug\", t.debug), t.legend) {var i = t.legend;i.gradient = n.get(\"gradient\"), n.set(\"legend\", new e(i));}}, resize: function resize() {var t = this,e = t.get(\"element\"),n = t.get(\"canvas\"),i = t.get(\"acanvas\");n.width = i.width = t.get(\"width\") || e.style.width.replace(/px/, \"\") || t.getWidth(e), this.set(\"width\", n.width), n.height = i.height = t.get(\"height\") || e.style.height.replace(/px/, \"\") || t.getHeight(e), this.set(\"height\", n.height);}, init: function init() {var t = this,e = document.createElement(\"canvas\"),n = document.createElement(\"canvas\"),i = e.getContext(\"2d\"),o = n.getContext(\"2d\"),a = t.get(\"element\");t.initColorPalette(), t.set(\"canvas\", e), t.set(\"ctx\", i), t.set(\"acanvas\", n), t.set(\"actx\", o), t.resize(), e.style.cssText = n.style.cssText = \"position:absolute;top:0;left:0;z-index:10000000;\", t.get(\"visible\") || (e.style.display = \"none\"), a.appendChild(e), t.get(\"legend\") && a.appendChild(t.get(\"legend\").getElement()), t.get(\"debug\") && document.body.appendChild(n), o.shadowOffsetX = 15e3, o.shadowOffsetY = 15e3, o.shadowBlur = 15;}, initColorPalette: function initColorPalette() {var t,e,n,i = this,o = document.createElement(\"canvas\"),a = i.get(\"gradient\");o.width = \"1\", o.height = \"256\", t = o.getContext(\"2d\"), e = t.createLinearGradient(0, 0, 1, 256), n = t.getImageData(0, 0, 1, 1), n.data[0] = n.data[3] = 64, n.data[1] = n.data[2] = 0, t.putImageData(n, 0, 0), n = t.getImageData(0, 0, 1, 1), i.set(\"premultiplyAlpha\", n.data[0] < 60 || n.data[0] > 70);for (var r in a) {e.addColorStop(r, a[r]);}t.fillStyle = e, t.fillRect(0, 0, 1, 256), i.set(\"gradient\", t.getImageData(0, 0, 1, 256).data);}, getWidth: function getWidth(t) {var e = t.offsetWidth;return t.style.paddingLeft && (e += t.style.paddingLeft), t.style.paddingRight && (e += t.style.paddingRight), e;}, getHeight: function getHeight(t) {var e = t.offsetHeight;return t.style.paddingTop && (e += t.style.paddingTop), t.style.paddingBottom && (e += t.style.paddingBottom), e;}, colorize: function colorize(t, e) {var n,i,o,a,r,s,l,c,u,h = this,p = h.get(\"width\"),d = h.get(\"radius\"),f = h.get(\"height\"),m = h.get(\"actx\"),g = h.get(\"ctx\"),y = 3 * d,v = h.get(\"premultiplyAlpha\"),_ = h.get(\"gradient\"),b = h.get(\"opacity\"),x = h.get(\"bounds\");null != t && null != e ? (t + y > p && (t = p - y), t < 0 && (t = 0), e < 0 && (e = 0), e + y > f && (e = f - y), n = t, i = e, a = t + y, o = e + y) : (n = x.l < 0 ? 0 : x.l, a = x.r > p ? p : x.r, i = x.t < 0 ? 0 : x.t, o = x.b > f ? f : x.b), r = m.getImageData(n, i, a - n, o - i), s = r.data.length;for (var w = 3; w < s; w += 4) {l = r.data[w], c = 4 * l, c && (u = l < b ? l : b, r.data[w - 3] = _[c], r.data[w - 2] = _[c + 1], r.data[w - 1] = _[c + 2], v && (r.data[w - 3] /= 255 / u, r.data[w - 2] /= 255 / u, r.data[w - 1] /= 255 / u), r.data[w] = u);}g.putImageData(r, n, i);}, drawAlpha: function drawAlpha(t, e, n, i) {var o = this,a = o.get(\"radius\"),r = o.get(\"actx\"),s = (o.get(\"max\"), o.get(\"bounds\")),l = t - 1.5 * a >> 0,c = e - 1.5 * a >> 0,u = t + 1.5 * a >> 0,h = e + 1.5 * a >> 0;r.shadowColor = \"rgba(0,0,0,\" + (n ? n / o.store.max : \"0.1\") + \")\", r.shadowOffsetX = 15e3, r.shadowOffsetY = 15e3, r.shadowBlur = 15, r.beginPath(), r.arc(t - 15e3, e - 15e3, a, 0, 2 * Math.PI, !0), r.closePath(), r.fill(), i ? o.colorize(l, c) : (l < s.l && (s.l = l), c < s.t && (s.t = c), u > s.r && (s.r = u), h > s.b && (s.b = h));}, toggleDisplay: function toggleDisplay() {var t = this,e = t.get(\"visible\"),n = t.get(\"canvas\");n.style.display = e ? \"none\" : \"block\", t.set(\"visible\", !e);}, getImageData: function getImageData() {return this.get(\"canvas\").toDataURL();}, clear: function clear() {var t = this,e = t.get(\"width\"),n = t.get(\"height\");t.store.set(\"data\", []), t.get(\"ctx\").clearRect(0, 0, e, n), t.get(\"actx\").clearRect(0, 0, e, n);}, cleanup: function cleanup() {var t = this;t.get(\"element\").removeChild(t.get(\"canvas\"));} }, { create: function create(t) {return new n(t);}, util: { mousePosition: function mousePosition(t) {var e, n;if (t.layerX ? (e = t.layerX, n = t.layerY) : t.offsetX && (e = t.offsetX, n = t.offsetY), void 0 !== e) return [e, n];} } };}(),n = function n(e) {try {BMap;} catch (t) {throw Error(\"Baidu Map JS API is not ready yet!\");}if (!n._isExtended) {n._isExtended = !0, t(n, BMap.Overlay, \"HeatmapOverlay\");var i = new n(e);this.__proto__ = i.__proto__;}this.conf = e, this.heatmap = null, this.latlngs = [], this.bounds = null, this._moveendHandler = this._moveendHandler.bind(this);};return n.prototype.initialize = function (t) {this._map = t;var n = document.createElement(\"div\");return n.style.position = \"absolute\", n.style.top = 0, n.style.left = 0, n.style.border = 0, n.style.width = this._map.getSize().width + \"px\", n.style.height = this._map.getSize().height + \"px\", this.conf.element = n, t.getPanes().mapPane.appendChild(n), this.heatmap = e.create(this.conf), this._div = n, n;}, n.prototype.draw = function () {var t = this._map.getBounds();if (!t.equals(this.bounds)) {this.bounds = t;var e = this._map.pointToOverlayPixel(t.getNorthEast()),n = this._map.pointToOverlayPixel(t.getSouthWest());if (e && n) {var i = e.y,o = n.x,a = n.y - e.y,r = e.x - n.x;if (this.conf.element.style.left = o + \"px\", this.conf.element.style.top = i + \"px\", this.conf.element.style.width = r + \"px\", this.conf.element.style.height = a + \"px\", this.heatmap.store.get(\"heatmap\").resize(), this.latlngs.length > 0) {this.heatmap.clear();for (var s = this.latlngs.length, l = { max: this.heatmap.store.max, data: [] }; s--;) {var c = this.latlngs[s].latlng;if (t.containsPoint(c)) {var u = this._map.pointToOverlayPixel(c),h = new BMap.Pixel(u.x - o, u.y - i),p = this.pixelTransform(h);l.data.push({ x: p.x, y: p.y, count: this.latlngs[s].c });}}this.heatmap.store.setDataSet(l);}}}}, n.prototype.pixelTransform = function (t) {for (var e = this.heatmap.get(\"width\"), n = this.heatmap.get(\"height\"); t.x < 0;) {t.x += e;}for (; t.x > e;) {t.x -= e;}for (; t.y < 0;) {t.y += n;}for (; t.y > n;) {t.y -= n;}return t.x = t.x >> 0, t.y = t.y >> 0, t;}, n.prototype._moveendHandler = function (t) {this.setDataSet(this._data), delete this._data, this._map.removeEventListener(\"moveend\", this._moveendHandler);}, n.prototype.setDataSet = function (t) {if (this._map) {var e = this._map.getBounds(),n = this._map.pointToOverlayPixel(e.getNorthEast()),i = this._map.pointToOverlayPixel(e.getSouthWest());n && i || (this._data = t, this._map.addEventListener(\"moveend\", this._moveendHandler));var o = { max: t.max, data: [] },a = t.data,r = a.length;for (this.latlngs = []; r--;) {var s = new BMap.Point(a[r].lng, a[r].lat);if (this.latlngs.push({ latlng: s, c: a[r].count }), e.containsPoint(s)) {var l = this._map.pointToOverlayPixel(s),c = this._map.pointToOverlayPixel(e.getSouthWest()).x,u = this._map.pointToOverlayPixel(e.getNorthEast()).y,h = new BMap.Pixel(l.x - c, l.y - u),p = this.pixelTransform(h);o.data.push({ x: p.x, y: p.y, count: a[r].count });}}this.heatmap.clear(), this.heatmap.store.setDataSet(o);}}, n.prototype.addDataPoint = function (t, e, n) {var i = new BMap.Point(t, e),o = this.pixelTransform(this._map.pointToOverlayPixel(i));this.heatmap.store.addDataPoint(o.x, o.y, n), this.latlngs.push({ latlng: i, c: n });}, n.prototype.toggle = function () {this.heatmap.toggleDisplay();}, n;});}, function (t, e, n) {!function (e, n) {t.exports = n();}(0, function () {function t(t, e) {this._point = t, this._html = e;}function e() {t.prototype = new BMap.Overlay(), t.prototype.initialize = function (t) {var e = this._div = n.dom.create(\"div\", { style: \"border:solid 1px #ccc;width:auto;min-width:50px;text-align:center;position:absolute;background:#fff;color:#000;font-size:12px;border-radius: 10px;padding:5px;white-space: nowrap;\" });return e.innerHTML = this._html, t.getPanes().floatPane.appendChild(e), this._map = t, e;}, t.prototype.draw = function () {this.setPosition(this.lushuMain._marker.getPosition(), this.lushuMain._marker.getIcon().size);}, n.object.extend(t.prototype, { setPosition: function setPosition(t, e) {var i = this._map.pointToOverlayPixel(t),o = n.dom.getStyle(this._div, \"width\"),a = n.dom.getStyle(this._div, \"height\"),r = parseInt(this._div.clientWidth || o, 10);parseInt(this._div.clientHeight || a, 10);this._div.style.left = i.x - r / 2 + \"px\", this._div.style.bottom = -(i.y - e.height) + \"px\";}, setHtml: function setHtml(t) {this._div.innerHTML = t;}, setRelatedClass: function setRelatedClass(t) {this.lushuMain = t;} });}var n = {};n.dom = {}, n.dom.g = function (t) {return \"string\" == typeof t || t instanceof String ? document.getElementById(t) : t && t.nodeName && (1 == t.nodeType || 9 == t.nodeType) ? t : null;}, n.g = n.G = n.dom.g, n.lang = n.lang || {}, n.lang.isString = function (t) {return \"[object String]\" == Object.prototype.toString.call(t);}, n.isString = n.lang.isString, n.dom._g = function (t) {return n.lang.isString(t) ? document.getElementById(t) : t;}, n._g = n.dom._g, n.dom.getDocument = function (t) {return t = n.dom.g(t), 9 == t.nodeType ? t : t.ownerDocument || t.document;}, n.browser = n.browser || {}, n.browser.ie = n.ie = /msie (\\d+\\.\\d+)/i.test(navigator.userAgent) ? document.documentMode || +RegExp.$1 : void 0, n.dom.getComputedStyle = function (t, e) {t = n.dom._g(t);var i,o = n.dom.getDocument(t);return o.defaultView && o.defaultView.getComputedStyle && (i = o.defaultView.getComputedStyle(t, null)) ? i[e] || i.getPropertyValue(e) : \"\";}, n.dom._styleFixer = n.dom._styleFixer || {}, n.dom._styleFilter = n.dom._styleFilter || [], n.dom._styleFilter.filter = function (t, e, i) {for (var o, a = 0, r = n.dom._styleFilter; o = r[a]; a++) {(o = o[i]) && (e = o(t, e));}return e;}, n.string = n.string || {}, n.string.toCamelCase = function (t) {return t.indexOf(\"-\") < 0 && t.indexOf(\"_\") < 0 ? t : t.replace(/[-_][^-_]/g, function (t) {return t.charAt(1).toUpperCase();});}, n.dom.getStyle = function (t, e) {var i = n.dom;t = i.g(t), e = n.string.toCamelCase(e);var o = t.style[e] || (t.currentStyle ? t.currentStyle[e] : \"\") || i.getComputedStyle(t, e);if (!o) {var a = i._styleFixer[e];a && (o = a.get ? a.get(t) : n.dom.getStyle(t, a));}return (a = i._styleFilter) && (o = a.filter(e, o, \"get\")), o;}, n.getStyle = n.dom.getStyle, n.dom._NAME_ATTRS = function () {var t = { cellpadding: \"cellPadding\", cellspacing: \"cellSpacing\", colspan: \"colSpan\", rowspan: \"rowSpan\", valign: \"vAlign\", usemap: \"useMap\", frameborder: \"frameBorder\" };return n.browser.ie < 8 ? (t.for = \"htmlFor\", t.class = \"className\") : (t.htmlFor = \"for\", t.className = \"class\"), t;}(), n.dom.setAttr = function (t, e, i) {return t = n.dom.g(t), \"style\" == e ? t.style.cssText = i : (e = n.dom._NAME_ATTRS[e] || e, t.setAttribute(e, i)), t;}, n.setAttr = n.dom.setAttr, n.dom.setAttrs = function (t, e) {t = n.dom.g(t);for (var i in e) {n.dom.setAttr(t, i, e[i]);}return t;}, n.setAttrs = n.dom.setAttrs, n.dom.create = function (t, e) {var i = document.createElement(t),o = e || {};return n.dom.setAttrs(i, o);}, n.object = n.object || {}, n.extend = n.object.extend = function (t, e) {for (var n in e) {e.hasOwnProperty(n) && (t[n] = e[n]);}return t;};var i = function i(t, e, n) {try {BMap;} catch (t) {throw Error(\"Baidu Map JS API is not ready yet!\");}!e || e.length < 1 || (this._map = t, this._path = e, this.i = 0, this._setTimeoutQuene = [], this._projection = this._map.getMapType().getProjection(), this._opts = { icon: null, speed: 4e3, defaultContent: \"\", showInfoWindow: !1 }, this._setOptions(n), this._rotation = 0, !this._opts.icon instanceof BMap.Icon && (this._opts.icon = defaultIcon));};return i.prototype._setOptions = function (t) {if (t) for (var e in t) {t.hasOwnProperty(e) && (this._opts[e] = t[e]);}}, i.prototype.start = function () {var t = this,e = t._path.length;if (this._opts.onstart && this._opts.onstart(t), t.i && t.i < e - 1) {if (!t._fromPause) return;t._fromStop || t._moveNext(++t.i);} else !t._marker && t._addMarker(), t._timeoutFlag = setTimeout(function () {!t._overlay && t._addInfoWin(), t._moveNext(t.i);}, 400);this._fromPause = !1, this._fromStop = !1;}, i.prototype.stop = function () {this.i = 0, this._fromStop = !0, clearInterval(this._intervalFlag), this._clearTimeout();for (var t = 0, e = this._opts.landmarkPois, n = e.length; t < n; t++) {e[t].bShow = !1;}this._opts.onstop && this._opts.onstop(this);}, i.prototype.pause = function () {clearInterval(this._intervalFlag), this._fromPause = !0, this._clearTimeout(), this._opts.onpause && this._opts.onpause(this);}, i.prototype.hideInfoWindow = function () {this._opts.showInfoWindow = !1, this._overlay && (this._overlay._div.style.visibility = \"hidden\");}, i.prototype.showInfoWindow = function () {this._opts.showInfoWindow = !0, this._overlay && (this._overlay._div.style.visibility = \"visible\");}, i.prototype.dispose = function () {clearInterval(this._intervalFlag), this._setTimeoutQuene && this._clearTimeout(), this._map && (this._map.removeOverlay(this._overlay), this._map.removeOverlay(this._marker));}, n.object.extend(i.prototype, { _addMarker: function _addMarker(t) {this._marker && (this.stop(), this._map.removeOverlay(this._marker), clearTimeout(this._timeoutFlag)), this._overlay && this._map.removeOverlay(this._overlay);var e = new BMap.Marker(this._path[0]);this._opts.icon && e.setIcon(this._opts.icon), this._map.addOverlay(e), e.setAnimation(BMAP_ANIMATION_DROP), this._marker = e;}, _addInfoWin: function _addInfoWin() {var n = this;!t.prototype.initialize && e();var i = new t(n._marker.getPosition(), n._opts.defaultContent);i.setRelatedClass(this), this._overlay = i, this._map.addOverlay(i), this._opts.showInfoWindow ? this.showInfoWindow() : this.hideInfoWindow();}, _getMercator: function _getMercator(t) {return this._map.getMapType().getProjection().lngLatToPoint(t);}, _getDistance: function _getDistance(t, e) {return Math.sqrt(Math.pow(t.x - e.x, 2) + Math.pow(t.y - e.y, 2));}, _move: function _move(t, e, n) {var i = this,o = 0,a = this._opts.speed / 100,r = this._projection.lngLatToPoint(t),s = this._projection.lngLatToPoint(e),l = Math.round(i._getDistance(r, s) / a);if (l < 1) return void i._moveNext(++i.i);i._intervalFlag = setInterval(function () {if (o >= l) {if (clearInterval(i._intervalFlag), i.i > i._path.length) return;i._moveNext(++i.i);} else {o++;var a = n(r.x, s.x, o, l),c = n(r.y, s.y, o, l),u = i._projection.pointToLngLat(new BMap.Pixel(a, c));if (1 == o) {var h = null;i.i - 1 >= 0 && (h = i._path[i.i - 1]), 1 == i._opts.enableRotation && i.setRotation(h, t, e), i._opts.autoView && (i._map.getBounds().containsPoint(u) || i._map.setCenter(u));}i._marker.setPosition(u), i._setInfoWin(u);}}, 10);}, setRotation: function setRotation(t, e, n) {var i = this,o = 0;if (e = i._map.pointToPixel(e), n = i._map.pointToPixel(n), n.x != e.x) {var a = (n.y - e.y) / (n.x - e.x);o = 360 * Math.atan(a) / (2 * Math.PI), o = n.x < e.x ? 90 - o + 90 : -o, i._marker.setRotation(-o);} else {var r = n.y - e.y,s = 0;s = r > 0 ? -1 : 1, i._marker.setRotation(90 * -s);}}, linePixellength: function linePixellength(t, e) {return Math.sqrt(Math.abs(t.x - e.x) * Math.abs(t.x - e.x) + Math.abs(t.y - e.y) * Math.abs(t.y - e.y));}, pointToPoint: function pointToPoint(t, e) {return Math.abs(t.x - e.x) * Math.abs(t.x - e.x) + Math.abs(t.y - e.y) * Math.abs(t.y - e.y);}, _moveNext: function _moveNext(t) {var e = this;t < this._path.length - 1 ? e._move(e._path[t], e._path[t + 1], e._tween.linear) : e.stop();}, _setInfoWin: function _setInfoWin(t) {var e = this;e._overlay.setPosition(t, e._marker.getIcon().size);var n = e._troughPointIndex(t);-1 != n ? (clearInterval(e._intervalFlag), e._overlay.setHtml(e._opts.landmarkPois[n].html), e._overlay.setPosition(t, e._marker.getIcon().size), e._pauseForView(n)) : e._overlay.setHtml(e._opts.defaultContent);}, _pauseForView: function _pauseForView(t) {var e = this,n = setTimeout(function () {e._moveNext(++e.i);}, 1e3 * e._opts.landmarkPois[t].pauseTime);e._setTimeoutQuene.push(n);}, _clearTimeout: function _clearTimeout() {for (var t in this._setTimeoutQuene) {clearTimeout(this._setTimeoutQuene[t]);}this._setTimeoutQuene.length = 0;}, _tween: { linear: function linear(t, e, n, i) {return (e - t) * n / i + t;} }, _troughPointIndex: function _troughPointIndex(t) {for (var e = this._opts.landmarkPois, n = 0, i = e.length; n < i; n++) {if (!e[n].bShow && this._map.getDistance(new BMap.Point(e[n].lng, e[n].lat), t) < 10) return e[n].bShow = !0, n;}return -1;} }), i;});}, function (t, e, n) {(function (e) {var i, o;!function (e, n) {t.exports = n();}(0, function () {\"use strict\";function t(t) {this._markerClusterer = t, this._map = t.getMap(), this._minClusterSize = t.getMinClusterSize(), this._isAverageCenter = t.isAverageCenter(), this._center = null, this._markers = [], this._gridBounds = null, this._isReal = !1, this._clusterMarker = new s(this._center, this._markers.length, { styles: this._markerClusterer.getStyles() });}var a = \"undefined\" != typeof window ? window : void 0 !== e ? e : this,r = function (t, e) {return e = { exports: {} }, t(e, e.exports, a), e.exports;}(function (t, e, a) {!function (a, r) {\"object\" == typeof e ? t.exports = r() : (i = r, void 0 !== (o = \"function\" == typeof i ? i.call(e, n, e, t) : i) && (t.exports = o));}(0, function () {var t,e = t = e || { version: \"1.3.8\" },n = {};e.guid = \"$BAIDU$\", n[e.guid] = n[e.guid] || {}, e.dom = e.dom || {}, e.dom.g = function (t) {return \"string\" == typeof t || t instanceof String ? document.getElementById(t) : t && t.nodeName && (1 == t.nodeType || 9 == t.nodeType) ? t : null;}, e.g = e.G = e.dom.g, e.dom.getDocument = function (t) {return t = e.dom.g(t), 9 == t.nodeType ? t : t.ownerDocument || t.document;}, e.lang = e.lang || {}, e.lang.isString = function (t) {return \"[object String]\" == Object.prototype.toString.call(t);}, e.isString = e.lang.isString, e.dom._g = function (t) {return e.lang.isString(t) ? document.getElementById(t) : t;}, e._g = e.dom._g, e.browser = e.browser || {}, /msie (\\d+\\.\\d)/i.test(navigator.userAgent) && (e.browser.ie = e.ie = document.documentMode || +RegExp.$1), e.dom.getComputedStyle = function (t, n) {t = e.dom._g(t);var i,o = e.dom.getDocument(t);return o.defaultView && o.defaultView.getComputedStyle && (i = o.defaultView.getComputedStyle(t, null)) ? i[n] || i.getPropertyValue(n) : \"\";}, e.dom._styleFixer = e.dom._styleFixer || {}, e.dom._styleFilter = e.dom._styleFilter || [], e.dom._styleFilter.filter = function (t, n, i) {for (var o, a = 0, r = e.dom._styleFilter; o = r[a]; a++) {(o = o[i]) && (n = o(t, n));}return n;}, e.string = e.string || {}, e.string.toCamelCase = function (t) {return t.indexOf(\"-\") < 0 && t.indexOf(\"_\") < 0 ? t : t.replace(/[-_][^-_]/g, function (t) {return t.charAt(1).toUpperCase();});}, e.dom.getStyle = function (t, n) {var i = e.dom;t = i.g(t), n = e.string.toCamelCase(n);var o = t.style[n] || (t.currentStyle ? t.currentStyle[n] : \"\") || i.getComputedStyle(t, n);if (!o) {var a = i._styleFixer[n];a && (o = a.get ? a.get(t) : e.dom.getStyle(t, a));}return (a = i._styleFilter) && (o = a.filter(n, o, \"get\")), o;}, e.getStyle = e.dom.getStyle, /opera\\/(\\d+\\.\\d)/i.test(navigator.userAgent) && (e.browser.opera = +RegExp.$1), e.browser.isWebkit = /webkit/i.test(navigator.userAgent), e.browser.isGecko = /gecko/i.test(navigator.userAgent) && !/like gecko/i.test(navigator.userAgent), e.browser.isStrict = \"CSS1Compat\" == document.compatMode, e.dom.getPosition = function (t) {t = e.dom.g(t);var n,i,o = e.dom.getDocument(t),a = e.browser,r = e.dom.getStyle,s = (a.isGecko > 0 && o.getBoxObjectFor && \"absolute\" == r(t, \"position\") && (\"\" === t.style.top || t.style.left), { left: 0, top: 0 }),l = a.ie && !a.isStrict ? o.body : o.documentElement;if (t == l) return s;if (t.getBoundingClientRect) {i = t.getBoundingClientRect(), s.left = Math.floor(i.left) + Math.max(o.documentElement.scrollLeft, o.body.scrollLeft), s.top = Math.floor(i.top) + Math.max(o.documentElement.scrollTop, o.body.scrollTop), s.left -= o.documentElement.clientLeft, s.top -= o.documentElement.clientTop;var c = o.body,u = parseInt(r(c, \"borderLeftWidth\")),h = parseInt(r(c, \"borderTopWidth\"));a.ie && !a.isStrict && (s.left -= isNaN(u) ? 2 : u, s.top -= isNaN(h) ? 2 : h);} else {n = t;do {if (s.left += n.offsetLeft, s.top += n.offsetTop, a.isWebkit > 0 && \"fixed\" == r(n, \"position\")) {s.left += o.body.scrollLeft, s.top += o.body.scrollTop;break;}n = n.offsetParent;} while (n && n != t);for ((a.opera > 0 || a.isWebkit > 0 && \"absolute\" == r(t, \"position\")) && (s.top -= o.body.offsetTop), n = t.offsetParent; n && n != o.body;) {s.left -= n.scrollLeft, a.opera && \"TR\" == n.tagName || (s.top -= n.scrollTop), n = n.offsetParent;}}return s;}, e.event = e.event || {}, e.event._listeners = e.event._listeners || [], e.event.on = function (t, n, i) {n = n.replace(/^on/i, \"\"), t = e.dom._g(t);var o,a = function a(e) {i.call(t, e);},r = e.event._listeners,s = e.event._eventFilter,l = n;return n = n.toLowerCase(), s && s[n] && (o = s[n](t, n, a), l = o.type, a = o.listener), t.addEventListener ? t.addEventListener(l, a, !1) : t.attachEvent && t.attachEvent(\"on\" + l, a), r[r.length] = [t, n, i, a, l], t;}, e.on = e.event.on, function () {var t = n[e.guid];e.lang.guid = function () {return \"TANGRAM__\" + (t._counter++).toString(36);}, t._counter = t._counter || 1;}(), n[e.guid]._instances = n[e.guid]._instances || {}, e.lang.isFunction = function (t) {return \"[object Function]\" == Object.prototype.toString.call(t);}, e.lang.Class = function (t) {this.guid = t || e.lang.guid(), n[e.guid]._instances[this.guid] = this;}, n[e.guid]._instances = n[e.guid]._instances || {}, e.lang.Class.prototype.dispose = function () {delete n[e.guid]._instances[this.guid];for (var t in this) {e.lang.isFunction(this[t]) || delete this[t];}this.disposed = !0;}, e.lang.Class.prototype.toString = function () {return \"[object \" + (this._className || \"Object\") + \"]\";}, e.lang.Event = function (t, e) {this.type = t, this.returnValue = !0, this.target = e || null, this.currentTarget = null;}, e.lang.Class.prototype.addEventListener = function (t, n, i) {if (e.lang.isFunction(n)) {!this.__listeners && (this.__listeners = {});var o,a = this.__listeners;if (\"string\" == typeof i && i) {if (/[^\\w\\-]/.test(i)) throw \"nonstandard key:\" + i;n.hashCode = i, o = i;}0 != t.indexOf(\"on\") && (t = \"on\" + t), \"object\" != typeof a[t] && (a[t] = {}), o = o || e.lang.guid(), n.hashCode = o, a[t][o] = n;}}, e.lang.Class.prototype.removeEventListener = function (t, n) {if (void 0 === n || (!e.lang.isFunction(n) || (n = n.hashCode)) && e.lang.isString(n)) {!this.__listeners && (this.__listeners = {}), 0 != t.indexOf(\"on\") && (t = \"on\" + t);var i = this.__listeners;if (i[t]) if (void 0 !== n) i[t][n] && delete i[t][n];else for (var o in i[t]) {delete i[t][o];}}}, e.lang.Class.prototype.dispatchEvent = function (t, n) {e.lang.isString(t) && (t = new e.lang.Event(t)), !this.__listeners && (this.__listeners = {}), n = n || {};for (var i in n) {t[i] = n[i];}var i,o = this.__listeners,a = t.type;if (t.target = t.target || this, t.currentTarget = this, 0 != a.indexOf(\"on\") && (a = \"on\" + a), e.lang.isFunction(this[a]) && this[a].apply(this, arguments), \"object\" == typeof o[a]) for (i in o[a]) {o[a][i].apply(this, arguments);}return t.returnValue;}, e.lang.inherits = function (t, e, n) {var i,o,a = t.prototype,r = new Function();r.prototype = e.prototype, o = t.prototype = new r();for (i in a) {o[i] = a[i];}t.prototype.constructor = t, t.superClass = e.prototype, \"string\" == typeof n && (o._className = n);}, e.inherits = e.lang.inherits;var i = function i(e, n, o) {try {BMap;} catch (t) {throw Error(\"Baidu Map JS API is not ready yet!\");}t.lang.inherits(i, BMap.Overlay, \"TextIconOverlay\"), this._position = e, this._text = n, this._options = o || {}, this._styles = this._options.styles || [], !this._styles.length && this._setupDefaultStyles();};return i.prototype._setupDefaultStyles = function () {for (var t, e = [53, 56, 66, 78, 90], n = 0; t = e[n]; n++) {this._styles.push({ url: \"http://api.map.baidu.com/library/TextIconOverlay/1.2/src/images/m\" + n + \".png\", size: new BMap.Size(t, t) });}}, i.prototype.initialize = function (t) {return this._map = t, this._domElement = document.createElement(\"div\"), this._updateCss(), this._updateText(), this._updatePosition(), this._bind(), this._map.getPanes().markerMouseTarget.appendChild(this._domElement), this._domElement;}, i.prototype.draw = function () {this._map && this._updatePosition();}, i.prototype.getText = function () {return this._text;}, i.prototype.setText = function (t) {!t || this._text && this._text.toString() == t.toString() || (this._text = t, this._updateText(), this._updateCss(), this._updatePosition());}, i.prototype.getPosition = function () {return this._position;}, i.prototype.setPosition = function (t) {!t || this._position && this._position.equals(t) || (this._position = t, this._updatePosition());}, i.prototype.getStyleByText = function (t, e) {var n = parseInt(t),i = parseInt(n / 10);return i = Math.max(0, i), i = Math.min(i, e.length - 1), e[i];}, i.prototype._updateCss = function () {if (this._domElement) {var t = this.getStyleByText(this._text, this._styles);this._domElement.style.cssText = this._buildCssText(t);}}, i.prototype._updateText = function () {this._domElement && (this._domElement.innerHTML = this._text);}, i.prototype._updatePosition = function () {if (this._domElement && this._position) {var t = this._domElement.style,e = this._map.pointToOverlayPixel(this._position);e.x -= Math.ceil(parseInt(t.width) / 2), e.y -= Math.ceil(parseInt(t.height) / 2), t.left = e.x + \"px\", t.top = e.y + \"px\";}}, i.prototype._buildCssText = function (e) {var n = e.url,i = e.size,o = e.anchor,a = e.offset,r = e.textColor || \"black\",s = e.textSize || 10,l = [];if (t.browser.ie < 7) l.push('filter:progid:DXImageTransform.Microsoft.AlphaImageLoader(sizingMethod=scale,src=\"' + n + '\");');else {l.push(\"background-image:url(\" + n + \");\");var c = \"0 0\";a instanceof BMap.Size && (c = a.width + \"px \" + a.height + \"px\"), l.push(\"background-position:\" + c + \";\");}return i instanceof BMap.Size && (o instanceof BMap.Size ? (o.height > 0 && o.height < i.height && l.push(\"height:\" + (i.height - o.height) + \"px; padding-top:\" + o.height + \"px;\"), o.width > 0 && o.width < i.width && l.push(\"width:\" + (i.width - o.width) + \"px; padding-left:\" + o.width + \"px;\")) : (l.push(\"height:\" + i.height + \"px; line-height:\" + i.height + \"px;\"), l.push(\"width:\" + i.width + \"px; text-align:center;\"))), l.push(\"cursor:pointer; color:\" + r + \"; position:absolute; font-size:\" + s + \"px; font-family:Arial,sans-serif; font-weight:bold\"), l.join(\"\");}, i.prototype._bind = function () {function e(e, n) {var o = e.srcElement || e.target,a = e.clientX || e.pageX,r = e.clientY || e.pageY;if (e && n && a && r && o) {var s = t.dom.getPosition(i.getContainer());n.pixel = new BMap.Pixel(a - s.left, r - s.top), n.point = i.pixelToPoint(n.pixel);}return n;}if (this._domElement) {var n = this,i = this._map,o = t.lang.Event;t.event.on(this._domElement, \"mouseover\", function (t) {n.dispatchEvent(e(t, new o(\"onmouseover\")));}), t.event.on(this._domElement, \"mouseout\", function (t) {n.dispatchEvent(e(t, new o(\"onmouseout\")));}), t.event.on(this._domElement, \"click\", function (t) {n.dispatchEvent(e(t, new o(\"onclick\")));});}}, i;});}),s = r && \"object\" == typeof r && \"default\" in r ? r.default : r,l = function l(t, e, n) {e = c(e);var i = t.pointToPixel(e.getNorthEast()),o = t.pointToPixel(e.getSouthWest());i.x += n, i.y -= n, o.x -= n, o.y += n;var a = t.pixelToPoint(i),r = t.pixelToPoint(o);return new BMap.Bounds(r, a);},c = function c(t) {var e = u(t.getNorthEast().lng, -180, 180),n = u(t.getSouthWest().lng, -180, 180),i = u(t.getNorthEast().lat, -74, 74),o = u(t.getSouthWest().lat, -74, 74);return new BMap.Bounds(new BMap.Point(n, o), new BMap.Point(e, i));},u = function u(t, e, n) {return e && (t = Math.max(t, e)), n && (t = Math.min(t, n)), t;},h = function h(t) {return \"[object Array]\" === Object.prototype.toString.call(t);},p = function p(t, e) {var n = -1;if (h(e)) if (e.indexOf) n = e.indexOf(t);else for (var i, o = 0; i = e[o]; o++) {if (i === t) {n = o;break;}}return n;},d = function d(t, e) {try {BMap;} catch (t) {throw Error(\"Baidu Map JS API is not ready yet!\");}if (t) {this._map = t, this._markers = [], this._clusters = [];var n = e || {};this._gridSize = n.gridSize || 60, this._maxZoom = n.maxZoom || 18, this._minClusterSize = n.minClusterSize || 2, this._isAverageCenter = !1, void 0 != n.isAverageCenter && (this._isAverageCenter = n.isAverageCenter), this._styles = n.styles || [];var i = this;this._map.addEventListener(\"zoomend\", function () {i._redraw();}), this._map.addEventListener(\"moveend\", function () {i._redraw();});var o = n.markers;h(o) && this.addMarkers(o);}};return d.prototype.addMarkers = function (t) {if (t.length) {for (var e = 0, n = t.length; e < n; e++) {this._pushMarkerTo(t[e]);}this._createClusters();}}, d.prototype._pushMarkerTo = function (t) {-1 === p(t, this._markers) && (t.isInCluster = !1, this._markers.push(t));}, d.prototype.addMarker = function (t) {this._pushMarkerTo(t), this._createClusters();}, d.prototype._createClusters = function () {var t = this._map.getBounds();if (t.getCenter()) for (var e, n = l(this._map, t, this._gridSize), i = 0; e = this._markers[i]; i++) {!e.isInCluster && n.containsPoint(e.getPosition()) && this._addToClosestCluster(e);}}, d.prototype._addToClosestCluster = function (e) {for (var n, i = 4e6, o = null, a = (e.getPosition(), 0); n = this._clusters[a]; a++) {var r = n.getCenter();if (r) {var s = this._map.getDistance(r, e.getPosition());s < i && (i = s, o = n);}}if (o && o.isMarkerInClusterBounds(e)) o.addMarker(e);else {var n = new t(this);n.addMarker(e), this._clusters.push(n);}}, d.prototype._clearLastClusters = function () {for (var t, e = 0; t = this._clusters[e]; e++) {t.remove();}this._clusters = [], this._removeMarkersFromCluster();}, d.prototype._removeMarkersFromCluster = function () {for (var t, e = 0; t = this._markers[e]; e++) {t.isInCluster = !1;}}, d.prototype._removeMarkersFromMap = function () {for (var t, e = 0; t = this._markers[e]; e++) {t.isInCluster = !1;var n = t.getLabel();this._map.removeOverlay(t), t.setLabel(n);}}, d.prototype._removeMarker = function (t) {var e = p(t, this._markers);return -1 !== e && (this._map.removeOverlay(t), this._markers.splice(e, 1), !0);}, d.prototype.removeMarker = function (t) {var e = this._removeMarker(t);return e && (this._clearLastClusters(), this._createClusters()), e;}, d.prototype.removeMarkers = function (t) {for (var e = !1, n = 0; n < t.length; n++) {var i = this._removeMarker(t[n]);e = e || i;}return e && (this._clearLastClusters(), this._createClusters()), e;}, d.prototype.clearMarkers = function () {this._clearLastClusters(), this._removeMarkersFromMap(), this._markers = [];}, d.prototype._redraw = function () {this._clearLastClusters(), this._createClusters();}, d.prototype.getGridSize = function () {return this._gridSize;}, d.prototype.setGridSize = function (t) {this._gridSize = t, this._redraw();}, d.prototype.getMaxZoom = function () {return this._maxZoom;}, d.prototype.setMaxZoom = function (t) {this._maxZoom = t, this._redraw();}, d.prototype.getStyles = function () {return this._styles;}, d.prototype.setStyles = function (t) {this._styles = t, this._redraw();}, d.prototype.getMinClusterSize = function () {return this._minClusterSize;}, d.prototype.setMinClusterSize = function (t) {this._minClusterSize = t, this._redraw();}, d.prototype.isAverageCenter = function () {return this._isAverageCenter;}, d.prototype.getMap = function () {return this._map;}, d.prototype.getMarkers = function () {return this._markers;}, d.prototype.getClustersCount = function () {for (var t, e = 0, n = 0; t = this._clusters[n]; n++) {t.isReal() && e++;}return e;}, t.prototype.addMarker = function (t) {if (this.isMarkerInCluster(t)) return !1;if (this._center) {if (this._isAverageCenter) {var e = this._markers.length + 1,n = (this._center.lat * (e - 1) + t.getPosition().lat) / e,i = (this._center.lng * (e - 1) + t.getPosition().lng) / e;this._center = new BMap.Point(i, n), this.updateGridBounds();}} else this._center = t.getPosition(), this.updateGridBounds();t.isInCluster = !0, this._markers.push(t);var o = this._markers.length;if (o < this._minClusterSize) return this._map.addOverlay(t), !0;if (o === this._minClusterSize) for (var a = 0; a < o; a++) {var r = this._markers[a].getLabel();this._markers[a].getMap() && this._map.removeOverlay(this._markers[a]), this._markers[a].setLabel(r);}return this._map.addOverlay(this._clusterMarker), this._isReal = !0, this.updateClusterMarker(), !0;}, t.prototype.isMarkerInCluster = function (t) {if (this._markers.indexOf) return -1 != this._markers.indexOf(t);for (var e, n = 0; e = this._markers[n]; n++) {if (e === t) return !0;}return !1;}, t.prototype.isMarkerInClusterBounds = function (t) {return this._gridBounds.containsPoint(t.getPosition());}, t.prototype.isReal = function (t) {return this._isReal;}, t.prototype.updateGridBounds = function () {var t = new BMap.Bounds(this._center, this._center);this._gridBounds = l(this._map, t, this._markerClusterer.getGridSize());}, t.prototype.updateClusterMarker = function () {if (this._map.getZoom() > this._markerClusterer.getMaxZoom()) {this._clusterMarker && this._map.removeOverlay(this._clusterMarker);for (var t, e = 0; t = this._markers[e]; e++) {this._map.addOverlay(t);}} else {if (this._markers.length < this._minClusterSize) return void this._clusterMarker.hide();this._clusterMarker.setPosition(this._center), this._clusterMarker.setText(this._markers.length), this._clusterMarker.addEventListener && !this._clusterMarker._hasClickEvent && this._clusterMarker.addEventListener(\"click\", function (t) {this._clusterMarker._hasClickEvent = !0, this._markers && this._map.setViewport(this.getBounds());}.bind(this));}}, t.prototype.remove = function () {for (var t = 0; this._markers[t]; t++) {var e = this._markers[t].getLabel();this._markers[t].getMap() && this._map.removeOverlay(this._markers[t]), this._markers[t].setLabel(e);}this._map.removeOverlay(this._clusterMarker), this._markers.length = 0, delete this._markers;}, t.prototype.getBounds = function () {for (var t, e = new BMap.Bounds(this._center, this._center), n = 0; t = this._markers[n]; n++) {e.extend(t.getPosition());}return e;}, t.prototype.getCenter = function () {return this._center;}, d;});}).call(e, n(3));}, function (t, e) {t.exports = { render: function render() {var t = this,e = t.$createElement;return (t._self._c || e)(\"div\");}, staticRenderFns: [] };}, function (t, e) {t.exports = { render: function render() {var t = this,e = t.$createElement;return (t._self._c || e)(\"div\", { directives: [{ name: \"show\", rawName: \"v-show\", value: t.show, expression: \"show\" }] }, [t._t(\"default\")], 2);}, staticRenderFns: [] };}, function (t, e) {t.exports = { render: function render() {var t = this,e = t.$createElement;return (t._self._c || e)(\"div\", [t._t(\"default\")], 2);}, staticRenderFns: [] };}, function (t, e) {t.exports = { render: function render() {var t = this,e = t.$createElement;return (t._self._c || e)(\"div\", { directives: [{ name: \"show\", rawName: \"v-show\", value: t.panel, expression: \"panel\" }] }, [t._t(\"default\")], 2);}, staticRenderFns: [] };}, function (t, e) {t.exports = { render: function render() {var t = this,e = t.$createElement,n = t._self._c || e;return t.paths.length ? n(\"div\", t._l(t.paths, function (e, i) {return n(\"bm-polygon\", { key: i, attrs: { path: e, \"stroke-color\": t.strokeColor, \"stroke-weight\": t.strokeWeight, \"stroke-opacity\": t.strokeOpacity, \"stroke-style\": t.strokeStyle, \"fill-opacity\": t.fillOpacity, \"fill-color\": t.fillColor, \"mass-clear\": t.massClear, clicking: t.clicking }, on: { click: function click(e) {t.$emit(\"click\", e);}, dblclick: function dblclick(e) {t.$emit(\"dblclick\", e);}, mousedown: function mousedown(e) {t.$emit(\"mousedown\", e);}, mouseup: function mouseup(e) {t.$emit(\"mouseup\", e);}, mouseout: function mouseout(e) {t.$emit(\"mouseout\", e);}, mouseover: function mouseover(e) {t.$emit(\"mouseover\", e);}, remove: function remove(e) {t.$emit(\"remove\", e);} } });})) : t._e();}, staticRenderFns: [] };}, function (t, e) {t.exports = { render: function render() {var t = this,e = t.$createElement;return (t._self._c || e)(\"div\", [t._t(\"default\")], 2);}, staticRenderFns: [] };}, function (t, e) {t.exports = { render: function render() {var t = this,e = t.$createElement;return (t._self._c || e)(\"div\", { directives: [{ name: \"show\", rawName: \"v-show\", value: t.panel, expression: \"panel\" }] }, [t._t(\"default\")], 2);}, staticRenderFns: [] };}, function (t, e) {t.exports = { render: function render() {var t = this,e = t.$createElement;return (t._self._c || e)(\"span\", [t._t(\"default\")], 2);}, staticRenderFns: [] };}, function (t, e) {t.exports = { render: function render() {var t = this,e = t.$createElement;return (t._self._c || e)(\"span\", [t._t(\"default\")], 2);}, staticRenderFns: [] };}, function (t, e) {t.exports = { render: function render() {var t = this,e = t.$createElement;return (t._self._c || e)(\"div\", { directives: [{ name: \"show\", rawName: \"v-show\", value: t.panel, expression: \"panel\" }] });}, staticRenderFns: [] };}, function (t, e) {t.exports = { render: function render() {var t = this,e = t.$createElement;return (t._self._c || e)(\"div\", { directives: [{ name: \"show\", rawName: \"v-show\", value: t.panel, expression: \"panel\" }] }, [t._t(\"default\")], 2);}, staticRenderFns: [] };}, function (t, e) {t.exports = { render: function render() {var t = this,e = t.$createElement;return (t._self._c || e)(\"div\", { directives: [{ name: \"show\", rawName: \"v-show\", value: t.panel, expression: \"panel\" }] }, [t._t(\"default\")], 2);}, staticRenderFns: [] };}, function (t, e) {t.exports = { render: function render() {var t = this,e = t.$createElement;return (t._self._c || e)(\"div\", [t._t(\"default\")], 2);}, staticRenderFns: [] };}, function (t, e) {t.exports = { render: function render() {var t = this,e = t.$createElement,n = t._self._c || e;return n(\"span\", [t._t(\"default\", [n(\"input\")])], 2);}, staticRenderFns: [] };}, function (t, e) {t.exports = { render: function render() {var t = this,e = t.$createElement;return (t._self._c || e)(\"div\", [t._t(\"default\")], 2);}, staticRenderFns: [] };}, function (t, e) {t.exports = { render: function render() {var t = this,e = t.$createElement,n = t._self._c || e;return n(\"div\", [t.hasBmView ? t._e() : n(\"div\", { ref: \"view\", staticStyle: { width: \"100%\", height: \"100%\" } }), t._v(\" \"), t._t(\"default\")], 2);}, staticRenderFns: [] };}]);});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///19\n");

/***/ }),

/***/ 191:
/*!*********************************************************************!*\
  !*** C:/Users/a/Desktop/toCWechat/uniapp/static/js/myDeviceMore.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(uni) {Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;} /**\r\n                                                                                                                                                                                                                                                                                                                * @name 封装下拉\r\n                                                                                                                                                                                                                                                                                                                * @params getList 刷新数据的函数\r\n                                                                                                                                                                                                                                                                                                                * @params listData 存放数据的变量名\r\n                                                                                                                                                                                                                                                                                                                * @params page 页数变量名\r\n                                                                                                                                                                                                                                                                                                                */var _default =\nfunction _default(_ref) {var _ref$getList = _ref.getList,getList = _ref$getList === void 0 ? \"getList\" : _ref$getList,_ref$listData = _ref.listData,listData = _ref$listData === void 0 ? \"listData\" : _ref$listData,_ref$page = _ref.page,page = _ref$page === void 0 ? \"page\" : _ref$page,_ref$initIndex = _ref.initIndex,initIndex = _ref$initIndex === void 0 ? \"initIndex\" : _ref$initIndex,_ref$modelData = _ref.modelData,modelData = _ref$modelData === void 0 ? \"modelData\" : _ref$modelData;\n  var startPoint = {};\n  var endPoint = {};\n  return {\n    data: function data() {var _ref2;\n      return _ref2 = {}, _defineProperty(_ref2,\n      listData, []), _defineProperty(_ref2,\n      page, 1), _defineProperty(_ref2,\n      initIndex, 0), _defineProperty(_ref2,\n      modelData, [\n      { label: \"告警记录\", backgroud: \"color:#FF0000\" },\n      { label: \"报修记录\", backgroud: \"color:#FF0000\" }]), _ref2;\n\n\n    },\n    onPullDownRefresh: function onPullDownRefresh() {\n      this.refresh();\n    },\n    onReachBottom: function onReachBottom() {\n      this[getList].call(this, this[page], this.__pulldone);\n    },\n    methods: {\n      refresh: function refresh() {\n        this[page] = 1;\n        this[getList].call(this, this[page], this.__pulldone);\n      },\n      __pulldone: function __pulldone(data) {\n        var db = data || [];\n        if (this[page] == 1) {\n          this[listData] = db;\n        } else {\n          this[listData] = (this[listData] || []).concat(db);\n        }\n        uni.stopPullDownRefresh();\n        this[page]++;\n      },\n\n      /**\r\n          * @name 动态开启或关闭pulldown\r\n          * @params {boolean} isOpen\r\n          */\n      setPullDown: function setPullDown(isOpen) {\n\n        var pages = getCurrentPages();\n        var page = pages[pages.length - 1];\n        var currentWebview = page.$getAppWebview();\n        currentWebview.setStyle({ //设置当前webview的style\n          pullToRefresh: {\n            support: isOpen,\n            style: plus.os.name === 'Android' ? 'circle' : 'default' } });\n\n\n\n      } } };\n\n\n\n};exports.default = _default;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vc3RhdGljL2pzL215RGV2aWNlTW9yZS5qcyJdLCJuYW1lcyI6WyJnZXRMaXN0IiwibGlzdERhdGEiLCJwYWdlIiwiaW5pdEluZGV4IiwibW9kZWxEYXRhIiwic3RhcnRQb2ludCIsImVuZFBvaW50IiwiZGF0YSIsImxhYmVsIiwiYmFja2dyb3VkIiwib25QdWxsRG93blJlZnJlc2giLCJyZWZyZXNoIiwib25SZWFjaEJvdHRvbSIsImNhbGwiLCJfX3B1bGxkb25lIiwibWV0aG9kcyIsImRiIiwiY29uY2F0IiwidW5pIiwic3RvcFB1bGxEb3duUmVmcmVzaCIsInNldFB1bGxEb3duIiwiaXNPcGVuIiwicGFnZXMiLCJnZXRDdXJyZW50UGFnZXMiLCJsZW5ndGgiLCJjdXJyZW50V2VidmlldyIsIiRnZXRBcHBXZWJ2aWV3Iiwic2V0U3R5bGUiLCJwdWxsVG9SZWZyZXNoIiwic3VwcG9ydCIsInN0eWxlIiwicGx1cyIsIm9zIiwibmFtZSJdLCJtYXBwaW5ncyI6IjZVQUFBOzs7Ozs7QUFNYyx3QkFBb0cseUJBQWxHQSxPQUFrRyxDQUFsR0EsT0FBa0csNkJBQTFGLFNBQTBGLHFDQUFoRkMsUUFBZ0YsQ0FBaEZBLFFBQWdGLDhCQUF2RSxVQUF1RSxrQ0FBNURDLElBQTRELENBQTVEQSxJQUE0RCwwQkFBdkQsTUFBdUQsbUNBQWhEQyxTQUFnRCxDQUFoREEsU0FBZ0QsK0JBQXRDLFdBQXNDLHdDQUExQkMsU0FBMEIsQ0FBMUJBLFNBQTBCLCtCQUFoQixXQUFnQjtBQUNqSCxNQUFJQyxVQUFVLEdBQUMsRUFBZjtBQUNBLE1BQUlDLFFBQVEsR0FBQyxFQUFiO0FBQ0EsU0FBTztBQUNOQyxRQURNLGtCQUNBO0FBQ0w7QUFDRU4sY0FERixFQUNZLEVBRFo7QUFFRUMsVUFGRixFQUVRLENBRlI7QUFHRUMsZUFIRixFQUdhLENBSGI7QUFJRUMsZUFKRixFQUlhO0FBQ1gsUUFBQ0ksS0FBSyxFQUFDLE1BQVAsRUFBY0MsU0FBUyxFQUFDLGVBQXhCLEVBRFc7QUFFWCxRQUFDRCxLQUFLLEVBQUMsTUFBUCxFQUFjQyxTQUFTLEVBQUMsZUFBeEIsRUFGVyxDQUpiOzs7QUFTQSxLQVhLO0FBWU5DLHFCQVpNLCtCQVljO0FBQ25CLFdBQUtDLE9BQUw7QUFDQSxLQWRLO0FBZU5DLGlCQWZNLDJCQWVVO0FBQ2YsV0FBS1osT0FBTCxFQUFjYSxJQUFkLENBQW1CLElBQW5CLEVBQXlCLEtBQUtYLElBQUwsQ0FBekIsRUFBcUMsS0FBS1ksVUFBMUM7QUFDQSxLQWpCSztBQWtCTkMsV0FBTyxFQUFDO0FBQ1BKLGFBRE8scUJBQ0U7QUFDUixhQUFLVCxJQUFMLElBQVcsQ0FBWDtBQUNBLGFBQUtGLE9BQUwsRUFBY2EsSUFBZCxDQUFtQixJQUFuQixFQUF5QixLQUFLWCxJQUFMLENBQXpCLEVBQXFDLEtBQUtZLFVBQTFDO0FBQ0EsT0FKTTtBQUtQQSxnQkFMTyxzQkFLSVAsSUFMSixFQUtTO0FBQ2YsWUFBSVMsRUFBRSxHQUFHVCxJQUFJLElBQUksRUFBakI7QUFDQSxZQUFJLEtBQUtMLElBQUwsS0FBYyxDQUFsQixFQUFxQjtBQUNuQixlQUFLRCxRQUFMLElBQWlCZSxFQUFqQjtBQUNELFNBRkQsTUFFTztBQUNMLGVBQUtmLFFBQUwsSUFBaUIsQ0FBQyxLQUFLQSxRQUFMLEtBQWtCLEVBQW5CLEVBQXVCZ0IsTUFBdkIsQ0FBOEJELEVBQTlCLENBQWpCO0FBQ0Q7QUFDREUsV0FBRyxDQUFDQyxtQkFBSjtBQUNBLGFBQUtqQixJQUFMO0FBQ0EsT0FkTTs7QUFnQlA7Ozs7QUFJQWtCLGlCQXBCTyx1QkFvQktDLE1BcEJMLEVBb0JZOztBQUVsQixZQUFNQyxLQUFLLEdBQUdDLGVBQWUsRUFBN0I7QUFDQSxZQUFNckIsSUFBSSxHQUFHb0IsS0FBSyxDQUFDQSxLQUFLLENBQUNFLE1BQU4sR0FBZSxDQUFoQixDQUFsQjtBQUNBLFlBQUlDLGNBQWMsR0FBR3ZCLElBQUksQ0FBQ3dCLGNBQUwsRUFBckI7QUFDQUQsc0JBQWMsQ0FBQ0UsUUFBZixDQUF3QixFQUFDO0FBQ3hCQyx1QkFBYSxFQUFFO0FBQ2RDLG1CQUFPLEVBQUVSLE1BREs7QUFFZFMsaUJBQUssRUFBRUMsSUFBSSxDQUFDQyxFQUFMLENBQVFDLElBQVIsS0FBaUIsU0FBakIsR0FBNkIsUUFBN0IsR0FBd0MsU0FGakMsRUFEUSxFQUF4Qjs7OztBQU9BLE9BaENNLEVBbEJGLEVBQVA7Ozs7QUFzREEsQyIsImZpbGUiOiIxOTEuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQG5hbWUg5bCB6KOF5LiL5ouJXHJcbiAqIEBwYXJhbXMgZ2V0TGlzdCDliLfmlrDmlbDmja7nmoTlh73mlbBcclxuICogQHBhcmFtcyBsaXN0RGF0YSDlrZjmlL7mlbDmja7nmoTlj5jph4/lkI1cclxuICogQHBhcmFtcyBwYWdlIOmhteaVsOWPmOmHj+WQjVxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQoe2dldExpc3Q9XCJnZXRMaXN0XCIsbGlzdERhdGE9XCJsaXN0RGF0YVwiLHBhZ2U9XCJwYWdlXCIsaW5pdEluZGV4PVwiaW5pdEluZGV4XCIsbW9kZWxEYXRhPVwibW9kZWxEYXRhXCJ9KT0+IHtcclxuXHR2YXIgc3RhcnRQb2ludD17fVxyXG5cdHZhciBlbmRQb2ludD17fVxyXG5cdHJldHVybiB7XHJcblx0XHRkYXRhKCl7XHJcblx0XHRcdHJldHVybiB7XHJcblx0XHRcdFx0W2xpc3REYXRhXTpbXSxcclxuXHRcdFx0XHRbcGFnZV06MSxcclxuXHRcdFx0XHRbaW5pdEluZGV4XTowLFxyXG5cdFx0XHRcdFttb2RlbERhdGFdOltcclxuXHRcdFx0XHRcdHtsYWJlbDpcIuWRiuitpuiusOW9lVwiLGJhY2tncm91ZDpcImNvbG9yOiNGRjAwMDBcIn0sXHJcblx0XHRcdFx0XHR7bGFiZWw6XCLmiqXkv67orrDlvZVcIixiYWNrZ3JvdWQ6XCJjb2xvcjojRkYwMDAwXCJ9XHJcblx0XHRcdFx0XVxyXG5cdFx0XHR9XHJcblx0XHR9LFxyXG5cdFx0b25QdWxsRG93blJlZnJlc2goKSB7XHJcblx0XHRcdHRoaXMucmVmcmVzaCgpO1xyXG5cdFx0fSxcclxuXHRcdG9uUmVhY2hCb3R0b20oKSB7XHJcblx0XHRcdHRoaXNbZ2V0TGlzdF0uY2FsbCh0aGlzLCB0aGlzW3BhZ2VdLCB0aGlzLl9fcHVsbGRvbmUpO1xyXG5cdFx0fSxcclxuXHRcdG1ldGhvZHM6e1xyXG5cdFx0XHRyZWZyZXNoKCl7XHJcblx0XHRcdFx0dGhpc1twYWdlXT0xO1xyXG5cdFx0XHRcdHRoaXNbZ2V0TGlzdF0uY2FsbCh0aGlzLCB0aGlzW3BhZ2VdLCB0aGlzLl9fcHVsbGRvbmUpO1xyXG5cdFx0XHR9LFxyXG5cdFx0XHRfX3B1bGxkb25lKGRhdGEpe1xyXG5cdFx0XHRcdHZhciBkYiA9IGRhdGEgfHwgW107XHJcblx0XHRcdFx0aWYgKHRoaXNbcGFnZV0gPT0gMSkge1xyXG5cdFx0XHRcdCAgdGhpc1tsaXN0RGF0YV0gPSBkYjtcclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdCAgdGhpc1tsaXN0RGF0YV0gPSAodGhpc1tsaXN0RGF0YV0gfHwgW10pLmNvbmNhdChkYik7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdHVuaS5zdG9wUHVsbERvd25SZWZyZXNoKCk7XHJcblx0XHRcdFx0dGhpc1twYWdlXSsrO1xyXG5cdFx0XHR9LFxyXG5cdFx0XHRcclxuXHRcdFx0LyoqXHJcblx0XHRcdCAqIEBuYW1lIOWKqOaAgeW8gOWQr+aIluWFs+mXrXB1bGxkb3duXHJcblx0XHRcdCAqIEBwYXJhbXMge2Jvb2xlYW59IGlzT3BlblxyXG5cdFx0XHQgKi9cclxuXHRcdFx0c2V0UHVsbERvd24oaXNPcGVuKXtcclxuXHJcblx0XHRcdFx0Y29uc3QgcGFnZXMgPSBnZXRDdXJyZW50UGFnZXMoKTsgIFxyXG5cdFx0XHRcdGNvbnN0IHBhZ2UgPSBwYWdlc1twYWdlcy5sZW5ndGggLSAxXTsgXHJcblx0XHRcdFx0dmFyIGN1cnJlbnRXZWJ2aWV3ID0gcGFnZS4kZ2V0QXBwV2VidmlldygpO1xyXG5cdFx0XHRcdGN1cnJlbnRXZWJ2aWV3LnNldFN0eWxlKHsvL+iuvue9ruW9k+WJjXdlYnZpZXfnmoRzdHlsZVxyXG5cdFx0XHRcdFx0cHVsbFRvUmVmcmVzaDoge1xyXG5cdFx0XHRcdFx0XHRzdXBwb3J0OiBpc09wZW4gLFxyXG5cdFx0XHRcdFx0XHRzdHlsZTogcGx1cy5vcy5uYW1lID09PSAnQW5kcm9pZCcgPyAnY2lyY2xlJyA6ICdkZWZhdWx0JyAgXHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fSk7XHJcblxyXG5cdFx0XHR9LFxyXG5cdFx0XHRcclxuXHRcdH1cclxuXHR9XHJcbn0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///191\n");

/***/ }),

/***/ 2:
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsNENBQTRDOztBQUU1QyIsImZpbGUiOiIyLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGc7XG5cbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXG5nID0gKGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcztcbn0pKCk7XG5cbnRyeSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxuXHRnID0gZyB8fCBuZXcgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpO1xufSBjYXRjaCAoZSkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIikgZyA9IHdpbmRvdztcbn1cblxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3Ncbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cblxubW9kdWxlLmV4cG9ydHMgPSBnO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///2\n");

/***/ }),

/***/ 206:
/*!*********************************************************************!*\
  !*** C:/Users/a/Desktop/toCWechat/uniapp/static/js/myDevicePull.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(uni, __f__) {Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;\n\n\n\n\n\nvar _request = _interopRequireDefault(__webpack_require__(/*! ../../api/request.js */ 31));\nvar _global = _interopRequireDefault(__webpack_require__(/*! ../../static/js/global.js */ 27));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}var _default =\nfunction _default(_ref) {var _ref$getList = _ref.getList,getList = _ref$getList === void 0 ? \"getList\" : _ref$getList,_ref$listData = _ref.listData,listData = _ref$listData === void 0 ? \"listData\" : _ref$listData,_ref$page = _ref.page,page = _ref$page === void 0 ? \"page\" : _ref$page,_ref$initIndex = _ref.initIndex,initIndex = _ref$initIndex === void 0 ? \"initIndex\" : _ref$initIndex,_ref$modelData = _ref.modelData,modelData = _ref$modelData === void 0 ? \"modelData\" : _ref$modelData;\n  var startPoint = {};\n  var endPoint = {};\n  return {\n    data: function data() {var _ref2;\n      return _ref2 = {}, _defineProperty(_ref2,\n      listData, []), _defineProperty(_ref2,\n      page, 1), _defineProperty(_ref2,\n      initIndex, 0), _defineProperty(_ref2,\n      modelData, []), _ref2;\n\n\n\n    },\n    onPullDownRefresh: function onPullDownRefresh() {\n      this.refreshes();\n    },\n    onReachBottom: function onReachBottom() {\n      this[getList].call(this, this[page], this.__pulldone);\n    },\n    methods: {\n      refreshes: function refreshes() {\n        this[page] = 1;\n        this[getList].call(this, this[page], this.__pulldone);\n      },\n      __pulldone: function __pulldone(data) {\n        var db = data || [];\n        if (this[page] == 1) {\n          this[listData] = db;\n        } else {\n          this[listData] = (this[listData] || []).concat(db);\n        }\n        uni.stopPullDownRefresh();\n        this[page]++;\n      },\n\n      /**\r\n          * @name 动态开启或关闭pulldown\r\n          * @params {boolean} isOpen\r\n          */\n      setPullDown: function setPullDown(isOpen) {\n\n        var pages = getCurrentPages();\n        var page = pages[pages.length - 1];\n        var currentWebview = page.$getAppWebview();\n        currentWebview.setStyle({ //设置当前webview的style\n          pullToRefresh: {\n            support: isOpen,\n            style: plus.os.name === 'Android' ? 'circle' : 'default' } });\n\n\n\n      },\n\n      /**\r\n          * @name 开始滑动\r\n          */\n      touchstart: function touchstart(e) {\n        startPoint = {\n          pageX: e.pageX || e.changedTouches[0].pageX,\n          pageY: e.pageY || e.changedTouches[0].pageY };\n\n      },\n\n      /**\r\n          * @name 滑动结束\r\n          */\n      touchend: function touchend(e) {\n        endPoint = {\n          pageX: e.mp.changedTouches[0].pageX,\n          pageY: e.mp.changedTouches[0].pageY\n\n          // 判断是左滑动还是右滑动 当横向位移大于10，纵向位移大于100，则判定为滑动事件\n        };var disX = endPoint.pageX - startPoint.pageX; //计算移动的位移差\n        var disY = endPoint.pageY - startPoint.pageY;\n        if (Math.abs(disX) > 10 || Math.abs(disY) > 100) {\n          if (Math.abs(disX) > Math.abs(disY)) {//判断是横向滑动还是纵向滑动\n            if (disX > 10) {\n              this.swiperight(); //右滑\n            };\n            if (disX < -10) {\n              this.swipeleft(); //左滑\n            };\n          }\n        }\n      },\n\n      /**\r\n          * @name 向左滑动\r\n          */\n      swipeleft: function swipeleft() {\n        if (this[initIndex] < this[modelData].length - 1) this[initIndex]++;\n        console.log(__f__(\"左滑\", \" at static\\\\js\\\\myDevicePull.js:101\"));\n      },\n\n      /**\r\n          * @name 监听右滑\r\n          */\n      swiperight: function swiperight() {\n        if (this[initIndex] > 0) this[initIndex]--;\n        console.log(__f__(\"右滑\", \" at static\\\\js\\\\myDevicePull.js:109\"));\n      },\n      getDeviceType: function getDeviceType() {\n        var that = this;\n        _global.default.showLoading();\n        var param = {\n          openId: 'wx123456789' };\n\n        _request.default.apiGet('/toc/deviceType/list', param).then(function (res) {\n          if (res.code == '0') {\n            res.data.forEach(function (item, index) {\n              that[modelData].push({\n                label: item.typeName,\n                background: 'FF0000',\n                typeId: item.typeId });\n\n            });\n            _global.default.hideLoading();\n          } else {\n            _global.default.hideLoading();\n            _global.default.showToast(res.msg);\n          }\n        }).catch(function (reason) {\n          _global.default.hideLoading();\n          _global.default.showToast(reason);\n        });\n      } },\n\n    mounted: function mounted() {\n      this.getDeviceType();\n    } };\n\n};exports.default = _default;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"default\"], __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js */ 10)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///206\n");

/***/ }),

/***/ 214:
/*!**********************************************************************!*\
  !*** C:/Users/a/Desktop/toCWechat/uniapp/static/js/myWarnHistroy.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(uni, __f__) {Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;} /**\r\n                                                                                                                                                                                                                                                                                                                * @name 封装下拉\r\n                                                                                                                                                                                                                                                                                                                * @params getList 刷新数据的函数\r\n                                                                                                                                                                                                                                                                                                                * @params listData 存放数据的变量名\r\n                                                                                                                                                                                                                                                                                                                * @params page 页数变量名\r\n                                                                                                                                                                                                                                                                                                                */var _default =\nfunction _default(_ref) {var _ref$getList = _ref.getList,getList = _ref$getList === void 0 ? \"getList\" : _ref$getList,_ref$listData = _ref.listData,listData = _ref$listData === void 0 ? \"listData\" : _ref$listData,_ref$page = _ref.page,page = _ref$page === void 0 ? \"page\" : _ref$page,_ref$initIndex = _ref.initIndex,initIndex = _ref$initIndex === void 0 ? \"initIndex\" : _ref$initIndex,_ref$modelData = _ref.modelData,modelData = _ref$modelData === void 0 ? \"modelData\" : _ref$modelData;\n  var startPoint = {};\n  var endPoint = {};\n  return {\n    data: function data() {var _ref2;\n      return _ref2 = {}, _defineProperty(_ref2,\n      listData, []), _defineProperty(_ref2,\n      page, 1), _defineProperty(_ref2,\n      initIndex, 0), _defineProperty(_ref2,\n      modelData, [\n      // {label:\"全部\",backgroud:\"color:#000000\"},\n      { label: \"告警\", backgroud: \"color:#FF0000\" }]), _ref2;\n\n\n\n\n    },\n    onPullDownRefresh: function onPullDownRefresh() {\n      this.refreshes();\n    },\n    onReachBottom: function onReachBottom() {\n      this[getList].call(this, this[page], this.__pulldone);\n    },\n    methods: {\n      refreshes: function refreshes() {\n        this[page] = 1;\n        this[getList].call(this, this[page], this.__pulldone);\n      },\n      __pulldone: function __pulldone(data) {\n        var db = data || [];\n        if (this[page] == 1) {\n          this[listData] = db;\n        } else {\n          this[listData] = (this[listData] || []).concat(db);\n        }\n        uni.stopPullDownRefresh();\n        this[page]++;\n      },\n\n      /**\r\n          * @name 动态开启或关闭pulldown\r\n          * @params {boolean} isOpen\r\n          */\n      setPullDown: function setPullDown(isOpen) {\n\n        var pages = getCurrentPages();\n        var page = pages[pages.length - 1];\n        var currentWebview = page.$getAppWebview();\n        currentWebview.setStyle({ //设置当前webview的style\n          pullToRefresh: {\n            support: isOpen,\n            style: plus.os.name === 'Android' ? 'circle' : 'default' } });\n\n\n\n      },\n\n      /**\r\n          * @name 开始滑动\r\n          */\n      touchstart: function touchstart(e) {\n        startPoint = {\n          pageX: e.pageX || e.changedTouches[0].pageX,\n          pageY: e.pageY || e.changedTouches[0].pageY };\n\n      },\n\n      /**\r\n          * @name 滑动结束\r\n          */\n      touchend: function touchend(e) {\n        endPoint = {\n          pageX: e.mp.changedTouches[0].pageX,\n          pageY: e.mp.changedTouches[0].pageY\n\n          // 判断是左滑动还是右滑动 当横向位移大于10，纵向位移大于100，则判定为滑动事件\n        };var disX = endPoint.pageX - startPoint.pageX; //计算移动的位移差\n        var disY = endPoint.pageY - startPoint.pageY;\n        if (Math.abs(disX) > 10 || Math.abs(disY) > 100) {\n          if (Math.abs(disX) > Math.abs(disY)) {//判断是横向滑动还是纵向滑动\n            if (disX > 10) {\n              this.swiperight(); //右滑\n            };\n            if (disX < -10) {\n              this.swipeleft(); //左滑\n            };\n          }\n        }\n      },\n\n      /**\r\n          * @name 向左滑动\r\n          */\n      swipeleft: function swipeleft() {\n        if (this[initIndex] < this[modelData].length - 1) this[initIndex]++;\n        console.log(__f__(\"左滑\", \" at static\\\\js\\\\myWarnHistroy.js:102\"));\n      },\n\n      /**\r\n          * @name 监听右滑\r\n          */\n      swiperight: function swiperight() {\n        if (this[initIndex] > 0) this[initIndex]--;\n        console.log(__f__(\"右滑\", \" at static\\\\js\\\\myWarnHistroy.js:110\"));\n      } } };\n\n\n};exports.default = _default;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"default\"], __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js */ 10)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///214\n");

/***/ }),

/***/ 26:
/*!************************************************************************************!*\
  !*** C:/Users/a/Desktop/toCWechat/uniapp/node_modules/jweixin-module/out/index.js ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(__f__) {function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}!function (e, n) { true ? module.exports = n(e) : undefined;}(window, function (o, e) {function c(n, e, i) {o.WeixinJSBridge ? WeixinJSBridge.invoke(n, r(e), function (e) {a(n, e, i);}) : d(n, i);}function i(n, i, t) {o.WeixinJSBridge ? WeixinJSBridge.on(n, function (e) {t && t.trigger && t.trigger(e), a(n, e, i);}) : d(n, t || i);}function r(e) {return (e = e || {}).appId = M.appId, e.verifyAppId = M.appId, e.verifySignType = \"sha1\", e.verifyTimestamp = M.timestamp + \"\", e.verifyNonceStr = M.nonceStr, e.verifySignature = M.signature, e;}function n(e) {return { timeStamp: e.timestamp + \"\", nonceStr: e.nonceStr, package: e.package, paySign: e.paySign, signType: e.signType || \"SHA1\" };}function a(e, n, i) {\"openEnterpriseChat\" == e && (n.errCode = n.err_code), delete n.err_code, delete n.err_desc, delete n.err_detail;var t = n.errMsg;t || (t = n.err_msg, delete n.err_msg, t = function (e, n) {var i = e,t = f[i];t && (i = t);var o = \"ok\";if (n) {var r = n.indexOf(\":\");\"confirm\" == (o = n.substring(r + 1)) && (o = \"ok\"), \"failed\" == o && (o = \"fail\"), -1 != o.indexOf(\"failed_\") && (o = o.substring(7)), -1 != o.indexOf(\"fail_\") && (o = o.substring(5)), \"access denied\" != (o = (o = o.replace(/_/g, \" \")).toLowerCase()) && \"no permission to execute\" != o || (o = \"permission denied\"), \"config\" == i && \"function not exist\" == o && (o = \"ok\"), \"\" == o && (o = \"fail\");}return n = i + \":\" + o;}(e, t), n.errMsg = t), (i = i || {})._complete && (i._complete(n), delete i._complete), t = n.errMsg || \"\", M.debug && !i.isInnerInvoke && alert(JSON.stringify(n));var o = t.indexOf(\":\");switch (t.substring(o + 1)) {case \"ok\":i.success && i.success(n);break;case \"cancel\":i.cancel && i.cancel(n);break;default:i.fail && i.fail(n);}i.complete && i.complete(n);}function s(e) {if (e) {for (var n = 0, i = e.length; n < i; ++n) {var t = e[n],o = p[t];o && (e[n] = o);}return e;}}function d(e, n) {if (!(!M.debug || n && n.isInnerInvoke)) {var i = f[e];i && (e = i), n && n._complete && delete n._complete, console.log(__f__('\"' + e + '\",', n || \"\", \" at node_modules\\\\jweixin-module\\\\out\\\\index.js:1\"));}}function l() {return new Date().getTime();}function u(e) {I && (o.WeixinJSBridge ? e() : t.addEventListener && t.addEventListener(\"WeixinJSBridgeReady\", e, !1));}if (!o.jWeixin) {var _C;var p = { config: \"preVerifyJSAPI\", onMenuShareTimeline: \"menu:share:timeline\", onMenuShareAppMessage: \"menu:share:appmessage\", onMenuShareQQ: \"menu:share:qq\", onMenuShareWeibo: \"menu:share:weiboApp\", onMenuShareQZone: \"menu:share:QZone\", previewImage: \"imagePreview\", getLocation: \"geoLocation\", openProductSpecificView: \"openProductViewWithPid\", addCard: \"batchAddCard\", openCard: \"batchViewCard\", chooseWXPay: \"getBrandWCPayRequest\", openEnterpriseRedPacket: \"getRecevieBizHongBaoRequest\", startSearchBeacons: \"startMonitoringBeacons\", stopSearchBeacons: \"stopMonitoringBeacons\", onSearchBeacons: \"onBeaconsInRange\", consumeAndShareCard: \"consumedShareCard\", openAddress: \"editAddress\" },f = function () {var e = {};for (var n in p) {e[p[n]] = n;}return e;}(),t = o.document,m = t.title,g = navigator.userAgent.toLowerCase(),h = navigator.platform.toLowerCase(),v = !(!h.match(\"mac\") && !h.match(\"win\")),S = -1 != g.indexOf(\"wxdebugger\"),I = -1 != g.indexOf(\"micromessenger\"),y = -1 != g.indexOf(\"android\"),_ = -1 != g.indexOf(\"iphone\") || -1 != g.indexOf(\"ipad\"),w = (O = g.match(/micromessenger\\/(\\d+\\.\\d+\\.\\d+)/) || g.match(/micromessenger\\/(\\d+\\.\\d+)/)) ? O[1] : \"\",k = { initStartTime: l(), initEndTime: 0, preVerifyStartTime: 0, preVerifyEndTime: 0 },T = { version: 1, appId: \"\", initTime: 0, preVerifyTime: 0, networkType: \"\", isPreVerifyOk: 1, systemType: _ ? 1 : y ? 2 : -1, clientVersion: w, url: encodeURIComponent(location.href) },M = {},P = { _completes: [] },x = { state: 0, data: {} };u(function () {k.initEndTime = l();});var A = !1,V = [],C = (_C = { config: function config(e) {d(\"config\", M = e);var t = !1 !== M.check;u(function () {if (t) c(p.config, { verifyJsApiList: s(M.jsApiList) }, function () {P._complete = function (e) {k.preVerifyEndTime = l(), x.state = 1, x.data = e;}, P.success = function (e) {T.isPreVerifyOk = 0;}, P.fail = function (e) {P._fail ? P._fail(e) : x.state = -1;};var t = P._completes;return t.push(function () {!function (e) {if (!(v || S || M.debug || w < \"6.0.2\" || T.systemType < 0)) {var i = new Image();T.appId = M.appId, T.initTime = k.initEndTime - k.initStartTime, T.preVerifyTime = k.preVerifyEndTime - k.preVerifyStartTime, C.getNetworkType({ isInnerInvoke: !0, success: function success(e) {T.networkType = e.networkType;var n = \"https://open.weixin.qq.com/sdk/report?v=\" + T.version + \"&o=\" + T.isPreVerifyOk + \"&s=\" + T.systemType + \"&c=\" + T.clientVersion + \"&a=\" + T.appId + \"&n=\" + T.networkType + \"&i=\" + T.initTime + \"&p=\" + T.preVerifyTime + \"&u=\" + T.url;i.src = n;} });}}();}), P.complete = function (e) {for (var n = 0, i = t.length; n < i; ++n) {t[n]();}P._completes = [];}, P;}()), k.preVerifyStartTime = l();else {x.state = 1;for (var e = P._completes, n = 0, i = e.length; n < i; ++n) {e[n]();}P._completes = [];}}), C.invoke || (C.invoke = function (e, n, i) {o.WeixinJSBridge && WeixinJSBridge.invoke(e, r(n), i);}, C.on = function (e, n) {o.WeixinJSBridge && WeixinJSBridge.on(e, n);});}, ready: function ready(e) {0 != x.state ? e() : (P._completes.push(e), !I && M.debug && e());}, error: function error(e) {w < \"6.0.2\" || (-1 == x.state ? e(x.data) : P._fail = e);}, checkJsApi: function checkJsApi(e) {c(\"checkJsApi\", { jsApiList: s(e.jsApiList) }, (e._complete = function (e) {if (y) {var n = e.checkResult;n && (e.checkResult = JSON.parse(n));}e = function (e) {var n = e.checkResult;for (var i in n) {var t = f[i];t && (n[t] = n[i], delete n[i]);}return e;}(e);}, e));}, onMenuShareTimeline: function onMenuShareTimeline(e) {i(p.onMenuShareTimeline, { complete: function complete() {c(\"shareTimeline\", { title: e.title || m, desc: e.title || m, img_url: e.imgUrl || \"\", link: e.link || location.href, type: e.type || \"link\", data_url: e.dataUrl || \"\" }, e);} }, e);}, onMenuShareAppMessage: function onMenuShareAppMessage(n) {i(p.onMenuShareAppMessage, { complete: function complete(e) {\"favorite\" === e.scene ? c(\"sendAppMessage\", { title: n.title || m, desc: n.desc || \"\", link: n.link || location.href, img_url: n.imgUrl || \"\", type: n.type || \"link\", data_url: n.dataUrl || \"\" }) : c(\"sendAppMessage\", { title: n.title || m, desc: n.desc || \"\", link: n.link || location.href, img_url: n.imgUrl || \"\", type: n.type || \"link\", data_url: n.dataUrl || \"\" }, n);} }, n);}, onMenuShareQQ: function onMenuShareQQ(e) {i(p.onMenuShareQQ, { complete: function complete() {c(\"shareQQ\", { title: e.title || m, desc: e.desc || \"\", img_url: e.imgUrl || \"\", link: e.link || location.href }, e);} }, e);}, onMenuShareWeibo: function onMenuShareWeibo(e) {i(p.onMenuShareWeibo, { complete: function complete() {c(\"shareWeiboApp\", { title: e.title || m, desc: e.desc || \"\", img_url: e.imgUrl || \"\", link: e.link || location.href }, e);} }, e);}, onMenuShareQZone: function onMenuShareQZone(e) {i(p.onMenuShareQZone, { complete: function complete() {c(\"shareQZone\", { title: e.title || m, desc: e.desc || \"\", img_url: e.imgUrl || \"\", link: e.link || location.href }, e);} }, e);}, updateTimelineShareData: function updateTimelineShareData(e) {c(\"updateTimelineShareData\", { title: e.title, link: e.link, imgUrl: e.imgUrl }, e);}, updateAppMessageShareData: function updateAppMessageShareData(e) {c(\"updateAppMessageShareData\", { title: e.title, desc: e.desc, link: e.link, imgUrl: e.imgUrl }, e);}, startRecord: function startRecord(e) {c(\"startRecord\", {}, e);}, stopRecord: function stopRecord(e) {c(\"stopRecord\", {}, e);}, onVoiceRecordEnd: function onVoiceRecordEnd(e) {i(\"onVoiceRecordEnd\", e);}, playVoice: function playVoice(e) {c(\"playVoice\", { localId: e.localId }, e);}, pauseVoice: function pauseVoice(e) {c(\"pauseVoice\", { localId: e.localId }, e);}, stopVoice: function stopVoice(e) {c(\"stopVoice\", { localId: e.localId }, e);}, onVoicePlayEnd: function onVoicePlayEnd(e) {i(\"onVoicePlayEnd\", e);}, uploadVoice: function uploadVoice(e) {c(\"uploadVoice\", { localId: e.localId, isShowProgressTips: 0 == e.isShowProgressTips ? 0 : 1 }, e);}, downloadVoice: function downloadVoice(e) {c(\"downloadVoice\", { serverId: e.serverId, isShowProgressTips: 0 == e.isShowProgressTips ? 0 : 1 }, e);}, translateVoice: function translateVoice(e) {c(\"translateVoice\", { localId: e.localId, isShowProgressTips: 0 == e.isShowProgressTips ? 0 : 1 }, e);}, chooseImage: function chooseImage(e) {c(\"chooseImage\", { scene: \"1|2\", count: e.count || 9, sizeType: e.sizeType || [\"original\", \"compressed\"], sourceType: e.sourceType || [\"album\", \"camera\"] }, (e._complete = function (e) {if (y) {var n = e.localIds;try {n && (e.localIds = JSON.parse(n));} catch (e) {}}}, e));}, getLocation: function getLocation(e) {}, previewImage: function previewImage(e) {c(p.previewImage, { current: e.current, urls: e.urls }, e);}, uploadImage: function uploadImage(e) {c(\"uploadImage\", { localId: e.localId, isShowProgressTips: 0 == e.isShowProgressTips ? 0 : 1 }, e);}, downloadImage: function downloadImage(e) {c(\"downloadImage\", { serverId: e.serverId, isShowProgressTips: 0 == e.isShowProgressTips ? 0 : 1 }, e);}, getLocalImgData: function getLocalImgData(e) {!1 === A ? (A = !0, c(\"getLocalImgData\", { localId: e.localId }, (e._complete = function (e) {if (A = !1, 0 < V.length) {var n = V.shift();wx.getLocalImgData(n);}}, e))) : V.push(e);}, getNetworkType: function getNetworkType(e) {c(\"getNetworkType\", {}, (e._complete = function (e) {e = function (e) {var n = e.errMsg;e.errMsg = \"getNetworkType:ok\";var i = e.subtype;if (delete e.subtype, i) e.networkType = i;else {var t = n.indexOf(\":\"),o = n.substring(t + 1);switch (o) {case \"wifi\":case \"edge\":case \"wwan\":e.networkType = o;break;default:e.errMsg = \"getNetworkType:fail\";}}return e;}(e);}, e));}, openLocation: function openLocation(e) {c(\"openLocation\", { latitude: e.latitude, longitude: e.longitude, name: e.name || \"\", address: e.address || \"\", scale: e.scale || 28, infoUrl: e.infoUrl || \"\" }, e);} }, _defineProperty(_C, \"getLocation\", function getLocation(e) {c(p.getLocation, { type: (e = e || {}).type || \"wgs84\" }, (e._complete = function (e) {delete e.type;}, e));}), _defineProperty(_C, \"hideOptionMenu\", function hideOptionMenu(e) {c(\"hideOptionMenu\", {}, e);}), _defineProperty(_C, \"showOptionMenu\", function showOptionMenu(e) {c(\"showOptionMenu\", {}, e);}), _defineProperty(_C, \"closeWindow\", function closeWindow(e) {c(\"closeWindow\", {}, e = e || {});}), _defineProperty(_C, \"hideMenuItems\", function hideMenuItems(e) {c(\"hideMenuItems\", { menuList: e.menuList }, e);}), _defineProperty(_C, \"showMenuItems\", function showMenuItems(e) {c(\"showMenuItems\", { menuList: e.menuList }, e);}), _defineProperty(_C, \"hideAllNonBaseMenuItem\", function hideAllNonBaseMenuItem(e) {c(\"hideAllNonBaseMenuItem\", {}, e);}), _defineProperty(_C, \"showAllNonBaseMenuItem\", function showAllNonBaseMenuItem(e) {c(\"showAllNonBaseMenuItem\", {}, e);}), _defineProperty(_C, \"scanQRCode\", function scanQRCode(e) {c(\"scanQRCode\", { needResult: (e = e || {}).needResult || 0, scanType: e.scanType || [\"qrCode\", \"barCode\"] }, (e._complete = function (e) {if (_) {var n = e.resultStr;if (n) {var i = JSON.parse(n);e.resultStr = i && i.scan_code && i.scan_code.scan_result;}}}, e));}), _defineProperty(_C, \"openAddress\", function openAddress(e) {c(p.openAddress, {}, (e._complete = function (e) {var n;(n = e).postalCode = n.addressPostalCode, delete n.addressPostalCode, n.provinceName = n.proviceFirstStageName, delete n.proviceFirstStageName, n.cityName = n.addressCitySecondStageName, delete n.addressCitySecondStageName, n.countryName = n.addressCountiesThirdStageName, delete n.addressCountiesThirdStageName, n.detailInfo = n.addressDetailInfo, delete n.addressDetailInfo, e = n;}, e));}), _defineProperty(_C, \"openProductSpecificView\", function openProductSpecificView(e) {c(p.openProductSpecificView, { pid: e.productId, view_type: e.viewType || 0, ext_info: e.extInfo }, e);}), _defineProperty(_C, \"addCard\", function addCard(e) {for (var n = e.cardList, i = [], t = 0, o = n.length; t < o; ++t) {var r = n[t],a = { card_id: r.cardId, card_ext: r.cardExt };i.push(a);}c(p.addCard, { card_list: i }, (e._complete = function (e) {var n = e.card_list;if (n) {for (var i = 0, t = (n = JSON.parse(n)).length; i < t; ++i) {var o = n[i];o.cardId = o.card_id, o.cardExt = o.card_ext, o.isSuccess = !!o.is_succ, delete o.card_id, delete o.card_ext, delete o.is_succ;}e.cardList = n, delete e.card_list;}}, e));}), _defineProperty(_C, \"chooseCard\", function chooseCard(e) {c(\"chooseCard\", { app_id: M.appId, location_id: e.shopId || \"\", sign_type: e.signType || \"SHA1\", card_id: e.cardId || \"\", card_type: e.cardType || \"\", card_sign: e.cardSign, time_stamp: e.timestamp + \"\", nonce_str: e.nonceStr }, (e._complete = function (e) {e.cardList = e.choose_card_info, delete e.choose_card_info;}, e));}), _defineProperty(_C, \"openCard\", function openCard(e) {for (var n = e.cardList, i = [], t = 0, o = n.length; t < o; ++t) {var r = n[t],a = { card_id: r.cardId, code: r.code };i.push(a);}c(p.openCard, { card_list: i }, e);}), _defineProperty(_C, \"consumeAndShareCard\", function consumeAndShareCard(e) {c(p.consumeAndShareCard, { consumedCardId: e.cardId, consumedCode: e.code }, e);}), _defineProperty(_C, \"chooseWXPay\", function chooseWXPay(e) {c(p.chooseWXPay, n(e), e);}), _defineProperty(_C, \"openEnterpriseRedPacket\", function openEnterpriseRedPacket(e) {c(p.openEnterpriseRedPacket, n(e), e);}), _defineProperty(_C, \"startSearchBeacons\", function startSearchBeacons(e) {c(p.startSearchBeacons, { ticket: e.ticket }, e);}), _defineProperty(_C, \"stopSearchBeacons\", function stopSearchBeacons(e) {c(p.stopSearchBeacons, {}, e);}), _defineProperty(_C, \"onSearchBeacons\", function onSearchBeacons(e) {i(p.onSearchBeacons, e);}), _defineProperty(_C, \"openEnterpriseChat\", function openEnterpriseChat(e) {c(\"openEnterpriseChat\", { useridlist: e.userIds, chatname: e.groupName }, e);}), _defineProperty(_C, \"launchMiniProgram\", function launchMiniProgram(e) {c(\"launchMiniProgram\", { targetAppId: e.targetAppId, path: function (e) {if (\"string\" == typeof e && 0 < e.length) {var n = e.split(\"?\")[0],i = e.split(\"?\")[1];return n += \".html\", void 0 !== i ? n + \"?\" + i : n;}}(e.path), envVersion: e.envVersion }, e);}), _defineProperty(_C, \"miniProgram\", { navigateBack: function navigateBack(e) {e = e || {}, u(function () {c(\"invokeMiniProgramAPI\", { name: \"navigateBack\", arg: { delta: e.delta || 1 } }, e);});}, navigateTo: function navigateTo(e) {u(function () {c(\"invokeMiniProgramAPI\", { name: \"navigateTo\", arg: { url: e.url } }, e);});}, redirectTo: function redirectTo(e) {u(function () {c(\"invokeMiniProgramAPI\", { name: \"redirectTo\", arg: { url: e.url } }, e);});}, switchTab: function switchTab(e) {u(function () {c(\"invokeMiniProgramAPI\", { name: \"switchTab\", arg: { url: e.url } }, e);});}, reLaunch: function reLaunch(e) {u(function () {c(\"invokeMiniProgramAPI\", { name: \"reLaunch\", arg: { url: e.url } }, e);});}, postMessage: function postMessage(e) {u(function () {c(\"invokeMiniProgramAPI\", { name: \"postMessage\", arg: e.data || {} }, e);});}, getEnv: function getEnv(e) {u(function () {e({ miniprogram: \"miniprogram\" === o.__wxjs_environment });});} }), _C),L = 1,B = {};return t.addEventListener(\"error\", function (e) {if (!y) {var n = e.target,i = n.tagName,t = n.src;if ((\"IMG\" == i || \"VIDEO\" == i || \"AUDIO\" == i || \"SOURCE\" == i) && -1 != t.indexOf(\"wxlocalresource://\")) {e.preventDefault(), e.stopPropagation();var o = n[\"wx-id\"];if (o || (o = L++, n[\"wx-id\"] = o), B[o]) return;B[o] = !0, wx.ready(function () {wx.getLocalImgData({ localId: t, success: function success(e) {n.src = e.localData;} });});}}}, !0), t.addEventListener(\"load\", function (e) {if (!y) {var n = e.target,i = n.tagName;if (n.src, \"IMG\" == i || \"VIDEO\" == i || \"AUDIO\" == i || \"SOURCE\" == i) {var t = n[\"wx-id\"];t && (B[t] = !1);}}}, !0), e && (o.wx = o.jWeixin = C), C;}var O;});\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js */ 10)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///26\n");

/***/ }),

/***/ 27:
/*!***************************************************************!*\
  !*** C:/Users/a/Desktop/toCWechat/uniapp/static/js/global.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(uni) {Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;var _regenerator = _interopRequireDefault(__webpack_require__(/*! ./node_modules/@babel/runtime/regenerator */ 28));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {try {var info = gen[key](arg);var value = info.value;} catch (error) {reject(error);return;}if (info.done) {resolve(value);} else {Promise.resolve(value).then(_next, _throw);}}function _asyncToGenerator(fn) {return function () {var self = this,args = arguments;return new Promise(function (resolve, reject) {var gen = fn.apply(self, args);function _next(value) {asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);}function _throw(err) {asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);}_next(undefined);});};} // 常量\nif (!globalThis) var globalThis = {};\nglobalThis.PATH = 'http://47.103.152.26/api';\n// globalThis.PATH=\"/geomantic/\"\nfunction\n\n\nshowLoading() {return _showLoading.apply(this, arguments);}function _showLoading() {_showLoading = _asyncToGenerator( /*#__PURE__*/_regenerator.default.mark(function _callee() {return _regenerator.default.wrap(function _callee$(_context) {while (1) {switch (_context.prev = _context.next) {case 0:\n            uni.showLoading({\n              title: \"请等待\",\n              mask: true });case 1:case \"end\":return _context.stop();}}}, _callee, this);}));return _showLoading.apply(this, arguments);}function\n\n\n\nhideLoading() {return _hideLoading.apply(this, arguments);}\n\n\n\n/**\r\n                                                             * @name 显示toast\r\n                                                             * @param res {status:\"0\",(msg||data):\"\"}\r\n                                                             */function _hideLoading() {_hideLoading = _asyncToGenerator( /*#__PURE__*/_regenerator.default.mark(function _callee2() {return _regenerator.default.wrap(function _callee2$(_context2) {while (1) {switch (_context2.prev = _context2.next) {case 0:uni.hideLoading();case 1:case \"end\":return _context2.stop();}}}, _callee2, this);}));return _hideLoading.apply(this, arguments);}function\nshowToast(_x) {return _showToast.apply(this, arguments);}function _showToast() {_showToast = _asyncToGenerator( /*#__PURE__*/_regenerator.default.mark(function _callee3(res) {return _regenerator.default.wrap(function _callee3$(_context3) {while (1) {switch (_context3.prev = _context3.next) {case 0:\n            uni.showToast({\n              title: res || res.msg,\n              mask: true,\n              icon: res.status == 0 ? \"success\" : \"\",\n              duration: 1500 });case 1:case \"end\":return _context3.stop();}}}, _callee3, this);}));return _showToast.apply(this, arguments);}var _default =\n\n\n\n{\n  showLoading: showLoading,\n  hideLoading: hideLoading,\n  showToast: showToast };exports.default = _default;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vc3RhdGljL2pzL2dsb2JhbC5qcyJdLCJuYW1lcyI6WyJnbG9iYWxUaGlzIiwiUEFUSCIsInNob3dMb2FkaW5nIiwidW5pIiwidGl0bGUiLCJtYXNrIiwiaGlkZUxvYWRpbmciLCJzaG93VG9hc3QiLCJyZXMiLCJtc2ciLCJpY29uIiwic3RhdHVzIiwiZHVyYXRpb24iXSwibWFwcGluZ3MiOiJzOEJBQUE7QUFDQSxJQUFHLENBQUNBLFVBQUosRUFBZSxJQUFJQSxVQUFVLEdBQUcsRUFBakI7QUFDZkEsVUFBVSxDQUFDQyxJQUFYLEdBQWdCLDBCQUFoQjtBQUNBOzs7O0FBSWVDLFcsa0pBQWY7QUFDQ0MsZUFBRyxDQUFDRCxXQUFKLENBQWdCO0FBQ2ZFLG1CQUFLLEVBQUMsS0FEUztBQUVmQyxrQkFBSSxFQUFDLElBRlUsRUFBaEIsRUFERCw4RDs7OztBQU9lQyxXOzs7O0FBSWY7OztpS0FKQSxpSkFDQ0gsR0FBRyxDQUFDRyxXQUFKLEdBREQsZ0U7QUFRZUMsUyw4SUFBZixrQkFBeUJDLEdBQXpCO0FBQ0NMLGVBQUcsQ0FBQ0ksU0FBSixDQUFjO0FBQ2JILG1CQUFLLEVBQUVJLEdBQUcsSUFBSUEsR0FBRyxDQUFDQyxHQURMO0FBRWJKLGtCQUFJLEVBQUUsSUFGTztBQUdiSyxrQkFBSSxFQUFFRixHQUFHLENBQUNHLE1BQUosSUFBWSxDQUFaLEdBQWMsU0FBZCxHQUF3QixFQUhqQjtBQUliQyxzQkFBUSxFQUFFLElBSkcsRUFBZCxFQURELGdFOzs7O0FBU2U7QUFDZFYsYUFBVyxFQUFYQSxXQURjO0FBRWRJLGFBQVcsRUFBWEEsV0FGYztBQUdkQyxXQUFTLEVBQVRBLFNBSGMsRSIsImZpbGUiOiIyNy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIOW4uOmHj1xyXG5pZighZ2xvYmFsVGhpcyl2YXIgZ2xvYmFsVGhpcyA9IHt9XHJcbmdsb2JhbFRoaXMuUEFUSD0naHR0cDovLzQ3LjEwMy4xNTIuMjYvYXBpJ1xyXG4vLyBnbG9iYWxUaGlzLlBBVEg9XCIvZ2VvbWFudGljL1wiXHJcblxyXG5cclxuXHJcbmFzeW5jIGZ1bmN0aW9uIHNob3dMb2FkaW5nKCl7XHJcblx0dW5pLnNob3dMb2FkaW5nKHtcclxuXHRcdHRpdGxlOlwi6K+3562J5b6FXCIsXHJcblx0XHRtYXNrOnRydWUsXHJcblx0fSlcclxufVxyXG5cclxuYXN5bmMgZnVuY3Rpb24gaGlkZUxvYWRpbmcoKXtcclxuXHR1bmkuaGlkZUxvYWRpbmcoKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEBuYW1lIOaYvuekunRvYXN0XHJcbiAqIEBwYXJhbSByZXMge3N0YXR1czpcIjBcIiwobXNnfHxkYXRhKTpcIlwifVxyXG4gKi9cclxuYXN5bmMgZnVuY3Rpb24gc2hvd1RvYXN0KHJlcyl7XHJcblx0dW5pLnNob3dUb2FzdCh7XHJcblx0XHR0aXRsZTogcmVzIHx8IHJlcy5tc2csXHJcblx0XHRtYXNrOiB0cnVlLFxyXG5cdFx0aWNvbjogcmVzLnN0YXR1cz09MD9cInN1Y2Nlc3NcIjpcIlwiLFxyXG5cdFx0ZHVyYXRpb246IDE1MDBcclxuXHR9KTtcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQge1xyXG5cdHNob3dMb2FkaW5nLFxyXG5cdGhpZGVMb2FkaW5nLFxyXG5cdHNob3dUb2FzdFxyXG59Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///27\n");

/***/ }),

/***/ 28:
/*!**********************************************************!*\
  !*** ./node_modules/@babel/runtime/regenerator/index.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = __webpack_require__(/*! regenerator-runtime */ 29);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGlCQUFpQixtQkFBTyxDQUFDLDZCQUFxQiIsImZpbGUiOiIyOC5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcInJlZ2VuZXJhdG9yLXJ1bnRpbWVcIik7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///28\n");

/***/ }),

/***/ 29:
/*!************************************************************!*\
  !*** ./node_modules/regenerator-runtime/runtime-module.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n// This method of obtaining a reference to the global object needs to be\n// kept identical to the way it is obtained in runtime.js\nvar g = (function() {\n  return this || (typeof self === \"object\" && self);\n})() || Function(\"return this\")();\n\n// Use `getOwnPropertyNames` because not all browsers support calling\n// `hasOwnProperty` on the global `self` object in a worker. See #183.\nvar hadRuntime = g.regeneratorRuntime &&\n  Object.getOwnPropertyNames(g).indexOf(\"regeneratorRuntime\") >= 0;\n\n// Save the old regeneratorRuntime in case it needs to be restored later.\nvar oldRuntime = hadRuntime && g.regeneratorRuntime;\n\n// Force reevalutation of runtime.js.\ng.regeneratorRuntime = undefined;\n\nmodule.exports = __webpack_require__(/*! ./runtime */ 30);\n\nif (hadRuntime) {\n  // Restore the original runtime.\n  g.regeneratorRuntime = oldRuntime;\n} else {\n  // Remove the global property added by runtime.js.\n  try {\n    delete g.regeneratorRuntime;\n  } catch(e) {\n    g.regeneratorRuntime = undefined;\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBLGlCQUFpQixtQkFBTyxDQUFDLG1CQUFXOztBQUVwQztBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSIsImZpbGUiOiIyOS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE0LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuLy8gVGhpcyBtZXRob2Qgb2Ygb2J0YWluaW5nIGEgcmVmZXJlbmNlIHRvIHRoZSBnbG9iYWwgb2JqZWN0IG5lZWRzIHRvIGJlXG4vLyBrZXB0IGlkZW50aWNhbCB0byB0aGUgd2F5IGl0IGlzIG9idGFpbmVkIGluIHJ1bnRpbWUuanNcbnZhciBnID0gKGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcyB8fCAodHlwZW9mIHNlbGYgPT09IFwib2JqZWN0XCIgJiYgc2VsZik7XG59KSgpIHx8IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKTtcblxuLy8gVXNlIGBnZXRPd25Qcm9wZXJ0eU5hbWVzYCBiZWNhdXNlIG5vdCBhbGwgYnJvd3NlcnMgc3VwcG9ydCBjYWxsaW5nXG4vLyBgaGFzT3duUHJvcGVydHlgIG9uIHRoZSBnbG9iYWwgYHNlbGZgIG9iamVjdCBpbiBhIHdvcmtlci4gU2VlICMxODMuXG52YXIgaGFkUnVudGltZSA9IGcucmVnZW5lcmF0b3JSdW50aW1lICYmXG4gIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGcpLmluZGV4T2YoXCJyZWdlbmVyYXRvclJ1bnRpbWVcIikgPj0gMDtcblxuLy8gU2F2ZSB0aGUgb2xkIHJlZ2VuZXJhdG9yUnVudGltZSBpbiBjYXNlIGl0IG5lZWRzIHRvIGJlIHJlc3RvcmVkIGxhdGVyLlxudmFyIG9sZFJ1bnRpbWUgPSBoYWRSdW50aW1lICYmIGcucmVnZW5lcmF0b3JSdW50aW1lO1xuXG4vLyBGb3JjZSByZWV2YWx1dGF0aW9uIG9mIHJ1bnRpbWUuanMuXG5nLnJlZ2VuZXJhdG9yUnVudGltZSA9IHVuZGVmaW5lZDtcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi9ydW50aW1lXCIpO1xuXG5pZiAoaGFkUnVudGltZSkge1xuICAvLyBSZXN0b3JlIHRoZSBvcmlnaW5hbCBydW50aW1lLlxuICBnLnJlZ2VuZXJhdG9yUnVudGltZSA9IG9sZFJ1bnRpbWU7XG59IGVsc2Uge1xuICAvLyBSZW1vdmUgdGhlIGdsb2JhbCBwcm9wZXJ0eSBhZGRlZCBieSBydW50aW1lLmpzLlxuICB0cnkge1xuICAgIGRlbGV0ZSBnLnJlZ2VuZXJhdG9yUnVudGltZTtcbiAgfSBjYXRjaChlKSB7XG4gICAgZy5yZWdlbmVyYXRvclJ1bnRpbWUgPSB1bmRlZmluZWQ7XG4gIH1cbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///29\n");

/***/ }),

/***/ 3:
/*!******************************************************************************************!*\
  !*** ./node_modules/@dcloudio/vue-cli-plugin-uni/packages/mp-vue/dist/mp.runtime.esm.js ***!
  \******************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(global) {/*!\n * Vue.js v2.6.10\n * (c) 2014-2019 Evan You\n * Released under the MIT License.\n */\n/*  */\n\nvar emptyObject = Object.freeze({});\n\n// These helpers produce better VM code in JS engines due to their\n// explicitness and function inlining.\nfunction isUndef (v) {\n  return v === undefined || v === null\n}\n\nfunction isDef (v) {\n  return v !== undefined && v !== null\n}\n\nfunction isTrue (v) {\n  return v === true\n}\n\nfunction isFalse (v) {\n  return v === false\n}\n\n/**\n * Check if value is primitive.\n */\nfunction isPrimitive (value) {\n  return (\n    typeof value === 'string' ||\n    typeof value === 'number' ||\n    // $flow-disable-line\n    typeof value === 'symbol' ||\n    typeof value === 'boolean'\n  )\n}\n\n/**\n * Quick object check - this is primarily used to tell\n * Objects from primitive values when we know the value\n * is a JSON-compliant type.\n */\nfunction isObject (obj) {\n  return obj !== null && typeof obj === 'object'\n}\n\n/**\n * Get the raw type string of a value, e.g., [object Object].\n */\nvar _toString = Object.prototype.toString;\n\nfunction toRawType (value) {\n  return _toString.call(value).slice(8, -1)\n}\n\n/**\n * Strict object type check. Only returns true\n * for plain JavaScript objects.\n */\nfunction isPlainObject (obj) {\n  return _toString.call(obj) === '[object Object]'\n}\n\nfunction isRegExp (v) {\n  return _toString.call(v) === '[object RegExp]'\n}\n\n/**\n * Check if val is a valid array index.\n */\nfunction isValidArrayIndex (val) {\n  var n = parseFloat(String(val));\n  return n >= 0 && Math.floor(n) === n && isFinite(val)\n}\n\nfunction isPromise (val) {\n  return (\n    isDef(val) &&\n    typeof val.then === 'function' &&\n    typeof val.catch === 'function'\n  )\n}\n\n/**\n * Convert a value to a string that is actually rendered.\n */\nfunction toString (val) {\n  return val == null\n    ? ''\n    : Array.isArray(val) || (isPlainObject(val) && val.toString === _toString)\n      ? JSON.stringify(val, null, 2)\n      : String(val)\n}\n\n/**\n * Convert an input value to a number for persistence.\n * If the conversion fails, return original string.\n */\nfunction toNumber (val) {\n  var n = parseFloat(val);\n  return isNaN(n) ? val : n\n}\n\n/**\n * Make a map and return a function for checking if a key\n * is in that map.\n */\nfunction makeMap (\n  str,\n  expectsLowerCase\n) {\n  var map = Object.create(null);\n  var list = str.split(',');\n  for (var i = 0; i < list.length; i++) {\n    map[list[i]] = true;\n  }\n  return expectsLowerCase\n    ? function (val) { return map[val.toLowerCase()]; }\n    : function (val) { return map[val]; }\n}\n\n/**\n * Check if a tag is a built-in tag.\n */\nvar isBuiltInTag = makeMap('slot,component', true);\n\n/**\n * Check if an attribute is a reserved attribute.\n */\nvar isReservedAttribute = makeMap('key,ref,slot,slot-scope,is');\n\n/**\n * Remove an item from an array.\n */\nfunction remove (arr, item) {\n  if (arr.length) {\n    var index = arr.indexOf(item);\n    if (index > -1) {\n      return arr.splice(index, 1)\n    }\n  }\n}\n\n/**\n * Check whether an object has the property.\n */\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nfunction hasOwn (obj, key) {\n  return hasOwnProperty.call(obj, key)\n}\n\n/**\n * Create a cached version of a pure function.\n */\nfunction cached (fn) {\n  var cache = Object.create(null);\n  return (function cachedFn (str) {\n    var hit = cache[str];\n    return hit || (cache[str] = fn(str))\n  })\n}\n\n/**\n * Camelize a hyphen-delimited string.\n */\nvar camelizeRE = /-(\\w)/g;\nvar camelize = cached(function (str) {\n  return str.replace(camelizeRE, function (_, c) { return c ? c.toUpperCase() : ''; })\n});\n\n/**\n * Capitalize a string.\n */\nvar capitalize = cached(function (str) {\n  return str.charAt(0).toUpperCase() + str.slice(1)\n});\n\n/**\n * Hyphenate a camelCase string.\n */\nvar hyphenateRE = /\\B([A-Z])/g;\nvar hyphenate = cached(function (str) {\n  return str.replace(hyphenateRE, '-$1').toLowerCase()\n});\n\n/**\n * Simple bind polyfill for environments that do not support it,\n * e.g., PhantomJS 1.x. Technically, we don't need this anymore\n * since native bind is now performant enough in most browsers.\n * But removing it would mean breaking code that was able to run in\n * PhantomJS 1.x, so this must be kept for backward compatibility.\n */\n\n/* istanbul ignore next */\nfunction polyfillBind (fn, ctx) {\n  function boundFn (a) {\n    var l = arguments.length;\n    return l\n      ? l > 1\n        ? fn.apply(ctx, arguments)\n        : fn.call(ctx, a)\n      : fn.call(ctx)\n  }\n\n  boundFn._length = fn.length;\n  return boundFn\n}\n\nfunction nativeBind (fn, ctx) {\n  return fn.bind(ctx)\n}\n\nvar bind = Function.prototype.bind\n  ? nativeBind\n  : polyfillBind;\n\n/**\n * Convert an Array-like object to a real Array.\n */\nfunction toArray (list, start) {\n  start = start || 0;\n  var i = list.length - start;\n  var ret = new Array(i);\n  while (i--) {\n    ret[i] = list[i + start];\n  }\n  return ret\n}\n\n/**\n * Mix properties into target object.\n */\nfunction extend (to, _from) {\n  for (var key in _from) {\n    to[key] = _from[key];\n  }\n  return to\n}\n\n/**\n * Merge an Array of Objects into a single Object.\n */\nfunction toObject (arr) {\n  var res = {};\n  for (var i = 0; i < arr.length; i++) {\n    if (arr[i]) {\n      extend(res, arr[i]);\n    }\n  }\n  return res\n}\n\n/* eslint-disable no-unused-vars */\n\n/**\n * Perform no operation.\n * Stubbing args to make Flow happy without leaving useless transpiled code\n * with ...rest (https://flow.org/blog/2017/05/07/Strict-Function-Call-Arity/).\n */\nfunction noop (a, b, c) {}\n\n/**\n * Always return false.\n */\nvar no = function (a, b, c) { return false; };\n\n/* eslint-enable no-unused-vars */\n\n/**\n * Return the same value.\n */\nvar identity = function (_) { return _; };\n\n/**\n * Check if two values are loosely equal - that is,\n * if they are plain objects, do they have the same shape?\n */\nfunction looseEqual (a, b) {\n  if (a === b) { return true }\n  var isObjectA = isObject(a);\n  var isObjectB = isObject(b);\n  if (isObjectA && isObjectB) {\n    try {\n      var isArrayA = Array.isArray(a);\n      var isArrayB = Array.isArray(b);\n      if (isArrayA && isArrayB) {\n        return a.length === b.length && a.every(function (e, i) {\n          return looseEqual(e, b[i])\n        })\n      } else if (a instanceof Date && b instanceof Date) {\n        return a.getTime() === b.getTime()\n      } else if (!isArrayA && !isArrayB) {\n        var keysA = Object.keys(a);\n        var keysB = Object.keys(b);\n        return keysA.length === keysB.length && keysA.every(function (key) {\n          return looseEqual(a[key], b[key])\n        })\n      } else {\n        /* istanbul ignore next */\n        return false\n      }\n    } catch (e) {\n      /* istanbul ignore next */\n      return false\n    }\n  } else if (!isObjectA && !isObjectB) {\n    return String(a) === String(b)\n  } else {\n    return false\n  }\n}\n\n/**\n * Return the first index at which a loosely equal value can be\n * found in the array (if value is a plain object, the array must\n * contain an object of the same shape), or -1 if it is not present.\n */\nfunction looseIndexOf (arr, val) {\n  for (var i = 0; i < arr.length; i++) {\n    if (looseEqual(arr[i], val)) { return i }\n  }\n  return -1\n}\n\n/**\n * Ensure a function is called only once.\n */\nfunction once (fn) {\n  var called = false;\n  return function () {\n    if (!called) {\n      called = true;\n      fn.apply(this, arguments);\n    }\n  }\n}\n\nvar ASSET_TYPES = [\n  'component',\n  'directive',\n  'filter'\n];\n\nvar LIFECYCLE_HOOKS = [\n  'beforeCreate',\n  'created',\n  'beforeMount',\n  'mounted',\n  'beforeUpdate',\n  'updated',\n  'beforeDestroy',\n  'destroyed',\n  'activated',\n  'deactivated',\n  'errorCaptured',\n  'serverPrefetch'\n];\n\n/*  */\n\n\n\nvar config = ({\n  /**\n   * Option merge strategies (used in core/util/options)\n   */\n  // $flow-disable-line\n  optionMergeStrategies: Object.create(null),\n\n  /**\n   * Whether to suppress warnings.\n   */\n  silent: false,\n\n  /**\n   * Show production mode tip message on boot?\n   */\n  productionTip: \"development\" !== 'production',\n\n  /**\n   * Whether to enable devtools\n   */\n  devtools: \"development\" !== 'production',\n\n  /**\n   * Whether to record perf\n   */\n  performance: false,\n\n  /**\n   * Error handler for watcher errors\n   */\n  errorHandler: null,\n\n  /**\n   * Warn handler for watcher warns\n   */\n  warnHandler: null,\n\n  /**\n   * Ignore certain custom elements\n   */\n  ignoredElements: [],\n\n  /**\n   * Custom user key aliases for v-on\n   */\n  // $flow-disable-line\n  keyCodes: Object.create(null),\n\n  /**\n   * Check if a tag is reserved so that it cannot be registered as a\n   * component. This is platform-dependent and may be overwritten.\n   */\n  isReservedTag: no,\n\n  /**\n   * Check if an attribute is reserved so that it cannot be used as a component\n   * prop. This is platform-dependent and may be overwritten.\n   */\n  isReservedAttr: no,\n\n  /**\n   * Check if a tag is an unknown element.\n   * Platform-dependent.\n   */\n  isUnknownElement: no,\n\n  /**\n   * Get the namespace of an element\n   */\n  getTagNamespace: noop,\n\n  /**\n   * Parse the real tag name for the specific platform.\n   */\n  parsePlatformTagName: identity,\n\n  /**\n   * Check if an attribute must be bound using property, e.g. value\n   * Platform-dependent.\n   */\n  mustUseProp: no,\n\n  /**\n   * Perform updates asynchronously. Intended to be used by Vue Test Utils\n   * This will significantly reduce performance if set to false.\n   */\n  async: true,\n\n  /**\n   * Exposed for legacy reasons\n   */\n  _lifecycleHooks: LIFECYCLE_HOOKS\n});\n\n/*  */\n\n/**\n * unicode letters used for parsing html tags, component names and property paths.\n * using https://www.w3.org/TR/html53/semantics-scripting.html#potentialcustomelementname\n * skipping \\u10000-\\uEFFFF due to it freezing up PhantomJS\n */\nvar unicodeRegExp = /a-zA-Z\\u00B7\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u203F-\\u2040\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD/;\n\n/**\n * Check if a string starts with $ or _\n */\nfunction isReserved (str) {\n  var c = (str + '').charCodeAt(0);\n  return c === 0x24 || c === 0x5F\n}\n\n/**\n * Define a property.\n */\nfunction def (obj, key, val, enumerable) {\n  Object.defineProperty(obj, key, {\n    value: val,\n    enumerable: !!enumerable,\n    writable: true,\n    configurable: true\n  });\n}\n\n/**\n * Parse simple path.\n */\nvar bailRE = new RegExp((\"[^\" + (unicodeRegExp.source) + \".$_\\\\d]\"));\nfunction parsePath (path) {\n  if (bailRE.test(path)) {\n    return\n  }\n  var segments = path.split('.');\n  return function (obj) {\n    for (var i = 0; i < segments.length; i++) {\n      if (!obj) { return }\n      obj = obj[segments[i]];\n    }\n    return obj\n  }\n}\n\n/*  */\n\n// can we use __proto__?\nvar hasProto = '__proto__' in {};\n\n// Browser environment sniffing\nvar inBrowser = typeof window !== 'undefined';\nvar inWeex = typeof WXEnvironment !== 'undefined' && !!WXEnvironment.platform;\nvar weexPlatform = inWeex && WXEnvironment.platform.toLowerCase();\nvar UA = inBrowser && window.navigator.userAgent.toLowerCase();\nvar isIE = UA && /msie|trident/.test(UA);\nvar isIE9 = UA && UA.indexOf('msie 9.0') > 0;\nvar isEdge = UA && UA.indexOf('edge/') > 0;\nvar isAndroid = (UA && UA.indexOf('android') > 0) || (weexPlatform === 'android');\nvar isIOS = (UA && /iphone|ipad|ipod|ios/.test(UA)) || (weexPlatform === 'ios');\nvar isChrome = UA && /chrome\\/\\d+/.test(UA) && !isEdge;\nvar isPhantomJS = UA && /phantomjs/.test(UA);\nvar isFF = UA && UA.match(/firefox\\/(\\d+)/);\n\n// Firefox has a \"watch\" function on Object.prototype...\nvar nativeWatch = ({}).watch;\nif (inBrowser) {\n  try {\n    var opts = {};\n    Object.defineProperty(opts, 'passive', ({\n      get: function get () {\n      }\n    })); // https://github.com/facebook/flow/issues/285\n    window.addEventListener('test-passive', null, opts);\n  } catch (e) {}\n}\n\n// this needs to be lazy-evaled because vue may be required before\n// vue-server-renderer can set VUE_ENV\nvar _isServer;\nvar isServerRendering = function () {\n  if (_isServer === undefined) {\n    /* istanbul ignore if */\n    if (!inBrowser && !inWeex && typeof global !== 'undefined') {\n      // detect presence of vue-server-renderer and avoid\n      // Webpack shimming the process\n      _isServer = global['process'] && global['process'].env.VUE_ENV === 'server';\n    } else {\n      _isServer = false;\n    }\n  }\n  return _isServer\n};\n\n// detect devtools\nvar devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;\n\n/* istanbul ignore next */\nfunction isNative (Ctor) {\n  return typeof Ctor === 'function' && /native code/.test(Ctor.toString())\n}\n\nvar hasSymbol =\n  typeof Symbol !== 'undefined' && isNative(Symbol) &&\n  typeof Reflect !== 'undefined' && isNative(Reflect.ownKeys);\n\nvar _Set;\n/* istanbul ignore if */ // $flow-disable-line\nif (typeof Set !== 'undefined' && isNative(Set)) {\n  // use native Set when available.\n  _Set = Set;\n} else {\n  // a non-standard Set polyfill that only works with primitive keys.\n  _Set = /*@__PURE__*/(function () {\n    function Set () {\n      this.set = Object.create(null);\n    }\n    Set.prototype.has = function has (key) {\n      return this.set[key] === true\n    };\n    Set.prototype.add = function add (key) {\n      this.set[key] = true;\n    };\n    Set.prototype.clear = function clear () {\n      this.set = Object.create(null);\n    };\n\n    return Set;\n  }());\n}\n\n/*  */\n\nvar warn = noop;\nvar tip = noop;\nvar generateComponentTrace = (noop); // work around flow check\nvar formatComponentName = (noop);\n\nif (true) {\n  var hasConsole = typeof console !== 'undefined';\n  var classifyRE = /(?:^|[-_])(\\w)/g;\n  var classify = function (str) { return str\n    .replace(classifyRE, function (c) { return c.toUpperCase(); })\n    .replace(/[-_]/g, ''); };\n\n  warn = function (msg, vm) {\n    var trace = vm ? generateComponentTrace(vm) : '';\n\n    if (config.warnHandler) {\n      config.warnHandler.call(null, msg, vm, trace);\n    } else if (hasConsole && (!config.silent)) {\n      console.error((\"[Vue warn]: \" + msg + trace));\n    }\n  };\n\n  tip = function (msg, vm) {\n    if (hasConsole && (!config.silent)) {\n      console.warn(\"[Vue tip]: \" + msg + (\n        vm ? generateComponentTrace(vm) : ''\n      ));\n    }\n  };\n\n  formatComponentName = function (vm, includeFile) {\n    {\n      if(vm.$scope && vm.$scope.is){\n        return vm.$scope.is\n      }\n    }\n    if (vm.$root === vm) {\n      return '<Root>'\n    }\n    var options = typeof vm === 'function' && vm.cid != null\n      ? vm.options\n      : vm._isVue\n        ? vm.$options || vm.constructor.options\n        : vm;\n    var name = options.name || options._componentTag;\n    var file = options.__file;\n    if (!name && file) {\n      var match = file.match(/([^/\\\\]+)\\.vue$/);\n      name = match && match[1];\n    }\n\n    return (\n      (name ? (\"<\" + (classify(name)) + \">\") : \"<Anonymous>\") +\n      (file && includeFile !== false ? (\" at \" + file) : '')\n    )\n  };\n\n  var repeat = function (str, n) {\n    var res = '';\n    while (n) {\n      if (n % 2 === 1) { res += str; }\n      if (n > 1) { str += str; }\n      n >>= 1;\n    }\n    return res\n  };\n\n  generateComponentTrace = function (vm) {\n    if (vm._isVue && vm.$parent) {\n      var tree = [];\n      var currentRecursiveSequence = 0;\n      while (vm) {\n        if (tree.length > 0) {\n          var last = tree[tree.length - 1];\n          if (last.constructor === vm.constructor) {\n            currentRecursiveSequence++;\n            vm = vm.$parent;\n            continue\n          } else if (currentRecursiveSequence > 0) {\n            tree[tree.length - 1] = [last, currentRecursiveSequence];\n            currentRecursiveSequence = 0;\n          }\n        }\n        tree.push(vm);\n        vm = vm.$parent;\n      }\n      return '\\n\\nfound in\\n\\n' + tree\n        .map(function (vm, i) { return (\"\" + (i === 0 ? '---> ' : repeat(' ', 5 + i * 2)) + (Array.isArray(vm)\n            ? ((formatComponentName(vm[0])) + \"... (\" + (vm[1]) + \" recursive calls)\")\n            : formatComponentName(vm))); })\n        .join('\\n')\n    } else {\n      return (\"\\n\\n(found in \" + (formatComponentName(vm)) + \")\")\n    }\n  };\n}\n\n/*  */\n\nvar uid = 0;\n\n/**\n * A dep is an observable that can have multiple\n * directives subscribing to it.\n */\nvar Dep = function Dep () {\n  this.id = uid++;\n  this.subs = [];\n};\n\nDep.prototype.addSub = function addSub (sub) {\n  this.subs.push(sub);\n};\n\nDep.prototype.removeSub = function removeSub (sub) {\n  remove(this.subs, sub);\n};\n\nDep.prototype.depend = function depend () {\n  if (Dep.SharedObject.target) {\n    Dep.SharedObject.target.addDep(this);\n  }\n};\n\nDep.prototype.notify = function notify () {\n  // stabilize the subscriber list first\n  var subs = this.subs.slice();\n  if ( true && !config.async) {\n    // subs aren't sorted in scheduler if not running async\n    // we need to sort them now to make sure they fire in correct\n    // order\n    subs.sort(function (a, b) { return a.id - b.id; });\n  }\n  for (var i = 0, l = subs.length; i < l; i++) {\n    subs[i].update();\n  }\n};\n\n// The current target watcher being evaluated.\n// This is globally unique because only one watcher\n// can be evaluated at a time.\n// fixed by xxxxxx (nvue shared vuex)\n/* eslint-disable no-undef */\nDep.SharedObject = typeof SharedObject !== 'undefined' ? SharedObject : {};\nDep.SharedObject.target = null;\nDep.SharedObject.targetStack = [];\n\nfunction pushTarget (target) {\n  Dep.SharedObject.targetStack.push(target);\n  Dep.SharedObject.target = target;\n}\n\nfunction popTarget () {\n  Dep.SharedObject.targetStack.pop();\n  Dep.SharedObject.target = Dep.SharedObject.targetStack[Dep.SharedObject.targetStack.length - 1];\n}\n\n/*  */\n\nvar VNode = function VNode (\n  tag,\n  data,\n  children,\n  text,\n  elm,\n  context,\n  componentOptions,\n  asyncFactory\n) {\n  this.tag = tag;\n  this.data = data;\n  this.children = children;\n  this.text = text;\n  this.elm = elm;\n  this.ns = undefined;\n  this.context = context;\n  this.fnContext = undefined;\n  this.fnOptions = undefined;\n  this.fnScopeId = undefined;\n  this.key = data && data.key;\n  this.componentOptions = componentOptions;\n  this.componentInstance = undefined;\n  this.parent = undefined;\n  this.raw = false;\n  this.isStatic = false;\n  this.isRootInsert = true;\n  this.isComment = false;\n  this.isCloned = false;\n  this.isOnce = false;\n  this.asyncFactory = asyncFactory;\n  this.asyncMeta = undefined;\n  this.isAsyncPlaceholder = false;\n};\n\nvar prototypeAccessors = { child: { configurable: true } };\n\n// DEPRECATED: alias for componentInstance for backwards compat.\n/* istanbul ignore next */\nprototypeAccessors.child.get = function () {\n  return this.componentInstance\n};\n\nObject.defineProperties( VNode.prototype, prototypeAccessors );\n\nvar createEmptyVNode = function (text) {\n  if ( text === void 0 ) text = '';\n\n  var node = new VNode();\n  node.text = text;\n  node.isComment = true;\n  return node\n};\n\nfunction createTextVNode (val) {\n  return new VNode(undefined, undefined, undefined, String(val))\n}\n\n// optimized shallow clone\n// used for static nodes and slot nodes because they may be reused across\n// multiple renders, cloning them avoids errors when DOM manipulations rely\n// on their elm reference.\nfunction cloneVNode (vnode) {\n  var cloned = new VNode(\n    vnode.tag,\n    vnode.data,\n    // #7975\n    // clone children array to avoid mutating original in case of cloning\n    // a child.\n    vnode.children && vnode.children.slice(),\n    vnode.text,\n    vnode.elm,\n    vnode.context,\n    vnode.componentOptions,\n    vnode.asyncFactory\n  );\n  cloned.ns = vnode.ns;\n  cloned.isStatic = vnode.isStatic;\n  cloned.key = vnode.key;\n  cloned.isComment = vnode.isComment;\n  cloned.fnContext = vnode.fnContext;\n  cloned.fnOptions = vnode.fnOptions;\n  cloned.fnScopeId = vnode.fnScopeId;\n  cloned.asyncMeta = vnode.asyncMeta;\n  cloned.isCloned = true;\n  return cloned\n}\n\n/*\n * not type checking this file because flow doesn't play well with\n * dynamically accessing methods on Array prototype\n */\n\nvar arrayProto = Array.prototype;\nvar arrayMethods = Object.create(arrayProto);\n\nvar methodsToPatch = [\n  'push',\n  'pop',\n  'shift',\n  'unshift',\n  'splice',\n  'sort',\n  'reverse'\n];\n\n/**\n * Intercept mutating methods and emit events\n */\nmethodsToPatch.forEach(function (method) {\n  // cache original method\n  var original = arrayProto[method];\n  def(arrayMethods, method, function mutator () {\n    var args = [], len = arguments.length;\n    while ( len-- ) args[ len ] = arguments[ len ];\n\n    var result = original.apply(this, args);\n    var ob = this.__ob__;\n    var inserted;\n    switch (method) {\n      case 'push':\n      case 'unshift':\n        inserted = args;\n        break\n      case 'splice':\n        inserted = args.slice(2);\n        break\n    }\n    if (inserted) { ob.observeArray(inserted); }\n    // notify change\n    ob.dep.notify();\n    return result\n  });\n});\n\n/*  */\n\nvar arrayKeys = Object.getOwnPropertyNames(arrayMethods);\n\n/**\n * In some cases we may want to disable observation inside a component's\n * update computation.\n */\nvar shouldObserve = true;\n\nfunction toggleObserving (value) {\n  shouldObserve = value;\n}\n\n/**\n * Observer class that is attached to each observed\n * object. Once attached, the observer converts the target\n * object's property keys into getter/setters that\n * collect dependencies and dispatch updates.\n */\nvar Observer = function Observer (value) {\n  this.value = value;\n  this.dep = new Dep();\n  this.vmCount = 0;\n  def(value, '__ob__', this);\n  if (Array.isArray(value)) {\n    if (hasProto) {\n      {// fixed by xxxxxx 微信小程序使用 plugins 之后，数组方法被直接挂载到了数组对象上，需要执行 copyAugment 逻辑\n        if(value.push !== value.__proto__.push){\n          copyAugment(value, arrayMethods, arrayKeys);\n        } else {\n          protoAugment(value, arrayMethods);\n        }\n      }\n    } else {\n      copyAugment(value, arrayMethods, arrayKeys);\n    }\n    this.observeArray(value);\n  } else {\n    this.walk(value);\n  }\n};\n\n/**\n * Walk through all properties and convert them into\n * getter/setters. This method should only be called when\n * value type is Object.\n */\nObserver.prototype.walk = function walk (obj) {\n  var keys = Object.keys(obj);\n  for (var i = 0; i < keys.length; i++) {\n    defineReactive$$1(obj, keys[i]);\n  }\n};\n\n/**\n * Observe a list of Array items.\n */\nObserver.prototype.observeArray = function observeArray (items) {\n  for (var i = 0, l = items.length; i < l; i++) {\n    observe(items[i]);\n  }\n};\n\n// helpers\n\n/**\n * Augment a target Object or Array by intercepting\n * the prototype chain using __proto__\n */\nfunction protoAugment (target, src) {\n  /* eslint-disable no-proto */\n  target.__proto__ = src;\n  /* eslint-enable no-proto */\n}\n\n/**\n * Augment a target Object or Array by defining\n * hidden properties.\n */\n/* istanbul ignore next */\nfunction copyAugment (target, src, keys) {\n  for (var i = 0, l = keys.length; i < l; i++) {\n    var key = keys[i];\n    def(target, key, src[key]);\n  }\n}\n\n/**\n * Attempt to create an observer instance for a value,\n * returns the new observer if successfully observed,\n * or the existing observer if the value already has one.\n */\nfunction observe (value, asRootData) {\n  if (!isObject(value) || value instanceof VNode) {\n    return\n  }\n  var ob;\n  if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {\n    ob = value.__ob__;\n  } else if (\n    shouldObserve &&\n    !isServerRendering() &&\n    (Array.isArray(value) || isPlainObject(value)) &&\n    Object.isExtensible(value) &&\n    !value._isVue\n  ) {\n    ob = new Observer(value);\n  }\n  if (asRootData && ob) {\n    ob.vmCount++;\n  }\n  return ob\n}\n\n/**\n * Define a reactive property on an Object.\n */\nfunction defineReactive$$1 (\n  obj,\n  key,\n  val,\n  customSetter,\n  shallow\n) {\n  var dep = new Dep();\n\n  var property = Object.getOwnPropertyDescriptor(obj, key);\n  if (property && property.configurable === false) {\n    return\n  }\n\n  // cater for pre-defined getter/setters\n  var getter = property && property.get;\n  var setter = property && property.set;\n  if ((!getter || setter) && arguments.length === 2) {\n    val = obj[key];\n  }\n\n  var childOb = !shallow && observe(val);\n  Object.defineProperty(obj, key, {\n    enumerable: true,\n    configurable: true,\n    get: function reactiveGetter () {\n      var value = getter ? getter.call(obj) : val;\n      if (Dep.SharedObject.target) { // fixed by xxxxxx\n        dep.depend();\n        if (childOb) {\n          childOb.dep.depend();\n          if (Array.isArray(value)) {\n            dependArray(value);\n          }\n        }\n      }\n      return value\n    },\n    set: function reactiveSetter (newVal) {\n      var value = getter ? getter.call(obj) : val;\n      /* eslint-disable no-self-compare */\n      if (newVal === value || (newVal !== newVal && value !== value)) {\n        return\n      }\n      /* eslint-enable no-self-compare */\n      if ( true && customSetter) {\n        customSetter();\n      }\n      // #7981: for accessor properties without setter\n      if (getter && !setter) { return }\n      if (setter) {\n        setter.call(obj, newVal);\n      } else {\n        val = newVal;\n      }\n      childOb = !shallow && observe(newVal);\n      dep.notify();\n    }\n  });\n}\n\n/**\n * Set a property on an object. Adds the new property and\n * triggers change notification if the property doesn't\n * already exist.\n */\nfunction set (target, key, val) {\n  if ( true &&\n    (isUndef(target) || isPrimitive(target))\n  ) {\n    warn((\"Cannot set reactive property on undefined, null, or primitive value: \" + ((target))));\n  }\n  if (Array.isArray(target) && isValidArrayIndex(key)) {\n    target.length = Math.max(target.length, key);\n    target.splice(key, 1, val);\n    return val\n  }\n  if (key in target && !(key in Object.prototype)) {\n    target[key] = val;\n    return val\n  }\n  var ob = (target).__ob__;\n  if (target._isVue || (ob && ob.vmCount)) {\n     true && warn(\n      'Avoid adding reactive properties to a Vue instance or its root $data ' +\n      'at runtime - declare it upfront in the data option.'\n    );\n    return val\n  }\n  if (!ob) {\n    target[key] = val;\n    return val\n  }\n  defineReactive$$1(ob.value, key, val);\n  ob.dep.notify();\n  return val\n}\n\n/**\n * Delete a property and trigger change if necessary.\n */\nfunction del (target, key) {\n  if ( true &&\n    (isUndef(target) || isPrimitive(target))\n  ) {\n    warn((\"Cannot delete reactive property on undefined, null, or primitive value: \" + ((target))));\n  }\n  if (Array.isArray(target) && isValidArrayIndex(key)) {\n    target.splice(key, 1);\n    return\n  }\n  var ob = (target).__ob__;\n  if (target._isVue || (ob && ob.vmCount)) {\n     true && warn(\n      'Avoid deleting properties on a Vue instance or its root $data ' +\n      '- just set it to null.'\n    );\n    return\n  }\n  if (!hasOwn(target, key)) {\n    return\n  }\n  delete target[key];\n  if (!ob) {\n    return\n  }\n  ob.dep.notify();\n}\n\n/**\n * Collect dependencies on array elements when the array is touched, since\n * we cannot intercept array element access like property getters.\n */\nfunction dependArray (value) {\n  for (var e = (void 0), i = 0, l = value.length; i < l; i++) {\n    e = value[i];\n    e && e.__ob__ && e.__ob__.dep.depend();\n    if (Array.isArray(e)) {\n      dependArray(e);\n    }\n  }\n}\n\n/*  */\n\n/**\n * Option overwriting strategies are functions that handle\n * how to merge a parent option value and a child option\n * value into the final value.\n */\nvar strats = config.optionMergeStrategies;\n\n/**\n * Options with restrictions\n */\nif (true) {\n  strats.el = strats.propsData = function (parent, child, vm, key) {\n    if (!vm) {\n      warn(\n        \"option \\\"\" + key + \"\\\" can only be used during instance \" +\n        'creation with the `new` keyword.'\n      );\n    }\n    return defaultStrat(parent, child)\n  };\n}\n\n/**\n * Helper that recursively merges two data objects together.\n */\nfunction mergeData (to, from) {\n  if (!from) { return to }\n  var key, toVal, fromVal;\n\n  var keys = hasSymbol\n    ? Reflect.ownKeys(from)\n    : Object.keys(from);\n\n  for (var i = 0; i < keys.length; i++) {\n    key = keys[i];\n    // in case the object is already observed...\n    if (key === '__ob__') { continue }\n    toVal = to[key];\n    fromVal = from[key];\n    if (!hasOwn(to, key)) {\n      set(to, key, fromVal);\n    } else if (\n      toVal !== fromVal &&\n      isPlainObject(toVal) &&\n      isPlainObject(fromVal)\n    ) {\n      mergeData(toVal, fromVal);\n    }\n  }\n  return to\n}\n\n/**\n * Data\n */\nfunction mergeDataOrFn (\n  parentVal,\n  childVal,\n  vm\n) {\n  if (!vm) {\n    // in a Vue.extend merge, both should be functions\n    if (!childVal) {\n      return parentVal\n    }\n    if (!parentVal) {\n      return childVal\n    }\n    // when parentVal & childVal are both present,\n    // we need to return a function that returns the\n    // merged result of both functions... no need to\n    // check if parentVal is a function here because\n    // it has to be a function to pass previous merges.\n    return function mergedDataFn () {\n      return mergeData(\n        typeof childVal === 'function' ? childVal.call(this, this) : childVal,\n        typeof parentVal === 'function' ? parentVal.call(this, this) : parentVal\n      )\n    }\n  } else {\n    return function mergedInstanceDataFn () {\n      // instance merge\n      var instanceData = typeof childVal === 'function'\n        ? childVal.call(vm, vm)\n        : childVal;\n      var defaultData = typeof parentVal === 'function'\n        ? parentVal.call(vm, vm)\n        : parentVal;\n      if (instanceData) {\n        return mergeData(instanceData, defaultData)\n      } else {\n        return defaultData\n      }\n    }\n  }\n}\n\nstrats.data = function (\n  parentVal,\n  childVal,\n  vm\n) {\n  if (!vm) {\n    if (childVal && typeof childVal !== 'function') {\n       true && warn(\n        'The \"data\" option should be a function ' +\n        'that returns a per-instance value in component ' +\n        'definitions.',\n        vm\n      );\n\n      return parentVal\n    }\n    return mergeDataOrFn(parentVal, childVal)\n  }\n\n  return mergeDataOrFn(parentVal, childVal, vm)\n};\n\n/**\n * Hooks and props are merged as arrays.\n */\nfunction mergeHook (\n  parentVal,\n  childVal\n) {\n  var res = childVal\n    ? parentVal\n      ? parentVal.concat(childVal)\n      : Array.isArray(childVal)\n        ? childVal\n        : [childVal]\n    : parentVal;\n  return res\n    ? dedupeHooks(res)\n    : res\n}\n\nfunction dedupeHooks (hooks) {\n  var res = [];\n  for (var i = 0; i < hooks.length; i++) {\n    if (res.indexOf(hooks[i]) === -1) {\n      res.push(hooks[i]);\n    }\n  }\n  return res\n}\n\nLIFECYCLE_HOOKS.forEach(function (hook) {\n  strats[hook] = mergeHook;\n});\n\n/**\n * Assets\n *\n * When a vm is present (instance creation), we need to do\n * a three-way merge between constructor options, instance\n * options and parent options.\n */\nfunction mergeAssets (\n  parentVal,\n  childVal,\n  vm,\n  key\n) {\n  var res = Object.create(parentVal || null);\n  if (childVal) {\n     true && assertObjectType(key, childVal, vm);\n    return extend(res, childVal)\n  } else {\n    return res\n  }\n}\n\nASSET_TYPES.forEach(function (type) {\n  strats[type + 's'] = mergeAssets;\n});\n\n/**\n * Watchers.\n *\n * Watchers hashes should not overwrite one\n * another, so we merge them as arrays.\n */\nstrats.watch = function (\n  parentVal,\n  childVal,\n  vm,\n  key\n) {\n  // work around Firefox's Object.prototype.watch...\n  if (parentVal === nativeWatch) { parentVal = undefined; }\n  if (childVal === nativeWatch) { childVal = undefined; }\n  /* istanbul ignore if */\n  if (!childVal) { return Object.create(parentVal || null) }\n  if (true) {\n    assertObjectType(key, childVal, vm);\n  }\n  if (!parentVal) { return childVal }\n  var ret = {};\n  extend(ret, parentVal);\n  for (var key$1 in childVal) {\n    var parent = ret[key$1];\n    var child = childVal[key$1];\n    if (parent && !Array.isArray(parent)) {\n      parent = [parent];\n    }\n    ret[key$1] = parent\n      ? parent.concat(child)\n      : Array.isArray(child) ? child : [child];\n  }\n  return ret\n};\n\n/**\n * Other object hashes.\n */\nstrats.props =\nstrats.methods =\nstrats.inject =\nstrats.computed = function (\n  parentVal,\n  childVal,\n  vm,\n  key\n) {\n  if (childVal && \"development\" !== 'production') {\n    assertObjectType(key, childVal, vm);\n  }\n  if (!parentVal) { return childVal }\n  var ret = Object.create(null);\n  extend(ret, parentVal);\n  if (childVal) { extend(ret, childVal); }\n  return ret\n};\nstrats.provide = mergeDataOrFn;\n\n/**\n * Default strategy.\n */\nvar defaultStrat = function (parentVal, childVal) {\n  return childVal === undefined\n    ? parentVal\n    : childVal\n};\n\n/**\n * Validate component names\n */\nfunction checkComponents (options) {\n  for (var key in options.components) {\n    validateComponentName(key);\n  }\n}\n\nfunction validateComponentName (name) {\n  if (!new RegExp((\"^[a-zA-Z][\\\\-\\\\.0-9_\" + (unicodeRegExp.source) + \"]*$\")).test(name)) {\n    warn(\n      'Invalid component name: \"' + name + '\". Component names ' +\n      'should conform to valid custom element name in html5 specification.'\n    );\n  }\n  if (isBuiltInTag(name) || config.isReservedTag(name)) {\n    warn(\n      'Do not use built-in or reserved HTML elements as component ' +\n      'id: ' + name\n    );\n  }\n}\n\n/**\n * Ensure all props option syntax are normalized into the\n * Object-based format.\n */\nfunction normalizeProps (options, vm) {\n  var props = options.props;\n  if (!props) { return }\n  var res = {};\n  var i, val, name;\n  if (Array.isArray(props)) {\n    i = props.length;\n    while (i--) {\n      val = props[i];\n      if (typeof val === 'string') {\n        name = camelize(val);\n        res[name] = { type: null };\n      } else if (true) {\n        warn('props must be strings when using array syntax.');\n      }\n    }\n  } else if (isPlainObject(props)) {\n    for (var key in props) {\n      val = props[key];\n      name = camelize(key);\n      res[name] = isPlainObject(val)\n        ? val\n        : { type: val };\n    }\n  } else if (true) {\n    warn(\n      \"Invalid value for option \\\"props\\\": expected an Array or an Object, \" +\n      \"but got \" + (toRawType(props)) + \".\",\n      vm\n    );\n  }\n  options.props = res;\n}\n\n/**\n * Normalize all injections into Object-based format\n */\nfunction normalizeInject (options, vm) {\n  var inject = options.inject;\n  if (!inject) { return }\n  var normalized = options.inject = {};\n  if (Array.isArray(inject)) {\n    for (var i = 0; i < inject.length; i++) {\n      normalized[inject[i]] = { from: inject[i] };\n    }\n  } else if (isPlainObject(inject)) {\n    for (var key in inject) {\n      var val = inject[key];\n      normalized[key] = isPlainObject(val)\n        ? extend({ from: key }, val)\n        : { from: val };\n    }\n  } else if (true) {\n    warn(\n      \"Invalid value for option \\\"inject\\\": expected an Array or an Object, \" +\n      \"but got \" + (toRawType(inject)) + \".\",\n      vm\n    );\n  }\n}\n\n/**\n * Normalize raw function directives into object format.\n */\nfunction normalizeDirectives (options) {\n  var dirs = options.directives;\n  if (dirs) {\n    for (var key in dirs) {\n      var def$$1 = dirs[key];\n      if (typeof def$$1 === 'function') {\n        dirs[key] = { bind: def$$1, update: def$$1 };\n      }\n    }\n  }\n}\n\nfunction assertObjectType (name, value, vm) {\n  if (!isPlainObject(value)) {\n    warn(\n      \"Invalid value for option \\\"\" + name + \"\\\": expected an Object, \" +\n      \"but got \" + (toRawType(value)) + \".\",\n      vm\n    );\n  }\n}\n\n/**\n * Merge two option objects into a new one.\n * Core utility used in both instantiation and inheritance.\n */\nfunction mergeOptions (\n  parent,\n  child,\n  vm\n) {\n  if (true) {\n    checkComponents(child);\n  }\n\n  if (typeof child === 'function') {\n    child = child.options;\n  }\n\n  normalizeProps(child, vm);\n  normalizeInject(child, vm);\n  normalizeDirectives(child);\n\n  // Apply extends and mixins on the child options,\n  // but only if it is a raw options object that isn't\n  // the result of another mergeOptions call.\n  // Only merged options has the _base property.\n  if (!child._base) {\n    if (child.extends) {\n      parent = mergeOptions(parent, child.extends, vm);\n    }\n    if (child.mixins) {\n      for (var i = 0, l = child.mixins.length; i < l; i++) {\n        parent = mergeOptions(parent, child.mixins[i], vm);\n      }\n    }\n  }\n\n  var options = {};\n  var key;\n  for (key in parent) {\n    mergeField(key);\n  }\n  for (key in child) {\n    if (!hasOwn(parent, key)) {\n      mergeField(key);\n    }\n  }\n  function mergeField (key) {\n    var strat = strats[key] || defaultStrat;\n    options[key] = strat(parent[key], child[key], vm, key);\n  }\n  return options\n}\n\n/**\n * Resolve an asset.\n * This function is used because child instances need access\n * to assets defined in its ancestor chain.\n */\nfunction resolveAsset (\n  options,\n  type,\n  id,\n  warnMissing\n) {\n  /* istanbul ignore if */\n  if (typeof id !== 'string') {\n    return\n  }\n  var assets = options[type];\n  // check local registration variations first\n  if (hasOwn(assets, id)) { return assets[id] }\n  var camelizedId = camelize(id);\n  if (hasOwn(assets, camelizedId)) { return assets[camelizedId] }\n  var PascalCaseId = capitalize(camelizedId);\n  if (hasOwn(assets, PascalCaseId)) { return assets[PascalCaseId] }\n  // fallback to prototype chain\n  var res = assets[id] || assets[camelizedId] || assets[PascalCaseId];\n  if ( true && warnMissing && !res) {\n    warn(\n      'Failed to resolve ' + type.slice(0, -1) + ': ' + id,\n      options\n    );\n  }\n  return res\n}\n\n/*  */\n\n\n\nfunction validateProp (\n  key,\n  propOptions,\n  propsData,\n  vm\n) {\n  var prop = propOptions[key];\n  var absent = !hasOwn(propsData, key);\n  var value = propsData[key];\n  // boolean casting\n  var booleanIndex = getTypeIndex(Boolean, prop.type);\n  if (booleanIndex > -1) {\n    if (absent && !hasOwn(prop, 'default')) {\n      value = false;\n    } else if (value === '' || value === hyphenate(key)) {\n      // only cast empty string / same name to boolean if\n      // boolean has higher priority\n      var stringIndex = getTypeIndex(String, prop.type);\n      if (stringIndex < 0 || booleanIndex < stringIndex) {\n        value = true;\n      }\n    }\n  }\n  // check default value\n  if (value === undefined) {\n    value = getPropDefaultValue(vm, prop, key);\n    // since the default value is a fresh copy,\n    // make sure to observe it.\n    var prevShouldObserve = shouldObserve;\n    toggleObserving(true);\n    observe(value);\n    toggleObserving(prevShouldObserve);\n  }\n  if (\n    true\n  ) {\n    assertProp(prop, key, value, vm, absent);\n  }\n  return value\n}\n\n/**\n * Get the default value of a prop.\n */\nfunction getPropDefaultValue (vm, prop, key) {\n  // no default, return undefined\n  if (!hasOwn(prop, 'default')) {\n    return undefined\n  }\n  var def = prop.default;\n  // warn against non-factory defaults for Object & Array\n  if ( true && isObject(def)) {\n    warn(\n      'Invalid default value for prop \"' + key + '\": ' +\n      'Props with type Object/Array must use a factory function ' +\n      'to return the default value.',\n      vm\n    );\n  }\n  // the raw prop value was also undefined from previous render,\n  // return previous default value to avoid unnecessary watcher trigger\n  if (vm && vm.$options.propsData &&\n    vm.$options.propsData[key] === undefined &&\n    vm._props[key] !== undefined\n  ) {\n    return vm._props[key]\n  }\n  // call factory function for non-Function types\n  // a value is Function if its prototype is function even across different execution context\n  return typeof def === 'function' && getType(prop.type) !== 'Function'\n    ? def.call(vm)\n    : def\n}\n\n/**\n * Assert whether a prop is valid.\n */\nfunction assertProp (\n  prop,\n  name,\n  value,\n  vm,\n  absent\n) {\n  if (prop.required && absent) {\n    warn(\n      'Missing required prop: \"' + name + '\"',\n      vm\n    );\n    return\n  }\n  if (value == null && !prop.required) {\n    return\n  }\n  var type = prop.type;\n  var valid = !type || type === true;\n  var expectedTypes = [];\n  if (type) {\n    if (!Array.isArray(type)) {\n      type = [type];\n    }\n    for (var i = 0; i < type.length && !valid; i++) {\n      var assertedType = assertType(value, type[i]);\n      expectedTypes.push(assertedType.expectedType || '');\n      valid = assertedType.valid;\n    }\n  }\n\n  if (!valid) {\n    warn(\n      getInvalidTypeMessage(name, value, expectedTypes),\n      vm\n    );\n    return\n  }\n  var validator = prop.validator;\n  if (validator) {\n    if (!validator(value)) {\n      warn(\n        'Invalid prop: custom validator check failed for prop \"' + name + '\".',\n        vm\n      );\n    }\n  }\n}\n\nvar simpleCheckRE = /^(String|Number|Boolean|Function|Symbol)$/;\n\nfunction assertType (value, type) {\n  var valid;\n  var expectedType = getType(type);\n  if (simpleCheckRE.test(expectedType)) {\n    var t = typeof value;\n    valid = t === expectedType.toLowerCase();\n    // for primitive wrapper objects\n    if (!valid && t === 'object') {\n      valid = value instanceof type;\n    }\n  } else if (expectedType === 'Object') {\n    valid = isPlainObject(value);\n  } else if (expectedType === 'Array') {\n    valid = Array.isArray(value);\n  } else {\n    valid = value instanceof type;\n  }\n  return {\n    valid: valid,\n    expectedType: expectedType\n  }\n}\n\n/**\n * Use function string name to check built-in types,\n * because a simple equality check will fail when running\n * across different vms / iframes.\n */\nfunction getType (fn) {\n  var match = fn && fn.toString().match(/^\\s*function (\\w+)/);\n  return match ? match[1] : ''\n}\n\nfunction isSameType (a, b) {\n  return getType(a) === getType(b)\n}\n\nfunction getTypeIndex (type, expectedTypes) {\n  if (!Array.isArray(expectedTypes)) {\n    return isSameType(expectedTypes, type) ? 0 : -1\n  }\n  for (var i = 0, len = expectedTypes.length; i < len; i++) {\n    if (isSameType(expectedTypes[i], type)) {\n      return i\n    }\n  }\n  return -1\n}\n\nfunction getInvalidTypeMessage (name, value, expectedTypes) {\n  var message = \"Invalid prop: type check failed for prop \\\"\" + name + \"\\\".\" +\n    \" Expected \" + (expectedTypes.map(capitalize).join(', '));\n  var expectedType = expectedTypes[0];\n  var receivedType = toRawType(value);\n  var expectedValue = styleValue(value, expectedType);\n  var receivedValue = styleValue(value, receivedType);\n  // check if we need to specify expected value\n  if (expectedTypes.length === 1 &&\n      isExplicable(expectedType) &&\n      !isBoolean(expectedType, receivedType)) {\n    message += \" with value \" + expectedValue;\n  }\n  message += \", got \" + receivedType + \" \";\n  // check if we need to specify received value\n  if (isExplicable(receivedType)) {\n    message += \"with value \" + receivedValue + \".\";\n  }\n  return message\n}\n\nfunction styleValue (value, type) {\n  if (type === 'String') {\n    return (\"\\\"\" + value + \"\\\"\")\n  } else if (type === 'Number') {\n    return (\"\" + (Number(value)))\n  } else {\n    return (\"\" + value)\n  }\n}\n\nfunction isExplicable (value) {\n  var explicitTypes = ['string', 'number', 'boolean'];\n  return explicitTypes.some(function (elem) { return value.toLowerCase() === elem; })\n}\n\nfunction isBoolean () {\n  var args = [], len = arguments.length;\n  while ( len-- ) args[ len ] = arguments[ len ];\n\n  return args.some(function (elem) { return elem.toLowerCase() === 'boolean'; })\n}\n\n/*  */\n\nfunction handleError (err, vm, info) {\n  // Deactivate deps tracking while processing error handler to avoid possible infinite rendering.\n  // See: https://github.com/vuejs/vuex/issues/1505\n  pushTarget();\n  try {\n    if (vm) {\n      var cur = vm;\n      while ((cur = cur.$parent)) {\n        var hooks = cur.$options.errorCaptured;\n        if (hooks) {\n          for (var i = 0; i < hooks.length; i++) {\n            try {\n              var capture = hooks[i].call(cur, err, vm, info) === false;\n              if (capture) { return }\n            } catch (e) {\n              globalHandleError(e, cur, 'errorCaptured hook');\n            }\n          }\n        }\n      }\n    }\n    globalHandleError(err, vm, info);\n  } finally {\n    popTarget();\n  }\n}\n\nfunction invokeWithErrorHandling (\n  handler,\n  context,\n  args,\n  vm,\n  info\n) {\n  var res;\n  try {\n    res = args ? handler.apply(context, args) : handler.call(context);\n    if (res && !res._isVue && isPromise(res) && !res._handled) {\n      res.catch(function (e) { return handleError(e, vm, info + \" (Promise/async)\"); });\n      // issue #9511\n      // avoid catch triggering multiple times when nested calls\n      res._handled = true;\n    }\n  } catch (e) {\n    handleError(e, vm, info);\n  }\n  return res\n}\n\nfunction globalHandleError (err, vm, info) {\n  if (config.errorHandler) {\n    try {\n      return config.errorHandler.call(null, err, vm, info)\n    } catch (e) {\n      // if the user intentionally throws the original error in the handler,\n      // do not log it twice\n      if (e !== err) {\n        logError(e, null, 'config.errorHandler');\n      }\n    }\n  }\n  logError(err, vm, info);\n}\n\nfunction logError (err, vm, info) {\n  if (true) {\n    warn((\"Error in \" + info + \": \\\"\" + (err.toString()) + \"\\\"\"), vm);\n  }\n  /* istanbul ignore else */\n  if ((inBrowser || inWeex) && typeof console !== 'undefined') {\n    console.error(err);\n  } else {\n    throw err\n  }\n}\n\n/*  */\n\nvar callbacks = [];\nvar pending = false;\n\nfunction flushCallbacks () {\n  pending = false;\n  var copies = callbacks.slice(0);\n  callbacks.length = 0;\n  for (var i = 0; i < copies.length; i++) {\n    copies[i]();\n  }\n}\n\n// Here we have async deferring wrappers using microtasks.\n// In 2.5 we used (macro) tasks (in combination with microtasks).\n// However, it has subtle problems when state is changed right before repaint\n// (e.g. #6813, out-in transitions).\n// Also, using (macro) tasks in event handler would cause some weird behaviors\n// that cannot be circumvented (e.g. #7109, #7153, #7546, #7834, #8109).\n// So we now use microtasks everywhere, again.\n// A major drawback of this tradeoff is that there are some scenarios\n// where microtasks have too high a priority and fire in between supposedly\n// sequential events (e.g. #4521, #6690, which have workarounds)\n// or even between bubbling of the same event (#6566).\nvar timerFunc;\n\n// The nextTick behavior leverages the microtask queue, which can be accessed\n// via either native Promise.then or MutationObserver.\n// MutationObserver has wider support, however it is seriously bugged in\n// UIWebView in iOS >= 9.3.3 when triggered in touch event handlers. It\n// completely stops working after triggering a few times... so, if native\n// Promise is available, we will use it:\n/* istanbul ignore next, $flow-disable-line */\nif (typeof Promise !== 'undefined' && isNative(Promise)) {\n  var p = Promise.resolve();\n  timerFunc = function () {\n    p.then(flushCallbacks);\n    // In problematic UIWebViews, Promise.then doesn't completely break, but\n    // it can get stuck in a weird state where callbacks are pushed into the\n    // microtask queue but the queue isn't being flushed, until the browser\n    // needs to do some other work, e.g. handle a timer. Therefore we can\n    // \"force\" the microtask queue to be flushed by adding an empty timer.\n    if (isIOS) { setTimeout(noop); }\n  };\n} else if (!isIE && typeof MutationObserver !== 'undefined' && (\n  isNative(MutationObserver) ||\n  // PhantomJS and iOS 7.x\n  MutationObserver.toString() === '[object MutationObserverConstructor]'\n)) {\n  // Use MutationObserver where native Promise is not available,\n  // e.g. PhantomJS, iOS7, Android 4.4\n  // (#6466 MutationObserver is unreliable in IE11)\n  var counter = 1;\n  var observer = new MutationObserver(flushCallbacks);\n  var textNode = document.createTextNode(String(counter));\n  observer.observe(textNode, {\n    characterData: true\n  });\n  timerFunc = function () {\n    counter = (counter + 1) % 2;\n    textNode.data = String(counter);\n  };\n} else if (typeof setImmediate !== 'undefined' && isNative(setImmediate)) {\n  // Fallback to setImmediate.\n  // Techinically it leverages the (macro) task queue,\n  // but it is still a better choice than setTimeout.\n  timerFunc = function () {\n    setImmediate(flushCallbacks);\n  };\n} else {\n  // Fallback to setTimeout.\n  timerFunc = function () {\n    setTimeout(flushCallbacks, 0);\n  };\n}\n\nfunction nextTick (cb, ctx) {\n  var _resolve;\n  callbacks.push(function () {\n    if (cb) {\n      try {\n        cb.call(ctx);\n      } catch (e) {\n        handleError(e, ctx, 'nextTick');\n      }\n    } else if (_resolve) {\n      _resolve(ctx);\n    }\n  });\n  if (!pending) {\n    pending = true;\n    timerFunc();\n  }\n  // $flow-disable-line\n  if (!cb && typeof Promise !== 'undefined') {\n    return new Promise(function (resolve) {\n      _resolve = resolve;\n    })\n  }\n}\n\n/*  */\n\n/* not type checking this file because flow doesn't play well with Proxy */\n\nvar initProxy;\n\nif (true) {\n  var allowedGlobals = makeMap(\n    'Infinity,undefined,NaN,isFinite,isNaN,' +\n    'parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,' +\n    'Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,' +\n    'require' // for Webpack/Browserify\n  );\n\n  var warnNonPresent = function (target, key) {\n    warn(\n      \"Property or method \\\"\" + key + \"\\\" is not defined on the instance but \" +\n      'referenced during render. Make sure that this property is reactive, ' +\n      'either in the data option, or for class-based components, by ' +\n      'initializing the property. ' +\n      'See: https://vuejs.org/v2/guide/reactivity.html#Declaring-Reactive-Properties.',\n      target\n    );\n  };\n\n  var warnReservedPrefix = function (target, key) {\n    warn(\n      \"Property \\\"\" + key + \"\\\" must be accessed with \\\"$data.\" + key + \"\\\" because \" +\n      'properties starting with \"$\" or \"_\" are not proxied in the Vue instance to ' +\n      'prevent conflicts with Vue internals' +\n      'See: https://vuejs.org/v2/api/#data',\n      target\n    );\n  };\n\n  var hasProxy =\n    typeof Proxy !== 'undefined' && isNative(Proxy);\n\n  if (hasProxy) {\n    var isBuiltInModifier = makeMap('stop,prevent,self,ctrl,shift,alt,meta,exact');\n    config.keyCodes = new Proxy(config.keyCodes, {\n      set: function set (target, key, value) {\n        if (isBuiltInModifier(key)) {\n          warn((\"Avoid overwriting built-in modifier in config.keyCodes: .\" + key));\n          return false\n        } else {\n          target[key] = value;\n          return true\n        }\n      }\n    });\n  }\n\n  var hasHandler = {\n    has: function has (target, key) {\n      var has = key in target;\n      var isAllowed = allowedGlobals(key) ||\n        (typeof key === 'string' && key.charAt(0) === '_' && !(key in target.$data));\n      if (!has && !isAllowed) {\n        if (key in target.$data) { warnReservedPrefix(target, key); }\n        else { warnNonPresent(target, key); }\n      }\n      return has || !isAllowed\n    }\n  };\n\n  var getHandler = {\n    get: function get (target, key) {\n      if (typeof key === 'string' && !(key in target)) {\n        if (key in target.$data) { warnReservedPrefix(target, key); }\n        else { warnNonPresent(target, key); }\n      }\n      return target[key]\n    }\n  };\n\n  initProxy = function initProxy (vm) {\n    if (hasProxy) {\n      // determine which proxy handler to use\n      var options = vm.$options;\n      var handlers = options.render && options.render._withStripped\n        ? getHandler\n        : hasHandler;\n      vm._renderProxy = new Proxy(vm, handlers);\n    } else {\n      vm._renderProxy = vm;\n    }\n  };\n}\n\n/*  */\n\nvar seenObjects = new _Set();\n\n/**\n * Recursively traverse an object to evoke all converted\n * getters, so that every nested property inside the object\n * is collected as a \"deep\" dependency.\n */\nfunction traverse (val) {\n  _traverse(val, seenObjects);\n  seenObjects.clear();\n}\n\nfunction _traverse (val, seen) {\n  var i, keys;\n  var isA = Array.isArray(val);\n  if ((!isA && !isObject(val)) || Object.isFrozen(val) || val instanceof VNode) {\n    return\n  }\n  if (val.__ob__) {\n    var depId = val.__ob__.dep.id;\n    if (seen.has(depId)) {\n      return\n    }\n    seen.add(depId);\n  }\n  if (isA) {\n    i = val.length;\n    while (i--) { _traverse(val[i], seen); }\n  } else {\n    keys = Object.keys(val);\n    i = keys.length;\n    while (i--) { _traverse(val[keys[i]], seen); }\n  }\n}\n\nvar mark;\nvar measure;\n\nif (true) {\n  var perf = inBrowser && window.performance;\n  /* istanbul ignore if */\n  if (\n    perf &&\n    perf.mark &&\n    perf.measure &&\n    perf.clearMarks &&\n    perf.clearMeasures\n  ) {\n    mark = function (tag) { return perf.mark(tag); };\n    measure = function (name, startTag, endTag) {\n      perf.measure(name, startTag, endTag);\n      perf.clearMarks(startTag);\n      perf.clearMarks(endTag);\n      // perf.clearMeasures(name)\n    };\n  }\n}\n\n/*  */\n\nvar normalizeEvent = cached(function (name) {\n  var passive = name.charAt(0) === '&';\n  name = passive ? name.slice(1) : name;\n  var once$$1 = name.charAt(0) === '~'; // Prefixed last, checked first\n  name = once$$1 ? name.slice(1) : name;\n  var capture = name.charAt(0) === '!';\n  name = capture ? name.slice(1) : name;\n  return {\n    name: name,\n    once: once$$1,\n    capture: capture,\n    passive: passive\n  }\n});\n\nfunction createFnInvoker (fns, vm) {\n  function invoker () {\n    var arguments$1 = arguments;\n\n    var fns = invoker.fns;\n    if (Array.isArray(fns)) {\n      var cloned = fns.slice();\n      for (var i = 0; i < cloned.length; i++) {\n        invokeWithErrorHandling(cloned[i], null, arguments$1, vm, \"v-on handler\");\n      }\n    } else {\n      // return handler return value for single handlers\n      return invokeWithErrorHandling(fns, null, arguments, vm, \"v-on handler\")\n    }\n  }\n  invoker.fns = fns;\n  return invoker\n}\n\nfunction updateListeners (\n  on,\n  oldOn,\n  add,\n  remove$$1,\n  createOnceHandler,\n  vm\n) {\n  var name, def$$1, cur, old, event;\n  for (name in on) {\n    def$$1 = cur = on[name];\n    old = oldOn[name];\n    event = normalizeEvent(name);\n    if (isUndef(cur)) {\n       true && warn(\n        \"Invalid handler for event \\\"\" + (event.name) + \"\\\": got \" + String(cur),\n        vm\n      );\n    } else if (isUndef(old)) {\n      if (isUndef(cur.fns)) {\n        cur = on[name] = createFnInvoker(cur, vm);\n      }\n      if (isTrue(event.once)) {\n        cur = on[name] = createOnceHandler(event.name, cur, event.capture);\n      }\n      add(event.name, cur, event.capture, event.passive, event.params);\n    } else if (cur !== old) {\n      old.fns = cur;\n      on[name] = old;\n    }\n  }\n  for (name in oldOn) {\n    if (isUndef(on[name])) {\n      event = normalizeEvent(name);\n      remove$$1(event.name, oldOn[name], event.capture);\n    }\n  }\n}\n\n/*  */\n\n/*  */\n\nfunction extractPropsFromVNodeData (\n  data,\n  Ctor,\n  tag\n) {\n  // we are only extracting raw values here.\n  // validation and default values are handled in the child\n  // component itself.\n  var propOptions = Ctor.options.props;\n  if (isUndef(propOptions)) {\n    return\n  }\n  var res = {};\n  var attrs = data.attrs;\n  var props = data.props;\n  if (isDef(attrs) || isDef(props)) {\n    for (var key in propOptions) {\n      var altKey = hyphenate(key);\n      if (true) {\n        var keyInLowerCase = key.toLowerCase();\n        if (\n          key !== keyInLowerCase &&\n          attrs && hasOwn(attrs, keyInLowerCase)\n        ) {\n          tip(\n            \"Prop \\\"\" + keyInLowerCase + \"\\\" is passed to component \" +\n            (formatComponentName(tag || Ctor)) + \", but the declared prop name is\" +\n            \" \\\"\" + key + \"\\\". \" +\n            \"Note that HTML attributes are case-insensitive and camelCased \" +\n            \"props need to use their kebab-case equivalents when using in-DOM \" +\n            \"templates. You should probably use \\\"\" + altKey + \"\\\" instead of \\\"\" + key + \"\\\".\"\n          );\n        }\n      }\n      checkProp(res, props, key, altKey, true) ||\n      checkProp(res, attrs, key, altKey, false);\n    }\n  }\n  return res\n}\n\nfunction checkProp (\n  res,\n  hash,\n  key,\n  altKey,\n  preserve\n) {\n  if (isDef(hash)) {\n    if (hasOwn(hash, key)) {\n      res[key] = hash[key];\n      if (!preserve) {\n        delete hash[key];\n      }\n      return true\n    } else if (hasOwn(hash, altKey)) {\n      res[key] = hash[altKey];\n      if (!preserve) {\n        delete hash[altKey];\n      }\n      return true\n    }\n  }\n  return false\n}\n\n/*  */\n\n// The template compiler attempts to minimize the need for normalization by\n// statically analyzing the template at compile time.\n//\n// For plain HTML markup, normalization can be completely skipped because the\n// generated render function is guaranteed to return Array<VNode>. There are\n// two cases where extra normalization is needed:\n\n// 1. When the children contains components - because a functional component\n// may return an Array instead of a single root. In this case, just a simple\n// normalization is needed - if any child is an Array, we flatten the whole\n// thing with Array.prototype.concat. It is guaranteed to be only 1-level deep\n// because functional components already normalize their own children.\nfunction simpleNormalizeChildren (children) {\n  for (var i = 0; i < children.length; i++) {\n    if (Array.isArray(children[i])) {\n      return Array.prototype.concat.apply([], children)\n    }\n  }\n  return children\n}\n\n// 2. When the children contains constructs that always generated nested Arrays,\n// e.g. <template>, <slot>, v-for, or when the children is provided by user\n// with hand-written render functions / JSX. In such cases a full normalization\n// is needed to cater to all possible types of children values.\nfunction normalizeChildren (children) {\n  return isPrimitive(children)\n    ? [createTextVNode(children)]\n    : Array.isArray(children)\n      ? normalizeArrayChildren(children)\n      : undefined\n}\n\nfunction isTextNode (node) {\n  return isDef(node) && isDef(node.text) && isFalse(node.isComment)\n}\n\nfunction normalizeArrayChildren (children, nestedIndex) {\n  var res = [];\n  var i, c, lastIndex, last;\n  for (i = 0; i < children.length; i++) {\n    c = children[i];\n    if (isUndef(c) || typeof c === 'boolean') { continue }\n    lastIndex = res.length - 1;\n    last = res[lastIndex];\n    //  nested\n    if (Array.isArray(c)) {\n      if (c.length > 0) {\n        c = normalizeArrayChildren(c, ((nestedIndex || '') + \"_\" + i));\n        // merge adjacent text nodes\n        if (isTextNode(c[0]) && isTextNode(last)) {\n          res[lastIndex] = createTextVNode(last.text + (c[0]).text);\n          c.shift();\n        }\n        res.push.apply(res, c);\n      }\n    } else if (isPrimitive(c)) {\n      if (isTextNode(last)) {\n        // merge adjacent text nodes\n        // this is necessary for SSR hydration because text nodes are\n        // essentially merged when rendered to HTML strings\n        res[lastIndex] = createTextVNode(last.text + c);\n      } else if (c !== '') {\n        // convert primitive to vnode\n        res.push(createTextVNode(c));\n      }\n    } else {\n      if (isTextNode(c) && isTextNode(last)) {\n        // merge adjacent text nodes\n        res[lastIndex] = createTextVNode(last.text + c.text);\n      } else {\n        // default key for nested array children (likely generated by v-for)\n        if (isTrue(children._isVList) &&\n          isDef(c.tag) &&\n          isUndef(c.key) &&\n          isDef(nestedIndex)) {\n          c.key = \"__vlist\" + nestedIndex + \"_\" + i + \"__\";\n        }\n        res.push(c);\n      }\n    }\n  }\n  return res\n}\n\n/*  */\n\nfunction initProvide (vm) {\n  var provide = vm.$options.provide;\n  if (provide) {\n    vm._provided = typeof provide === 'function'\n      ? provide.call(vm)\n      : provide;\n  }\n}\n\nfunction initInjections (vm) {\n  var result = resolveInject(vm.$options.inject, vm);\n  if (result) {\n    toggleObserving(false);\n    Object.keys(result).forEach(function (key) {\n      /* istanbul ignore else */\n      if (true) {\n        defineReactive$$1(vm, key, result[key], function () {\n          warn(\n            \"Avoid mutating an injected value directly since the changes will be \" +\n            \"overwritten whenever the provided component re-renders. \" +\n            \"injection being mutated: \\\"\" + key + \"\\\"\",\n            vm\n          );\n        });\n      } else {}\n    });\n    toggleObserving(true);\n  }\n}\n\nfunction resolveInject (inject, vm) {\n  if (inject) {\n    // inject is :any because flow is not smart enough to figure out cached\n    var result = Object.create(null);\n    var keys = hasSymbol\n      ? Reflect.ownKeys(inject)\n      : Object.keys(inject);\n\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n      // #6574 in case the inject object is observed...\n      if (key === '__ob__') { continue }\n      var provideKey = inject[key].from;\n      var source = vm;\n      while (source) {\n        if (source._provided && hasOwn(source._provided, provideKey)) {\n          result[key] = source._provided[provideKey];\n          break\n        }\n        source = source.$parent;\n      }\n      if (!source) {\n        if ('default' in inject[key]) {\n          var provideDefault = inject[key].default;\n          result[key] = typeof provideDefault === 'function'\n            ? provideDefault.call(vm)\n            : provideDefault;\n        } else if (true) {\n          warn((\"Injection \\\"\" + key + \"\\\" not found\"), vm);\n        }\n      }\n    }\n    return result\n  }\n}\n\n/*  */\n\n\n\n/**\n * Runtime helper for resolving raw children VNodes into a slot object.\n */\nfunction resolveSlots (\n  children,\n  context\n) {\n  if (!children || !children.length) {\n    return {}\n  }\n  var slots = {};\n  for (var i = 0, l = children.length; i < l; i++) {\n    var child = children[i];\n    var data = child.data;\n    // remove slot attribute if the node is resolved as a Vue slot node\n    if (data && data.attrs && data.attrs.slot) {\n      delete data.attrs.slot;\n    }\n    // named slots should only be respected if the vnode was rendered in the\n    // same context.\n    if ((child.context === context || child.fnContext === context) &&\n      data && data.slot != null\n    ) {\n      var name = data.slot;\n      var slot = (slots[name] || (slots[name] = []));\n      if (child.tag === 'template') {\n        slot.push.apply(slot, child.children || []);\n      } else {\n        slot.push(child);\n      }\n    } else {\n      // fixed by xxxxxx 临时 hack 掉 uni-app 中的异步 name slot page\n      if(child.asyncMeta && child.asyncMeta.data && child.asyncMeta.data.slot === 'page'){\n        (slots['page'] || (slots['page'] = [])).push(child);\n      }else{\n        (slots.default || (slots.default = [])).push(child);\n      }\n    }\n  }\n  // ignore slots that contains only whitespace\n  for (var name$1 in slots) {\n    if (slots[name$1].every(isWhitespace)) {\n      delete slots[name$1];\n    }\n  }\n  return slots\n}\n\nfunction isWhitespace (node) {\n  return (node.isComment && !node.asyncFactory) || node.text === ' '\n}\n\n/*  */\n\nfunction normalizeScopedSlots (\n  slots,\n  normalSlots,\n  prevSlots\n) {\n  var res;\n  var hasNormalSlots = Object.keys(normalSlots).length > 0;\n  var isStable = slots ? !!slots.$stable : !hasNormalSlots;\n  var key = slots && slots.$key;\n  if (!slots) {\n    res = {};\n  } else if (slots._normalized) {\n    // fast path 1: child component re-render only, parent did not change\n    return slots._normalized\n  } else if (\n    isStable &&\n    prevSlots &&\n    prevSlots !== emptyObject &&\n    key === prevSlots.$key &&\n    !hasNormalSlots &&\n    !prevSlots.$hasNormal\n  ) {\n    // fast path 2: stable scoped slots w/ no normal slots to proxy,\n    // only need to normalize once\n    return prevSlots\n  } else {\n    res = {};\n    for (var key$1 in slots) {\n      if (slots[key$1] && key$1[0] !== '$') {\n        res[key$1] = normalizeScopedSlot(normalSlots, key$1, slots[key$1]);\n      }\n    }\n  }\n  // expose normal slots on scopedSlots\n  for (var key$2 in normalSlots) {\n    if (!(key$2 in res)) {\n      res[key$2] = proxyNormalSlot(normalSlots, key$2);\n    }\n  }\n  // avoriaz seems to mock a non-extensible $scopedSlots object\n  // and when that is passed down this would cause an error\n  if (slots && Object.isExtensible(slots)) {\n    (slots)._normalized = res;\n  }\n  def(res, '$stable', isStable);\n  def(res, '$key', key);\n  def(res, '$hasNormal', hasNormalSlots);\n  return res\n}\n\nfunction normalizeScopedSlot(normalSlots, key, fn) {\n  var normalized = function () {\n    var res = arguments.length ? fn.apply(null, arguments) : fn({});\n    res = res && typeof res === 'object' && !Array.isArray(res)\n      ? [res] // single vnode\n      : normalizeChildren(res);\n    return res && (\n      res.length === 0 ||\n      (res.length === 1 && res[0].isComment) // #9658\n    ) ? undefined\n      : res\n  };\n  // this is a slot using the new v-slot syntax without scope. although it is\n  // compiled as a scoped slot, render fn users would expect it to be present\n  // on this.$slots because the usage is semantically a normal slot.\n  if (fn.proxy) {\n    Object.defineProperty(normalSlots, key, {\n      get: normalized,\n      enumerable: true,\n      configurable: true\n    });\n  }\n  return normalized\n}\n\nfunction proxyNormalSlot(slots, key) {\n  return function () { return slots[key]; }\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering v-for lists.\n */\nfunction renderList (\n  val,\n  render\n) {\n  var ret, i, l, keys, key;\n  if (Array.isArray(val) || typeof val === 'string') {\n    ret = new Array(val.length);\n    for (i = 0, l = val.length; i < l; i++) {\n      ret[i] = render(val[i], i);\n    }\n  } else if (typeof val === 'number') {\n    ret = new Array(val);\n    for (i = 0; i < val; i++) {\n      ret[i] = render(i + 1, i);\n    }\n  } else if (isObject(val)) {\n    if (hasSymbol && val[Symbol.iterator]) {\n      ret = [];\n      var iterator = val[Symbol.iterator]();\n      var result = iterator.next();\n      while (!result.done) {\n        ret.push(render(result.value, ret.length));\n        result = iterator.next();\n      }\n    } else {\n      keys = Object.keys(val);\n      ret = new Array(keys.length);\n      for (i = 0, l = keys.length; i < l; i++) {\n        key = keys[i];\n        ret[i] = render(val[key], key, i);\n      }\n    }\n  }\n  if (!isDef(ret)) {\n    ret = [];\n  }\n  (ret)._isVList = true;\n  return ret\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering <slot>\n */\nfunction renderSlot (\n  name,\n  fallback,\n  props,\n  bindObject\n) {\n  var scopedSlotFn = this.$scopedSlots[name];\n  var nodes;\n  if (scopedSlotFn) { // scoped slot\n    props = props || {};\n    if (bindObject) {\n      if ( true && !isObject(bindObject)) {\n        warn(\n          'slot v-bind without argument expects an Object',\n          this\n        );\n      }\n      props = extend(extend({}, bindObject), props);\n    }\n    nodes = scopedSlotFn(props) || fallback;\n  } else {\n    nodes = this.$slots[name] || fallback;\n  }\n\n  var target = props && props.slot;\n  if (target) {\n    return this.$createElement('template', { slot: target }, nodes)\n  } else {\n    return nodes\n  }\n}\n\n/*  */\n\n/**\n * Runtime helper for resolving filters\n */\nfunction resolveFilter (id) {\n  return resolveAsset(this.$options, 'filters', id, true) || identity\n}\n\n/*  */\n\nfunction isKeyNotMatch (expect, actual) {\n  if (Array.isArray(expect)) {\n    return expect.indexOf(actual) === -1\n  } else {\n    return expect !== actual\n  }\n}\n\n/**\n * Runtime helper for checking keyCodes from config.\n * exposed as Vue.prototype._k\n * passing in eventKeyName as last argument separately for backwards compat\n */\nfunction checkKeyCodes (\n  eventKeyCode,\n  key,\n  builtInKeyCode,\n  eventKeyName,\n  builtInKeyName\n) {\n  var mappedKeyCode = config.keyCodes[key] || builtInKeyCode;\n  if (builtInKeyName && eventKeyName && !config.keyCodes[key]) {\n    return isKeyNotMatch(builtInKeyName, eventKeyName)\n  } else if (mappedKeyCode) {\n    return isKeyNotMatch(mappedKeyCode, eventKeyCode)\n  } else if (eventKeyName) {\n    return hyphenate(eventKeyName) !== key\n  }\n}\n\n/*  */\n\n/**\n * Runtime helper for merging v-bind=\"object\" into a VNode's data.\n */\nfunction bindObjectProps (\n  data,\n  tag,\n  value,\n  asProp,\n  isSync\n) {\n  if (value) {\n    if (!isObject(value)) {\n       true && warn(\n        'v-bind without argument expects an Object or Array value',\n        this\n      );\n    } else {\n      if (Array.isArray(value)) {\n        value = toObject(value);\n      }\n      var hash;\n      var loop = function ( key ) {\n        if (\n          key === 'class' ||\n          key === 'style' ||\n          isReservedAttribute(key)\n        ) {\n          hash = data;\n        } else {\n          var type = data.attrs && data.attrs.type;\n          hash = asProp || config.mustUseProp(tag, type, key)\n            ? data.domProps || (data.domProps = {})\n            : data.attrs || (data.attrs = {});\n        }\n        var camelizedKey = camelize(key);\n        var hyphenatedKey = hyphenate(key);\n        if (!(camelizedKey in hash) && !(hyphenatedKey in hash)) {\n          hash[key] = value[key];\n\n          if (isSync) {\n            var on = data.on || (data.on = {});\n            on[(\"update:\" + key)] = function ($event) {\n              value[key] = $event;\n            };\n          }\n        }\n      };\n\n      for (var key in value) loop( key );\n    }\n  }\n  return data\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering static trees.\n */\nfunction renderStatic (\n  index,\n  isInFor\n) {\n  var cached = this._staticTrees || (this._staticTrees = []);\n  var tree = cached[index];\n  // if has already-rendered static tree and not inside v-for,\n  // we can reuse the same tree.\n  if (tree && !isInFor) {\n    return tree\n  }\n  // otherwise, render a fresh tree.\n  tree = cached[index] = this.$options.staticRenderFns[index].call(\n    this._renderProxy,\n    null,\n    this // for render fns generated for functional component templates\n  );\n  markStatic(tree, (\"__static__\" + index), false);\n  return tree\n}\n\n/**\n * Runtime helper for v-once.\n * Effectively it means marking the node as static with a unique key.\n */\nfunction markOnce (\n  tree,\n  index,\n  key\n) {\n  markStatic(tree, (\"__once__\" + index + (key ? (\"_\" + key) : \"\")), true);\n  return tree\n}\n\nfunction markStatic (\n  tree,\n  key,\n  isOnce\n) {\n  if (Array.isArray(tree)) {\n    for (var i = 0; i < tree.length; i++) {\n      if (tree[i] && typeof tree[i] !== 'string') {\n        markStaticNode(tree[i], (key + \"_\" + i), isOnce);\n      }\n    }\n  } else {\n    markStaticNode(tree, key, isOnce);\n  }\n}\n\nfunction markStaticNode (node, key, isOnce) {\n  node.isStatic = true;\n  node.key = key;\n  node.isOnce = isOnce;\n}\n\n/*  */\n\nfunction bindObjectListeners (data, value) {\n  if (value) {\n    if (!isPlainObject(value)) {\n       true && warn(\n        'v-on without argument expects an Object value',\n        this\n      );\n    } else {\n      var on = data.on = data.on ? extend({}, data.on) : {};\n      for (var key in value) {\n        var existing = on[key];\n        var ours = value[key];\n        on[key] = existing ? [].concat(existing, ours) : ours;\n      }\n    }\n  }\n  return data\n}\n\n/*  */\n\nfunction resolveScopedSlots (\n  fns, // see flow/vnode\n  res,\n  // the following are added in 2.6\n  hasDynamicKeys,\n  contentHashKey\n) {\n  res = res || { $stable: !hasDynamicKeys };\n  for (var i = 0; i < fns.length; i++) {\n    var slot = fns[i];\n    if (Array.isArray(slot)) {\n      resolveScopedSlots(slot, res, hasDynamicKeys);\n    } else if (slot) {\n      // marker for reverse proxying v-slot without scope on this.$slots\n      if (slot.proxy) {\n        slot.fn.proxy = true;\n      }\n      res[slot.key] = slot.fn;\n    }\n  }\n  if (contentHashKey) {\n    (res).$key = contentHashKey;\n  }\n  return res\n}\n\n/*  */\n\nfunction bindDynamicKeys (baseObj, values) {\n  for (var i = 0; i < values.length; i += 2) {\n    var key = values[i];\n    if (typeof key === 'string' && key) {\n      baseObj[values[i]] = values[i + 1];\n    } else if ( true && key !== '' && key !== null) {\n      // null is a speical value for explicitly removing a binding\n      warn(\n        (\"Invalid value for dynamic directive argument (expected string or null): \" + key),\n        this\n      );\n    }\n  }\n  return baseObj\n}\n\n// helper to dynamically append modifier runtime markers to event names.\n// ensure only append when value is already string, otherwise it will be cast\n// to string and cause the type check to miss.\nfunction prependModifier (value, symbol) {\n  return typeof value === 'string' ? symbol + value : value\n}\n\n/*  */\n\nfunction installRenderHelpers (target) {\n  target._o = markOnce;\n  target._n = toNumber;\n  target._s = toString;\n  target._l = renderList;\n  target._t = renderSlot;\n  target._q = looseEqual;\n  target._i = looseIndexOf;\n  target._m = renderStatic;\n  target._f = resolveFilter;\n  target._k = checkKeyCodes;\n  target._b = bindObjectProps;\n  target._v = createTextVNode;\n  target._e = createEmptyVNode;\n  target._u = resolveScopedSlots;\n  target._g = bindObjectListeners;\n  target._d = bindDynamicKeys;\n  target._p = prependModifier;\n}\n\n/*  */\n\nfunction FunctionalRenderContext (\n  data,\n  props,\n  children,\n  parent,\n  Ctor\n) {\n  var this$1 = this;\n\n  var options = Ctor.options;\n  // ensure the createElement function in functional components\n  // gets a unique context - this is necessary for correct named slot check\n  var contextVm;\n  if (hasOwn(parent, '_uid')) {\n    contextVm = Object.create(parent);\n    // $flow-disable-line\n    contextVm._original = parent;\n  } else {\n    // the context vm passed in is a functional context as well.\n    // in this case we want to make sure we are able to get a hold to the\n    // real context instance.\n    contextVm = parent;\n    // $flow-disable-line\n    parent = parent._original;\n  }\n  var isCompiled = isTrue(options._compiled);\n  var needNormalization = !isCompiled;\n\n  this.data = data;\n  this.props = props;\n  this.children = children;\n  this.parent = parent;\n  this.listeners = data.on || emptyObject;\n  this.injections = resolveInject(options.inject, parent);\n  this.slots = function () {\n    if (!this$1.$slots) {\n      normalizeScopedSlots(\n        data.scopedSlots,\n        this$1.$slots = resolveSlots(children, parent)\n      );\n    }\n    return this$1.$slots\n  };\n\n  Object.defineProperty(this, 'scopedSlots', ({\n    enumerable: true,\n    get: function get () {\n      return normalizeScopedSlots(data.scopedSlots, this.slots())\n    }\n  }));\n\n  // support for compiled functional template\n  if (isCompiled) {\n    // exposing $options for renderStatic()\n    this.$options = options;\n    // pre-resolve slots for renderSlot()\n    this.$slots = this.slots();\n    this.$scopedSlots = normalizeScopedSlots(data.scopedSlots, this.$slots);\n  }\n\n  if (options._scopeId) {\n    this._c = function (a, b, c, d) {\n      var vnode = createElement(contextVm, a, b, c, d, needNormalization);\n      if (vnode && !Array.isArray(vnode)) {\n        vnode.fnScopeId = options._scopeId;\n        vnode.fnContext = parent;\n      }\n      return vnode\n    };\n  } else {\n    this._c = function (a, b, c, d) { return createElement(contextVm, a, b, c, d, needNormalization); };\n  }\n}\n\ninstallRenderHelpers(FunctionalRenderContext.prototype);\n\nfunction createFunctionalComponent (\n  Ctor,\n  propsData,\n  data,\n  contextVm,\n  children\n) {\n  var options = Ctor.options;\n  var props = {};\n  var propOptions = options.props;\n  if (isDef(propOptions)) {\n    for (var key in propOptions) {\n      props[key] = validateProp(key, propOptions, propsData || emptyObject);\n    }\n  } else {\n    if (isDef(data.attrs)) { mergeProps(props, data.attrs); }\n    if (isDef(data.props)) { mergeProps(props, data.props); }\n  }\n\n  var renderContext = new FunctionalRenderContext(\n    data,\n    props,\n    children,\n    contextVm,\n    Ctor\n  );\n\n  var vnode = options.render.call(null, renderContext._c, renderContext);\n\n  if (vnode instanceof VNode) {\n    return cloneAndMarkFunctionalResult(vnode, data, renderContext.parent, options, renderContext)\n  } else if (Array.isArray(vnode)) {\n    var vnodes = normalizeChildren(vnode) || [];\n    var res = new Array(vnodes.length);\n    for (var i = 0; i < vnodes.length; i++) {\n      res[i] = cloneAndMarkFunctionalResult(vnodes[i], data, renderContext.parent, options, renderContext);\n    }\n    return res\n  }\n}\n\nfunction cloneAndMarkFunctionalResult (vnode, data, contextVm, options, renderContext) {\n  // #7817 clone node before setting fnContext, otherwise if the node is reused\n  // (e.g. it was from a cached normal slot) the fnContext causes named slots\n  // that should not be matched to match.\n  var clone = cloneVNode(vnode);\n  clone.fnContext = contextVm;\n  clone.fnOptions = options;\n  if (true) {\n    (clone.devtoolsMeta = clone.devtoolsMeta || {}).renderContext = renderContext;\n  }\n  if (data.slot) {\n    (clone.data || (clone.data = {})).slot = data.slot;\n  }\n  return clone\n}\n\nfunction mergeProps (to, from) {\n  for (var key in from) {\n    to[camelize(key)] = from[key];\n  }\n}\n\n/*  */\n\n/*  */\n\n/*  */\n\n/*  */\n\n// inline hooks to be invoked on component VNodes during patch\nvar componentVNodeHooks = {\n  init: function init (vnode, hydrating) {\n    if (\n      vnode.componentInstance &&\n      !vnode.componentInstance._isDestroyed &&\n      vnode.data.keepAlive\n    ) {\n      // kept-alive components, treat as a patch\n      var mountedNode = vnode; // work around flow\n      componentVNodeHooks.prepatch(mountedNode, mountedNode);\n    } else {\n      var child = vnode.componentInstance = createComponentInstanceForVnode(\n        vnode,\n        activeInstance\n      );\n      child.$mount(hydrating ? vnode.elm : undefined, hydrating);\n    }\n  },\n\n  prepatch: function prepatch (oldVnode, vnode) {\n    var options = vnode.componentOptions;\n    var child = vnode.componentInstance = oldVnode.componentInstance;\n    updateChildComponent(\n      child,\n      options.propsData, // updated props\n      options.listeners, // updated listeners\n      vnode, // new parent vnode\n      options.children // new children\n    );\n  },\n\n  insert: function insert (vnode) {\n    var context = vnode.context;\n    var componentInstance = vnode.componentInstance;\n    if (!componentInstance._isMounted) {\n      componentInstance._isMounted = true;\n      callHook(componentInstance, 'mounted');\n    }\n    if (vnode.data.keepAlive) {\n      if (context._isMounted) {\n        // vue-router#1212\n        // During updates, a kept-alive component's child components may\n        // change, so directly walking the tree here may call activated hooks\n        // on incorrect children. Instead we push them into a queue which will\n        // be processed after the whole patch process ended.\n        queueActivatedComponent(componentInstance);\n      } else {\n        activateChildComponent(componentInstance, true /* direct */);\n      }\n    }\n  },\n\n  destroy: function destroy (vnode) {\n    var componentInstance = vnode.componentInstance;\n    if (!componentInstance._isDestroyed) {\n      if (!vnode.data.keepAlive) {\n        componentInstance.$destroy();\n      } else {\n        deactivateChildComponent(componentInstance, true /* direct */);\n      }\n    }\n  }\n};\n\nvar hooksToMerge = Object.keys(componentVNodeHooks);\n\nfunction createComponent (\n  Ctor,\n  data,\n  context,\n  children,\n  tag\n) {\n  if (isUndef(Ctor)) {\n    return\n  }\n\n  var baseCtor = context.$options._base;\n\n  // plain options object: turn it into a constructor\n  if (isObject(Ctor)) {\n    Ctor = baseCtor.extend(Ctor);\n  }\n\n  // if at this stage it's not a constructor or an async component factory,\n  // reject.\n  if (typeof Ctor !== 'function') {\n    if (true) {\n      warn((\"Invalid Component definition: \" + (String(Ctor))), context);\n    }\n    return\n  }\n\n  // async component\n  var asyncFactory;\n  if (isUndef(Ctor.cid)) {\n    asyncFactory = Ctor;\n    Ctor = resolveAsyncComponent(asyncFactory, baseCtor);\n    if (Ctor === undefined) {\n      // return a placeholder node for async component, which is rendered\n      // as a comment node but preserves all the raw information for the node.\n      // the information will be used for async server-rendering and hydration.\n      return createAsyncPlaceholder(\n        asyncFactory,\n        data,\n        context,\n        children,\n        tag\n      )\n    }\n  }\n\n  data = data || {};\n\n  // resolve constructor options in case global mixins are applied after\n  // component constructor creation\n  resolveConstructorOptions(Ctor);\n\n  // transform component v-model data into props & events\n  if (isDef(data.model)) {\n    transformModel(Ctor.options, data);\n  }\n\n  // extract props\n  var propsData = extractPropsFromVNodeData(data, Ctor, tag);\n\n  // functional component\n  if (isTrue(Ctor.options.functional)) {\n    return createFunctionalComponent(Ctor, propsData, data, context, children)\n  }\n\n  // extract listeners, since these needs to be treated as\n  // child component listeners instead of DOM listeners\n  var listeners = data.on;\n  // replace with listeners with .native modifier\n  // so it gets processed during parent component patch.\n  data.on = data.nativeOn;\n\n  if (isTrue(Ctor.options.abstract)) {\n    // abstract components do not keep anything\n    // other than props & listeners & slot\n\n    // work around flow\n    var slot = data.slot;\n    data = {};\n    if (slot) {\n      data.slot = slot;\n    }\n  }\n\n  // install component management hooks onto the placeholder node\n  installComponentHooks(data);\n\n  // return a placeholder vnode\n  var name = Ctor.options.name || tag;\n  var vnode = new VNode(\n    (\"vue-component-\" + (Ctor.cid) + (name ? (\"-\" + name) : '')),\n    data, undefined, undefined, undefined, context,\n    { Ctor: Ctor, propsData: propsData, listeners: listeners, tag: tag, children: children },\n    asyncFactory\n  );\n\n  return vnode\n}\n\nfunction createComponentInstanceForVnode (\n  vnode, // we know it's MountedComponentVNode but flow doesn't\n  parent // activeInstance in lifecycle state\n) {\n  var options = {\n    _isComponent: true,\n    _parentVnode: vnode,\n    parent: parent\n  };\n  // check inline-template render functions\n  var inlineTemplate = vnode.data.inlineTemplate;\n  if (isDef(inlineTemplate)) {\n    options.render = inlineTemplate.render;\n    options.staticRenderFns = inlineTemplate.staticRenderFns;\n  }\n  return new vnode.componentOptions.Ctor(options)\n}\n\nfunction installComponentHooks (data) {\n  var hooks = data.hook || (data.hook = {});\n  for (var i = 0; i < hooksToMerge.length; i++) {\n    var key = hooksToMerge[i];\n    var existing = hooks[key];\n    var toMerge = componentVNodeHooks[key];\n    if (existing !== toMerge && !(existing && existing._merged)) {\n      hooks[key] = existing ? mergeHook$1(toMerge, existing) : toMerge;\n    }\n  }\n}\n\nfunction mergeHook$1 (f1, f2) {\n  var merged = function (a, b) {\n    // flow complains about extra args which is why we use any\n    f1(a, b);\n    f2(a, b);\n  };\n  merged._merged = true;\n  return merged\n}\n\n// transform component v-model info (value and callback) into\n// prop and event handler respectively.\nfunction transformModel (options, data) {\n  var prop = (options.model && options.model.prop) || 'value';\n  var event = (options.model && options.model.event) || 'input'\n  ;(data.attrs || (data.attrs = {}))[prop] = data.model.value;\n  var on = data.on || (data.on = {});\n  var existing = on[event];\n  var callback = data.model.callback;\n  if (isDef(existing)) {\n    if (\n      Array.isArray(existing)\n        ? existing.indexOf(callback) === -1\n        : existing !== callback\n    ) {\n      on[event] = [callback].concat(existing);\n    }\n  } else {\n    on[event] = callback;\n  }\n}\n\n/*  */\n\nvar SIMPLE_NORMALIZE = 1;\nvar ALWAYS_NORMALIZE = 2;\n\n// wrapper function for providing a more flexible interface\n// without getting yelled at by flow\nfunction createElement (\n  context,\n  tag,\n  data,\n  children,\n  normalizationType,\n  alwaysNormalize\n) {\n  if (Array.isArray(data) || isPrimitive(data)) {\n    normalizationType = children;\n    children = data;\n    data = undefined;\n  }\n  if (isTrue(alwaysNormalize)) {\n    normalizationType = ALWAYS_NORMALIZE;\n  }\n  return _createElement(context, tag, data, children, normalizationType)\n}\n\nfunction _createElement (\n  context,\n  tag,\n  data,\n  children,\n  normalizationType\n) {\n  if (isDef(data) && isDef((data).__ob__)) {\n     true && warn(\n      \"Avoid using observed data object as vnode data: \" + (JSON.stringify(data)) + \"\\n\" +\n      'Always create fresh vnode data objects in each render!',\n      context\n    );\n    return createEmptyVNode()\n  }\n  // object syntax in v-bind\n  if (isDef(data) && isDef(data.is)) {\n    tag = data.is;\n  }\n  if (!tag) {\n    // in case of component :is set to falsy value\n    return createEmptyVNode()\n  }\n  // warn against non-primitive key\n  if ( true &&\n    isDef(data) && isDef(data.key) && !isPrimitive(data.key)\n  ) {\n    {\n      warn(\n        'Avoid using non-primitive value as key, ' +\n        'use string/number value instead.',\n        context\n      );\n    }\n  }\n  // support single function children as default scoped slot\n  if (Array.isArray(children) &&\n    typeof children[0] === 'function'\n  ) {\n    data = data || {};\n    data.scopedSlots = { default: children[0] };\n    children.length = 0;\n  }\n  if (normalizationType === ALWAYS_NORMALIZE) {\n    children = normalizeChildren(children);\n  } else if (normalizationType === SIMPLE_NORMALIZE) {\n    children = simpleNormalizeChildren(children);\n  }\n  var vnode, ns;\n  if (typeof tag === 'string') {\n    var Ctor;\n    ns = (context.$vnode && context.$vnode.ns) || config.getTagNamespace(tag);\n    if (config.isReservedTag(tag)) {\n      // platform built-in elements\n      vnode = new VNode(\n        config.parsePlatformTagName(tag), data, children,\n        undefined, undefined, context\n      );\n    } else if ((!data || !data.pre) && isDef(Ctor = resolveAsset(context.$options, 'components', tag))) {\n      // component\n      vnode = createComponent(Ctor, data, context, children, tag);\n    } else {\n      // unknown or unlisted namespaced elements\n      // check at runtime because it may get assigned a namespace when its\n      // parent normalizes children\n      vnode = new VNode(\n        tag, data, children,\n        undefined, undefined, context\n      );\n    }\n  } else {\n    // direct component options / constructor\n    vnode = createComponent(tag, data, context, children);\n  }\n  if (Array.isArray(vnode)) {\n    return vnode\n  } else if (isDef(vnode)) {\n    if (isDef(ns)) { applyNS(vnode, ns); }\n    if (isDef(data)) { registerDeepBindings(data); }\n    return vnode\n  } else {\n    return createEmptyVNode()\n  }\n}\n\nfunction applyNS (vnode, ns, force) {\n  vnode.ns = ns;\n  if (vnode.tag === 'foreignObject') {\n    // use default namespace inside foreignObject\n    ns = undefined;\n    force = true;\n  }\n  if (isDef(vnode.children)) {\n    for (var i = 0, l = vnode.children.length; i < l; i++) {\n      var child = vnode.children[i];\n      if (isDef(child.tag) && (\n        isUndef(child.ns) || (isTrue(force) && child.tag !== 'svg'))) {\n        applyNS(child, ns, force);\n      }\n    }\n  }\n}\n\n// ref #5318\n// necessary to ensure parent re-render when deep bindings like :style and\n// :class are used on slot nodes\nfunction registerDeepBindings (data) {\n  if (isObject(data.style)) {\n    traverse(data.style);\n  }\n  if (isObject(data.class)) {\n    traverse(data.class);\n  }\n}\n\n/*  */\n\nfunction initRender (vm) {\n  vm._vnode = null; // the root of the child tree\n  vm._staticTrees = null; // v-once cached trees\n  var options = vm.$options;\n  var parentVnode = vm.$vnode = options._parentVnode; // the placeholder node in parent tree\n  var renderContext = parentVnode && parentVnode.context;\n  vm.$slots = resolveSlots(options._renderChildren, renderContext);\n  vm.$scopedSlots = emptyObject;\n  // bind the createElement fn to this instance\n  // so that we get proper render context inside it.\n  // args order: tag, data, children, normalizationType, alwaysNormalize\n  // internal version is used by render functions compiled from templates\n  vm._c = function (a, b, c, d) { return createElement(vm, a, b, c, d, false); };\n  // normalization is always applied for the public version, used in\n  // user-written render functions.\n  vm.$createElement = function (a, b, c, d) { return createElement(vm, a, b, c, d, true); };\n\n  // $attrs & $listeners are exposed for easier HOC creation.\n  // they need to be reactive so that HOCs using them are always updated\n  var parentData = parentVnode && parentVnode.data;\n\n  /* istanbul ignore else */\n  if (true) {\n    defineReactive$$1(vm, '$attrs', parentData && parentData.attrs || emptyObject, function () {\n      !isUpdatingChildComponent && warn(\"$attrs is readonly.\", vm);\n    }, true);\n    defineReactive$$1(vm, '$listeners', options._parentListeners || emptyObject, function () {\n      !isUpdatingChildComponent && warn(\"$listeners is readonly.\", vm);\n    }, true);\n  } else {}\n}\n\nvar currentRenderingInstance = null;\n\nfunction renderMixin (Vue) {\n  // install runtime convenience helpers\n  installRenderHelpers(Vue.prototype);\n\n  Vue.prototype.$nextTick = function (fn) {\n    return nextTick(fn, this)\n  };\n\n  Vue.prototype._render = function () {\n    var vm = this;\n    var ref = vm.$options;\n    var render = ref.render;\n    var _parentVnode = ref._parentVnode;\n\n    if (_parentVnode) {\n      vm.$scopedSlots = normalizeScopedSlots(\n        _parentVnode.data.scopedSlots,\n        vm.$slots,\n        vm.$scopedSlots\n      );\n    }\n\n    // set parent vnode. this allows render functions to have access\n    // to the data on the placeholder node.\n    vm.$vnode = _parentVnode;\n    // render self\n    var vnode;\n    try {\n      // There's no need to maintain a stack becaues all render fns are called\n      // separately from one another. Nested component's render fns are called\n      // when parent component is patched.\n      currentRenderingInstance = vm;\n      vnode = render.call(vm._renderProxy, vm.$createElement);\n    } catch (e) {\n      handleError(e, vm, \"render\");\n      // return error render result,\n      // or previous vnode to prevent render error causing blank component\n      /* istanbul ignore else */\n      if ( true && vm.$options.renderError) {\n        try {\n          vnode = vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e);\n        } catch (e) {\n          handleError(e, vm, \"renderError\");\n          vnode = vm._vnode;\n        }\n      } else {\n        vnode = vm._vnode;\n      }\n    } finally {\n      currentRenderingInstance = null;\n    }\n    // if the returned array contains only a single node, allow it\n    if (Array.isArray(vnode) && vnode.length === 1) {\n      vnode = vnode[0];\n    }\n    // return empty vnode in case the render function errored out\n    if (!(vnode instanceof VNode)) {\n      if ( true && Array.isArray(vnode)) {\n        warn(\n          'Multiple root nodes returned from render function. Render function ' +\n          'should return a single root node.',\n          vm\n        );\n      }\n      vnode = createEmptyVNode();\n    }\n    // set parent\n    vnode.parent = _parentVnode;\n    return vnode\n  };\n}\n\n/*  */\n\nfunction ensureCtor (comp, base) {\n  if (\n    comp.__esModule ||\n    (hasSymbol && comp[Symbol.toStringTag] === 'Module')\n  ) {\n    comp = comp.default;\n  }\n  return isObject(comp)\n    ? base.extend(comp)\n    : comp\n}\n\nfunction createAsyncPlaceholder (\n  factory,\n  data,\n  context,\n  children,\n  tag\n) {\n  var node = createEmptyVNode();\n  node.asyncFactory = factory;\n  node.asyncMeta = { data: data, context: context, children: children, tag: tag };\n  return node\n}\n\nfunction resolveAsyncComponent (\n  factory,\n  baseCtor\n) {\n  if (isTrue(factory.error) && isDef(factory.errorComp)) {\n    return factory.errorComp\n  }\n\n  if (isDef(factory.resolved)) {\n    return factory.resolved\n  }\n\n  var owner = currentRenderingInstance;\n  if (owner && isDef(factory.owners) && factory.owners.indexOf(owner) === -1) {\n    // already pending\n    factory.owners.push(owner);\n  }\n\n  if (isTrue(factory.loading) && isDef(factory.loadingComp)) {\n    return factory.loadingComp\n  }\n\n  if (owner && !isDef(factory.owners)) {\n    var owners = factory.owners = [owner];\n    var sync = true;\n    var timerLoading = null;\n    var timerTimeout = null\n\n    ;(owner).$on('hook:destroyed', function () { return remove(owners, owner); });\n\n    var forceRender = function (renderCompleted) {\n      for (var i = 0, l = owners.length; i < l; i++) {\n        (owners[i]).$forceUpdate();\n      }\n\n      if (renderCompleted) {\n        owners.length = 0;\n        if (timerLoading !== null) {\n          clearTimeout(timerLoading);\n          timerLoading = null;\n        }\n        if (timerTimeout !== null) {\n          clearTimeout(timerTimeout);\n          timerTimeout = null;\n        }\n      }\n    };\n\n    var resolve = once(function (res) {\n      // cache resolved\n      factory.resolved = ensureCtor(res, baseCtor);\n      // invoke callbacks only if this is not a synchronous resolve\n      // (async resolves are shimmed as synchronous during SSR)\n      if (!sync) {\n        forceRender(true);\n      } else {\n        owners.length = 0;\n      }\n    });\n\n    var reject = once(function (reason) {\n       true && warn(\n        \"Failed to resolve async component: \" + (String(factory)) +\n        (reason ? (\"\\nReason: \" + reason) : '')\n      );\n      if (isDef(factory.errorComp)) {\n        factory.error = true;\n        forceRender(true);\n      }\n    });\n\n    var res = factory(resolve, reject);\n\n    if (isObject(res)) {\n      if (isPromise(res)) {\n        // () => Promise\n        if (isUndef(factory.resolved)) {\n          res.then(resolve, reject);\n        }\n      } else if (isPromise(res.component)) {\n        res.component.then(resolve, reject);\n\n        if (isDef(res.error)) {\n          factory.errorComp = ensureCtor(res.error, baseCtor);\n        }\n\n        if (isDef(res.loading)) {\n          factory.loadingComp = ensureCtor(res.loading, baseCtor);\n          if (res.delay === 0) {\n            factory.loading = true;\n          } else {\n            timerLoading = setTimeout(function () {\n              timerLoading = null;\n              if (isUndef(factory.resolved) && isUndef(factory.error)) {\n                factory.loading = true;\n                forceRender(false);\n              }\n            }, res.delay || 200);\n          }\n        }\n\n        if (isDef(res.timeout)) {\n          timerTimeout = setTimeout(function () {\n            timerTimeout = null;\n            if (isUndef(factory.resolved)) {\n              reject(\n                 true\n                  ? (\"timeout (\" + (res.timeout) + \"ms)\")\n                  : undefined\n              );\n            }\n          }, res.timeout);\n        }\n      }\n    }\n\n    sync = false;\n    // return in case resolved synchronously\n    return factory.loading\n      ? factory.loadingComp\n      : factory.resolved\n  }\n}\n\n/*  */\n\nfunction isAsyncPlaceholder (node) {\n  return node.isComment && node.asyncFactory\n}\n\n/*  */\n\nfunction getFirstComponentChild (children) {\n  if (Array.isArray(children)) {\n    for (var i = 0; i < children.length; i++) {\n      var c = children[i];\n      if (isDef(c) && (isDef(c.componentOptions) || isAsyncPlaceholder(c))) {\n        return c\n      }\n    }\n  }\n}\n\n/*  */\n\n/*  */\n\nfunction initEvents (vm) {\n  vm._events = Object.create(null);\n  vm._hasHookEvent = false;\n  // init parent attached events\n  var listeners = vm.$options._parentListeners;\n  if (listeners) {\n    updateComponentListeners(vm, listeners);\n  }\n}\n\nvar target;\n\nfunction add (event, fn) {\n  target.$on(event, fn);\n}\n\nfunction remove$1 (event, fn) {\n  target.$off(event, fn);\n}\n\nfunction createOnceHandler (event, fn) {\n  var _target = target;\n  return function onceHandler () {\n    var res = fn.apply(null, arguments);\n    if (res !== null) {\n      _target.$off(event, onceHandler);\n    }\n  }\n}\n\nfunction updateComponentListeners (\n  vm,\n  listeners,\n  oldListeners\n) {\n  target = vm;\n  updateListeners(listeners, oldListeners || {}, add, remove$1, createOnceHandler, vm);\n  target = undefined;\n}\n\nfunction eventsMixin (Vue) {\n  var hookRE = /^hook:/;\n  Vue.prototype.$on = function (event, fn) {\n    var vm = this;\n    if (Array.isArray(event)) {\n      for (var i = 0, l = event.length; i < l; i++) {\n        vm.$on(event[i], fn);\n      }\n    } else {\n      (vm._events[event] || (vm._events[event] = [])).push(fn);\n      // optimize hook:event cost by using a boolean flag marked at registration\n      // instead of a hash lookup\n      if (hookRE.test(event)) {\n        vm._hasHookEvent = true;\n      }\n    }\n    return vm\n  };\n\n  Vue.prototype.$once = function (event, fn) {\n    var vm = this;\n    function on () {\n      vm.$off(event, on);\n      fn.apply(vm, arguments);\n    }\n    on.fn = fn;\n    vm.$on(event, on);\n    return vm\n  };\n\n  Vue.prototype.$off = function (event, fn) {\n    var vm = this;\n    // all\n    if (!arguments.length) {\n      vm._events = Object.create(null);\n      return vm\n    }\n    // array of events\n    if (Array.isArray(event)) {\n      for (var i$1 = 0, l = event.length; i$1 < l; i$1++) {\n        vm.$off(event[i$1], fn);\n      }\n      return vm\n    }\n    // specific event\n    var cbs = vm._events[event];\n    if (!cbs) {\n      return vm\n    }\n    if (!fn) {\n      vm._events[event] = null;\n      return vm\n    }\n    // specific handler\n    var cb;\n    var i = cbs.length;\n    while (i--) {\n      cb = cbs[i];\n      if (cb === fn || cb.fn === fn) {\n        cbs.splice(i, 1);\n        break\n      }\n    }\n    return vm\n  };\n\n  Vue.prototype.$emit = function (event) {\n    var vm = this;\n    if (true) {\n      var lowerCaseEvent = event.toLowerCase();\n      if (lowerCaseEvent !== event && vm._events[lowerCaseEvent]) {\n        tip(\n          \"Event \\\"\" + lowerCaseEvent + \"\\\" is emitted in component \" +\n          (formatComponentName(vm)) + \" but the handler is registered for \\\"\" + event + \"\\\". \" +\n          \"Note that HTML attributes are case-insensitive and you cannot use \" +\n          \"v-on to listen to camelCase events when using in-DOM templates. \" +\n          \"You should probably use \\\"\" + (hyphenate(event)) + \"\\\" instead of \\\"\" + event + \"\\\".\"\n        );\n      }\n    }\n    var cbs = vm._events[event];\n    if (cbs) {\n      cbs = cbs.length > 1 ? toArray(cbs) : cbs;\n      var args = toArray(arguments, 1);\n      var info = \"event handler for \\\"\" + event + \"\\\"\";\n      for (var i = 0, l = cbs.length; i < l; i++) {\n        invokeWithErrorHandling(cbs[i], vm, args, vm, info);\n      }\n    }\n    return vm\n  };\n}\n\n/*  */\n\nvar activeInstance = null;\nvar isUpdatingChildComponent = false;\n\nfunction setActiveInstance(vm) {\n  var prevActiveInstance = activeInstance;\n  activeInstance = vm;\n  return function () {\n    activeInstance = prevActiveInstance;\n  }\n}\n\nfunction initLifecycle (vm) {\n  var options = vm.$options;\n\n  // locate first non-abstract parent\n  var parent = options.parent;\n  if (parent && !options.abstract) {\n    while (parent.$options.abstract && parent.$parent) {\n      parent = parent.$parent;\n    }\n    parent.$children.push(vm);\n  }\n\n  vm.$parent = parent;\n  vm.$root = parent ? parent.$root : vm;\n\n  vm.$children = [];\n  vm.$refs = {};\n\n  vm._watcher = null;\n  vm._inactive = null;\n  vm._directInactive = false;\n  vm._isMounted = false;\n  vm._isDestroyed = false;\n  vm._isBeingDestroyed = false;\n}\n\nfunction lifecycleMixin (Vue) {\n  Vue.prototype._update = function (vnode, hydrating) {\n    var vm = this;\n    var prevEl = vm.$el;\n    var prevVnode = vm._vnode;\n    var restoreActiveInstance = setActiveInstance(vm);\n    vm._vnode = vnode;\n    // Vue.prototype.__patch__ is injected in entry points\n    // based on the rendering backend used.\n    if (!prevVnode) {\n      // initial render\n      vm.$el = vm.__patch__(vm.$el, vnode, hydrating, false /* removeOnly */);\n    } else {\n      // updates\n      vm.$el = vm.__patch__(prevVnode, vnode);\n    }\n    restoreActiveInstance();\n    // update __vue__ reference\n    if (prevEl) {\n      prevEl.__vue__ = null;\n    }\n    if (vm.$el) {\n      vm.$el.__vue__ = vm;\n    }\n    // if parent is an HOC, update its $el as well\n    if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) {\n      vm.$parent.$el = vm.$el;\n    }\n    // updated hook is called by the scheduler to ensure that children are\n    // updated in a parent's updated hook.\n  };\n\n  Vue.prototype.$forceUpdate = function () {\n    var vm = this;\n    if (vm._watcher) {\n      vm._watcher.update();\n    }\n  };\n\n  Vue.prototype.$destroy = function () {\n    var vm = this;\n    if (vm._isBeingDestroyed) {\n      return\n    }\n    callHook(vm, 'beforeDestroy');\n    vm._isBeingDestroyed = true;\n    // remove self from parent\n    var parent = vm.$parent;\n    if (parent && !parent._isBeingDestroyed && !vm.$options.abstract) {\n      remove(parent.$children, vm);\n    }\n    // teardown watchers\n    if (vm._watcher) {\n      vm._watcher.teardown();\n    }\n    var i = vm._watchers.length;\n    while (i--) {\n      vm._watchers[i].teardown();\n    }\n    // remove reference from data ob\n    // frozen object may not have observer.\n    if (vm._data.__ob__) {\n      vm._data.__ob__.vmCount--;\n    }\n    // call the last hook...\n    vm._isDestroyed = true;\n    // invoke destroy hooks on current rendered tree\n    vm.__patch__(vm._vnode, null);\n    // fire destroyed hook\n    callHook(vm, 'destroyed');\n    // turn off all instance listeners.\n    vm.$off();\n    // remove __vue__ reference\n    if (vm.$el) {\n      vm.$el.__vue__ = null;\n    }\n    // release circular reference (#6759)\n    if (vm.$vnode) {\n      vm.$vnode.parent = null;\n    }\n  };\n}\n\nfunction updateChildComponent (\n  vm,\n  propsData,\n  listeners,\n  parentVnode,\n  renderChildren\n) {\n  if (true) {\n    isUpdatingChildComponent = true;\n  }\n\n  // determine whether component has slot children\n  // we need to do this before overwriting $options._renderChildren.\n\n  // check if there are dynamic scopedSlots (hand-written or compiled but with\n  // dynamic slot names). Static scoped slots compiled from template has the\n  // \"$stable\" marker.\n  var newScopedSlots = parentVnode.data.scopedSlots;\n  var oldScopedSlots = vm.$scopedSlots;\n  var hasDynamicScopedSlot = !!(\n    (newScopedSlots && !newScopedSlots.$stable) ||\n    (oldScopedSlots !== emptyObject && !oldScopedSlots.$stable) ||\n    (newScopedSlots && vm.$scopedSlots.$key !== newScopedSlots.$key)\n  );\n\n  // Any static slot children from the parent may have changed during parent's\n  // update. Dynamic scoped slots may also have changed. In such cases, a forced\n  // update is necessary to ensure correctness.\n  var needsForceUpdate = !!(\n    renderChildren ||               // has new static slots\n    vm.$options._renderChildren ||  // has old static slots\n    hasDynamicScopedSlot\n  );\n\n  vm.$options._parentVnode = parentVnode;\n  vm.$vnode = parentVnode; // update vm's placeholder node without re-render\n\n  if (vm._vnode) { // update child tree's parent\n    vm._vnode.parent = parentVnode;\n  }\n  vm.$options._renderChildren = renderChildren;\n\n  // update $attrs and $listeners hash\n  // these are also reactive so they may trigger child update if the child\n  // used them during render\n  vm.$attrs = parentVnode.data.attrs || emptyObject;\n  vm.$listeners = listeners || emptyObject;\n\n  // update props\n  if (propsData && vm.$options.props) {\n    toggleObserving(false);\n    var props = vm._props;\n    var propKeys = vm.$options._propKeys || [];\n    for (var i = 0; i < propKeys.length; i++) {\n      var key = propKeys[i];\n      var propOptions = vm.$options.props; // wtf flow?\n      props[key] = validateProp(key, propOptions, propsData, vm);\n    }\n    toggleObserving(true);\n    // keep a copy of raw propsData\n    vm.$options.propsData = propsData;\n  }\n\n  // update listeners\n  listeners = listeners || emptyObject;\n  var oldListeners = vm.$options._parentListeners;\n  vm.$options._parentListeners = listeners;\n  updateComponentListeners(vm, listeners, oldListeners);\n\n  // resolve slots + force update if has children\n  if (needsForceUpdate) {\n    vm.$slots = resolveSlots(renderChildren, parentVnode.context);\n    vm.$forceUpdate();\n  }\n\n  if (true) {\n    isUpdatingChildComponent = false;\n  }\n}\n\nfunction isInInactiveTree (vm) {\n  while (vm && (vm = vm.$parent)) {\n    if (vm._inactive) { return true }\n  }\n  return false\n}\n\nfunction activateChildComponent (vm, direct) {\n  if (direct) {\n    vm._directInactive = false;\n    if (isInInactiveTree(vm)) {\n      return\n    }\n  } else if (vm._directInactive) {\n    return\n  }\n  if (vm._inactive || vm._inactive === null) {\n    vm._inactive = false;\n    for (var i = 0; i < vm.$children.length; i++) {\n      activateChildComponent(vm.$children[i]);\n    }\n    callHook(vm, 'activated');\n  }\n}\n\nfunction deactivateChildComponent (vm, direct) {\n  if (direct) {\n    vm._directInactive = true;\n    if (isInInactiveTree(vm)) {\n      return\n    }\n  }\n  if (!vm._inactive) {\n    vm._inactive = true;\n    for (var i = 0; i < vm.$children.length; i++) {\n      deactivateChildComponent(vm.$children[i]);\n    }\n    callHook(vm, 'deactivated');\n  }\n}\n\nfunction callHook (vm, hook) {\n  // #7573 disable dep collection when invoking lifecycle hooks\n  pushTarget();\n  var handlers = vm.$options[hook];\n  var info = hook + \" hook\";\n  if (handlers) {\n    for (var i = 0, j = handlers.length; i < j; i++) {\n      invokeWithErrorHandling(handlers[i], vm, null, vm, info);\n    }\n  }\n  if (vm._hasHookEvent) {\n    vm.$emit('hook:' + hook);\n  }\n  popTarget();\n}\n\n/*  */\n\nvar MAX_UPDATE_COUNT = 100;\n\nvar queue = [];\nvar activatedChildren = [];\nvar has = {};\nvar circular = {};\nvar waiting = false;\nvar flushing = false;\nvar index = 0;\n\n/**\n * Reset the scheduler's state.\n */\nfunction resetSchedulerState () {\n  index = queue.length = activatedChildren.length = 0;\n  has = {};\n  if (true) {\n    circular = {};\n  }\n  waiting = flushing = false;\n}\n\n// Async edge case #6566 requires saving the timestamp when event listeners are\n// attached. However, calling performance.now() has a perf overhead especially\n// if the page has thousands of event listeners. Instead, we take a timestamp\n// every time the scheduler flushes and use that for all event listeners\n// attached during that flush.\nvar currentFlushTimestamp = 0;\n\n// Async edge case fix requires storing an event listener's attach timestamp.\nvar getNow = Date.now;\n\n// Determine what event timestamp the browser is using. Annoyingly, the\n// timestamp can either be hi-res (relative to page load) or low-res\n// (relative to UNIX epoch), so in order to compare time we have to use the\n// same timestamp type when saving the flush timestamp.\n// All IE versions use low-res event timestamps, and have problematic clock\n// implementations (#9632)\nif (inBrowser && !isIE) {\n  var performance = window.performance;\n  if (\n    performance &&\n    typeof performance.now === 'function' &&\n    getNow() > document.createEvent('Event').timeStamp\n  ) {\n    // if the event timestamp, although evaluated AFTER the Date.now(), is\n    // smaller than it, it means the event is using a hi-res timestamp,\n    // and we need to use the hi-res version for event listener timestamps as\n    // well.\n    getNow = function () { return performance.now(); };\n  }\n}\n\n/**\n * Flush both queues and run the watchers.\n */\nfunction flushSchedulerQueue () {\n  currentFlushTimestamp = getNow();\n  flushing = true;\n  var watcher, id;\n\n  // Sort queue before flush.\n  // This ensures that:\n  // 1. Components are updated from parent to child. (because parent is always\n  //    created before the child)\n  // 2. A component's user watchers are run before its render watcher (because\n  //    user watchers are created before the render watcher)\n  // 3. If a component is destroyed during a parent component's watcher run,\n  //    its watchers can be skipped.\n  queue.sort(function (a, b) { return a.id - b.id; });\n\n  // do not cache length because more watchers might be pushed\n  // as we run existing watchers\n  for (index = 0; index < queue.length; index++) {\n    watcher = queue[index];\n    if (watcher.before) {\n      watcher.before();\n    }\n    id = watcher.id;\n    has[id] = null;\n    watcher.run();\n    // in dev build, check and stop circular updates.\n    if ( true && has[id] != null) {\n      circular[id] = (circular[id] || 0) + 1;\n      if (circular[id] > MAX_UPDATE_COUNT) {\n        warn(\n          'You may have an infinite update loop ' + (\n            watcher.user\n              ? (\"in watcher with expression \\\"\" + (watcher.expression) + \"\\\"\")\n              : \"in a component render function.\"\n          ),\n          watcher.vm\n        );\n        break\n      }\n    }\n  }\n\n  // keep copies of post queues before resetting state\n  var activatedQueue = activatedChildren.slice();\n  var updatedQueue = queue.slice();\n\n  resetSchedulerState();\n\n  // call component updated and activated hooks\n  callActivatedHooks(activatedQueue);\n  callUpdatedHooks(updatedQueue);\n\n  // devtool hook\n  /* istanbul ignore if */\n  if (devtools && config.devtools) {\n    devtools.emit('flush');\n  }\n}\n\nfunction callUpdatedHooks (queue) {\n  var i = queue.length;\n  while (i--) {\n    var watcher = queue[i];\n    var vm = watcher.vm;\n    if (vm._watcher === watcher && vm._isMounted && !vm._isDestroyed) {\n      callHook(vm, 'updated');\n    }\n  }\n}\n\n/**\n * Queue a kept-alive component that was activated during patch.\n * The queue will be processed after the entire tree has been patched.\n */\nfunction queueActivatedComponent (vm) {\n  // setting _inactive to false here so that a render function can\n  // rely on checking whether it's in an inactive tree (e.g. router-view)\n  vm._inactive = false;\n  activatedChildren.push(vm);\n}\n\nfunction callActivatedHooks (queue) {\n  for (var i = 0; i < queue.length; i++) {\n    queue[i]._inactive = true;\n    activateChildComponent(queue[i], true /* true */);\n  }\n}\n\n/**\n * Push a watcher into the watcher queue.\n * Jobs with duplicate IDs will be skipped unless it's\n * pushed when the queue is being flushed.\n */\nfunction queueWatcher (watcher) {\n  var id = watcher.id;\n  if (has[id] == null) {\n    has[id] = true;\n    if (!flushing) {\n      queue.push(watcher);\n    } else {\n      // if already flushing, splice the watcher based on its id\n      // if already past its id, it will be run next immediately.\n      var i = queue.length - 1;\n      while (i > index && queue[i].id > watcher.id) {\n        i--;\n      }\n      queue.splice(i + 1, 0, watcher);\n    }\n    // queue the flush\n    if (!waiting) {\n      waiting = true;\n\n      if ( true && !config.async) {\n        flushSchedulerQueue();\n        return\n      }\n      nextTick(flushSchedulerQueue);\n    }\n  }\n}\n\n/*  */\n\n\n\nvar uid$2 = 0;\n\n/**\n * A watcher parses an expression, collects dependencies,\n * and fires callback when the expression value changes.\n * This is used for both the $watch() api and directives.\n */\nvar Watcher = function Watcher (\n  vm,\n  expOrFn,\n  cb,\n  options,\n  isRenderWatcher\n) {\n  this.vm = vm;\n  if (isRenderWatcher) {\n    vm._watcher = this;\n  }\n  vm._watchers.push(this);\n  // options\n  if (options) {\n    this.deep = !!options.deep;\n    this.user = !!options.user;\n    this.lazy = !!options.lazy;\n    this.sync = !!options.sync;\n    this.before = options.before;\n  } else {\n    this.deep = this.user = this.lazy = this.sync = false;\n  }\n  this.cb = cb;\n  this.id = ++uid$2; // uid for batching\n  this.active = true;\n  this.dirty = this.lazy; // for lazy watchers\n  this.deps = [];\n  this.newDeps = [];\n  this.depIds = new _Set();\n  this.newDepIds = new _Set();\n  this.expression =  true\n    ? expOrFn.toString()\n    : undefined;\n  // parse expression for getter\n  if (typeof expOrFn === 'function') {\n    this.getter = expOrFn;\n  } else {\n    this.getter = parsePath(expOrFn);\n    if (!this.getter) {\n      this.getter = noop;\n       true && warn(\n        \"Failed watching path: \\\"\" + expOrFn + \"\\\" \" +\n        'Watcher only accepts simple dot-delimited paths. ' +\n        'For full control, use a function instead.',\n        vm\n      );\n    }\n  }\n  this.value = this.lazy\n    ? undefined\n    : this.get();\n};\n\n/**\n * Evaluate the getter, and re-collect dependencies.\n */\nWatcher.prototype.get = function get () {\n  pushTarget(this);\n  var value;\n  var vm = this.vm;\n  try {\n    value = this.getter.call(vm, vm);\n  } catch (e) {\n    if (this.user) {\n      handleError(e, vm, (\"getter for watcher \\\"\" + (this.expression) + \"\\\"\"));\n    } else {\n      throw e\n    }\n  } finally {\n    // \"touch\" every property so they are all tracked as\n    // dependencies for deep watching\n    if (this.deep) {\n      traverse(value);\n    }\n    popTarget();\n    this.cleanupDeps();\n  }\n  return value\n};\n\n/**\n * Add a dependency to this directive.\n */\nWatcher.prototype.addDep = function addDep (dep) {\n  var id = dep.id;\n  if (!this.newDepIds.has(id)) {\n    this.newDepIds.add(id);\n    this.newDeps.push(dep);\n    if (!this.depIds.has(id)) {\n      dep.addSub(this);\n    }\n  }\n};\n\n/**\n * Clean up for dependency collection.\n */\nWatcher.prototype.cleanupDeps = function cleanupDeps () {\n  var i = this.deps.length;\n  while (i--) {\n    var dep = this.deps[i];\n    if (!this.newDepIds.has(dep.id)) {\n      dep.removeSub(this);\n    }\n  }\n  var tmp = this.depIds;\n  this.depIds = this.newDepIds;\n  this.newDepIds = tmp;\n  this.newDepIds.clear();\n  tmp = this.deps;\n  this.deps = this.newDeps;\n  this.newDeps = tmp;\n  this.newDeps.length = 0;\n};\n\n/**\n * Subscriber interface.\n * Will be called when a dependency changes.\n */\nWatcher.prototype.update = function update () {\n  /* istanbul ignore else */\n  if (this.lazy) {\n    this.dirty = true;\n  } else if (this.sync) {\n    this.run();\n  } else {\n    queueWatcher(this);\n  }\n};\n\n/**\n * Scheduler job interface.\n * Will be called by the scheduler.\n */\nWatcher.prototype.run = function run () {\n  if (this.active) {\n    var value = this.get();\n    if (\n      value !== this.value ||\n      // Deep watchers and watchers on Object/Arrays should fire even\n      // when the value is the same, because the value may\n      // have mutated.\n      isObject(value) ||\n      this.deep\n    ) {\n      // set new value\n      var oldValue = this.value;\n      this.value = value;\n      if (this.user) {\n        try {\n          this.cb.call(this.vm, value, oldValue);\n        } catch (e) {\n          handleError(e, this.vm, (\"callback for watcher \\\"\" + (this.expression) + \"\\\"\"));\n        }\n      } else {\n        this.cb.call(this.vm, value, oldValue);\n      }\n    }\n  }\n};\n\n/**\n * Evaluate the value of the watcher.\n * This only gets called for lazy watchers.\n */\nWatcher.prototype.evaluate = function evaluate () {\n  this.value = this.get();\n  this.dirty = false;\n};\n\n/**\n * Depend on all deps collected by this watcher.\n */\nWatcher.prototype.depend = function depend () {\n  var i = this.deps.length;\n  while (i--) {\n    this.deps[i].depend();\n  }\n};\n\n/**\n * Remove self from all dependencies' subscriber list.\n */\nWatcher.prototype.teardown = function teardown () {\n  if (this.active) {\n    // remove self from vm's watcher list\n    // this is a somewhat expensive operation so we skip it\n    // if the vm is being destroyed.\n    if (!this.vm._isBeingDestroyed) {\n      remove(this.vm._watchers, this);\n    }\n    var i = this.deps.length;\n    while (i--) {\n      this.deps[i].removeSub(this);\n    }\n    this.active = false;\n  }\n};\n\n/*  */\n\nvar sharedPropertyDefinition = {\n  enumerable: true,\n  configurable: true,\n  get: noop,\n  set: noop\n};\n\nfunction proxy (target, sourceKey, key) {\n  sharedPropertyDefinition.get = function proxyGetter () {\n    return this[sourceKey][key]\n  };\n  sharedPropertyDefinition.set = function proxySetter (val) {\n    this[sourceKey][key] = val;\n  };\n  Object.defineProperty(target, key, sharedPropertyDefinition);\n}\n\nfunction initState (vm) {\n  vm._watchers = [];\n  var opts = vm.$options;\n  if (opts.props) { initProps(vm, opts.props); }\n  if (opts.methods) { initMethods(vm, opts.methods); }\n  if (opts.data) {\n    initData(vm);\n  } else {\n    observe(vm._data = {}, true /* asRootData */);\n  }\n  if (opts.computed) { initComputed(vm, opts.computed); }\n  if (opts.watch && opts.watch !== nativeWatch) {\n    initWatch(vm, opts.watch);\n  }\n}\n\nfunction initProps (vm, propsOptions) {\n  var propsData = vm.$options.propsData || {};\n  var props = vm._props = {};\n  // cache prop keys so that future props updates can iterate using Array\n  // instead of dynamic object key enumeration.\n  var keys = vm.$options._propKeys = [];\n  var isRoot = !vm.$parent;\n  // root instance props should be converted\n  if (!isRoot) {\n    toggleObserving(false);\n  }\n  var loop = function ( key ) {\n    keys.push(key);\n    var value = validateProp(key, propsOptions, propsData, vm);\n    /* istanbul ignore else */\n    if (true) {\n      var hyphenatedKey = hyphenate(key);\n      if (isReservedAttribute(hyphenatedKey) ||\n          config.isReservedAttr(hyphenatedKey)) {\n        warn(\n          (\"\\\"\" + hyphenatedKey + \"\\\" is a reserved attribute and cannot be used as component prop.\"),\n          vm\n        );\n      }\n      defineReactive$$1(props, key, value, function () {\n        if (!isRoot && !isUpdatingChildComponent) {\n          {\n            if(vm.mpHost === 'mp-baidu'){//百度 observer 在 setData callback 之后触发，直接忽略该 warn\n                return\n            }\n            //fixed by xxxxxx __next_tick_pending,uni://form-field 时不告警\n            if(\n                key === 'value' && \n                Array.isArray(vm.$options.behaviors) &&\n                vm.$options.behaviors.indexOf('uni://form-field') !== -1\n              ){\n              return\n            }\n            if(vm._getFormData){\n              return\n            }\n            var $parent = vm.$parent;\n            while($parent){\n              if($parent.__next_tick_pending){\n                return  \n              }\n              $parent = $parent.$parent;\n            }\n          }\n          warn(\n            \"Avoid mutating a prop directly since the value will be \" +\n            \"overwritten whenever the parent component re-renders. \" +\n            \"Instead, use a data or computed property based on the prop's \" +\n            \"value. Prop being mutated: \\\"\" + key + \"\\\"\",\n            vm\n          );\n        }\n      });\n    } else {}\n    // static props are already proxied on the component's prototype\n    // during Vue.extend(). We only need to proxy props defined at\n    // instantiation here.\n    if (!(key in vm)) {\n      proxy(vm, \"_props\", key);\n    }\n  };\n\n  for (var key in propsOptions) loop( key );\n  toggleObserving(true);\n}\n\nfunction initData (vm) {\n  var data = vm.$options.data;\n  data = vm._data = typeof data === 'function'\n    ? getData(data, vm)\n    : data || {};\n  if (!isPlainObject(data)) {\n    data = {};\n     true && warn(\n      'data functions should return an object:\\n' +\n      'https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function',\n      vm\n    );\n  }\n  // proxy data on instance\n  var keys = Object.keys(data);\n  var props = vm.$options.props;\n  var methods = vm.$options.methods;\n  var i = keys.length;\n  while (i--) {\n    var key = keys[i];\n    if (true) {\n      if (methods && hasOwn(methods, key)) {\n        warn(\n          (\"Method \\\"\" + key + \"\\\" has already been defined as a data property.\"),\n          vm\n        );\n      }\n    }\n    if (props && hasOwn(props, key)) {\n       true && warn(\n        \"The data property \\\"\" + key + \"\\\" is already declared as a prop. \" +\n        \"Use prop default value instead.\",\n        vm\n      );\n    } else if (!isReserved(key)) {\n      proxy(vm, \"_data\", key);\n    }\n  }\n  // observe data\n  observe(data, true /* asRootData */);\n}\n\nfunction getData (data, vm) {\n  // #7573 disable dep collection when invoking data getters\n  pushTarget();\n  try {\n    return data.call(vm, vm)\n  } catch (e) {\n    handleError(e, vm, \"data()\");\n    return {}\n  } finally {\n    popTarget();\n  }\n}\n\nvar computedWatcherOptions = { lazy: true };\n\nfunction initComputed (vm, computed) {\n  // $flow-disable-line\n  var watchers = vm._computedWatchers = Object.create(null);\n  // computed properties are just getters during SSR\n  var isSSR = isServerRendering();\n\n  for (var key in computed) {\n    var userDef = computed[key];\n    var getter = typeof userDef === 'function' ? userDef : userDef.get;\n    if ( true && getter == null) {\n      warn(\n        (\"Getter is missing for computed property \\\"\" + key + \"\\\".\"),\n        vm\n      );\n    }\n\n    if (!isSSR) {\n      // create internal watcher for the computed property.\n      watchers[key] = new Watcher(\n        vm,\n        getter || noop,\n        noop,\n        computedWatcherOptions\n      );\n    }\n\n    // component-defined computed properties are already defined on the\n    // component prototype. We only need to define computed properties defined\n    // at instantiation here.\n    if (!(key in vm)) {\n      defineComputed(vm, key, userDef);\n    } else if (true) {\n      if (key in vm.$data) {\n        warn((\"The computed property \\\"\" + key + \"\\\" is already defined in data.\"), vm);\n      } else if (vm.$options.props && key in vm.$options.props) {\n        warn((\"The computed property \\\"\" + key + \"\\\" is already defined as a prop.\"), vm);\n      }\n    }\n  }\n}\n\nfunction defineComputed (\n  target,\n  key,\n  userDef\n) {\n  var shouldCache = !isServerRendering();\n  if (typeof userDef === 'function') {\n    sharedPropertyDefinition.get = shouldCache\n      ? createComputedGetter(key)\n      : createGetterInvoker(userDef);\n    sharedPropertyDefinition.set = noop;\n  } else {\n    sharedPropertyDefinition.get = userDef.get\n      ? shouldCache && userDef.cache !== false\n        ? createComputedGetter(key)\n        : createGetterInvoker(userDef.get)\n      : noop;\n    sharedPropertyDefinition.set = userDef.set || noop;\n  }\n  if ( true &&\n      sharedPropertyDefinition.set === noop) {\n    sharedPropertyDefinition.set = function () {\n      warn(\n        (\"Computed property \\\"\" + key + \"\\\" was assigned to but it has no setter.\"),\n        this\n      );\n    };\n  }\n  Object.defineProperty(target, key, sharedPropertyDefinition);\n}\n\nfunction createComputedGetter (key) {\n  return function computedGetter () {\n    var watcher = this._computedWatchers && this._computedWatchers[key];\n    if (watcher) {\n      if (watcher.dirty) {\n        watcher.evaluate();\n      }\n      if (Dep.SharedObject.target) {// fixed by xxxxxx\n        watcher.depend();\n      }\n      return watcher.value\n    }\n  }\n}\n\nfunction createGetterInvoker(fn) {\n  return function computedGetter () {\n    return fn.call(this, this)\n  }\n}\n\nfunction initMethods (vm, methods) {\n  var props = vm.$options.props;\n  for (var key in methods) {\n    if (true) {\n      if (typeof methods[key] !== 'function') {\n        warn(\n          \"Method \\\"\" + key + \"\\\" has type \\\"\" + (typeof methods[key]) + \"\\\" in the component definition. \" +\n          \"Did you reference the function correctly?\",\n          vm\n        );\n      }\n      if (props && hasOwn(props, key)) {\n        warn(\n          (\"Method \\\"\" + key + \"\\\" has already been defined as a prop.\"),\n          vm\n        );\n      }\n      if ((key in vm) && isReserved(key)) {\n        warn(\n          \"Method \\\"\" + key + \"\\\" conflicts with an existing Vue instance method. \" +\n          \"Avoid defining component methods that start with _ or $.\"\n        );\n      }\n    }\n    vm[key] = typeof methods[key] !== 'function' ? noop : bind(methods[key], vm);\n  }\n}\n\nfunction initWatch (vm, watch) {\n  for (var key in watch) {\n    var handler = watch[key];\n    if (Array.isArray(handler)) {\n      for (var i = 0; i < handler.length; i++) {\n        createWatcher(vm, key, handler[i]);\n      }\n    } else {\n      createWatcher(vm, key, handler);\n    }\n  }\n}\n\nfunction createWatcher (\n  vm,\n  expOrFn,\n  handler,\n  options\n) {\n  if (isPlainObject(handler)) {\n    options = handler;\n    handler = handler.handler;\n  }\n  if (typeof handler === 'string') {\n    handler = vm[handler];\n  }\n  return vm.$watch(expOrFn, handler, options)\n}\n\nfunction stateMixin (Vue) {\n  // flow somehow has problems with directly declared definition object\n  // when using Object.defineProperty, so we have to procedurally build up\n  // the object here.\n  var dataDef = {};\n  dataDef.get = function () { return this._data };\n  var propsDef = {};\n  propsDef.get = function () { return this._props };\n  if (true) {\n    dataDef.set = function () {\n      warn(\n        'Avoid replacing instance root $data. ' +\n        'Use nested data properties instead.',\n        this\n      );\n    };\n    propsDef.set = function () {\n      warn(\"$props is readonly.\", this);\n    };\n  }\n  Object.defineProperty(Vue.prototype, '$data', dataDef);\n  Object.defineProperty(Vue.prototype, '$props', propsDef);\n\n  Vue.prototype.$set = set;\n  Vue.prototype.$delete = del;\n\n  Vue.prototype.$watch = function (\n    expOrFn,\n    cb,\n    options\n  ) {\n    var vm = this;\n    if (isPlainObject(cb)) {\n      return createWatcher(vm, expOrFn, cb, options)\n    }\n    options = options || {};\n    options.user = true;\n    var watcher = new Watcher(vm, expOrFn, cb, options);\n    if (options.immediate) {\n      try {\n        cb.call(vm, watcher.value);\n      } catch (error) {\n        handleError(error, vm, (\"callback for immediate watcher \\\"\" + (watcher.expression) + \"\\\"\"));\n      }\n    }\n    return function unwatchFn () {\n      watcher.teardown();\n    }\n  };\n}\n\n/*  */\n\nvar uid$3 = 0;\n\nfunction initMixin (Vue) {\n  Vue.prototype._init = function (options) {\n    var vm = this;\n    // a uid\n    vm._uid = uid$3++;\n\n    var startTag, endTag;\n    /* istanbul ignore if */\n    if ( true && config.performance && mark) {\n      startTag = \"vue-perf-start:\" + (vm._uid);\n      endTag = \"vue-perf-end:\" + (vm._uid);\n      mark(startTag);\n    }\n\n    // a flag to avoid this being observed\n    vm._isVue = true;\n    // merge options\n    if (options && options._isComponent) {\n      // optimize internal component instantiation\n      // since dynamic options merging is pretty slow, and none of the\n      // internal component options needs special treatment.\n      initInternalComponent(vm, options);\n    } else {\n      vm.$options = mergeOptions(\n        resolveConstructorOptions(vm.constructor),\n        options || {},\n        vm\n      );\n    }\n    /* istanbul ignore else */\n    if (true) {\n      initProxy(vm);\n    } else {}\n    // expose real self\n    vm._self = vm;\n    initLifecycle(vm);\n    initEvents(vm);\n    initRender(vm);\n    callHook(vm, 'beforeCreate');\n    vm.mpHost !== 'mp-toutiao' && initInjections(vm); // resolve injections before data/props  \n    initState(vm);\n    vm.mpHost !== 'mp-toutiao' && initProvide(vm); // resolve provide after data/props\n    vm.mpHost !== 'mp-toutiao' && callHook(vm, 'created');      \n\n    /* istanbul ignore if */\n    if ( true && config.performance && mark) {\n      vm._name = formatComponentName(vm, false);\n      mark(endTag);\n      measure((\"vue \" + (vm._name) + \" init\"), startTag, endTag);\n    }\n\n    if (vm.$options.el) {\n      vm.$mount(vm.$options.el);\n    }\n  };\n}\n\nfunction initInternalComponent (vm, options) {\n  var opts = vm.$options = Object.create(vm.constructor.options);\n  // doing this because it's faster than dynamic enumeration.\n  var parentVnode = options._parentVnode;\n  opts.parent = options.parent;\n  opts._parentVnode = parentVnode;\n\n  var vnodeComponentOptions = parentVnode.componentOptions;\n  opts.propsData = vnodeComponentOptions.propsData;\n  opts._parentListeners = vnodeComponentOptions.listeners;\n  opts._renderChildren = vnodeComponentOptions.children;\n  opts._componentTag = vnodeComponentOptions.tag;\n\n  if (options.render) {\n    opts.render = options.render;\n    opts.staticRenderFns = options.staticRenderFns;\n  }\n}\n\nfunction resolveConstructorOptions (Ctor) {\n  var options = Ctor.options;\n  if (Ctor.super) {\n    var superOptions = resolveConstructorOptions(Ctor.super);\n    var cachedSuperOptions = Ctor.superOptions;\n    if (superOptions !== cachedSuperOptions) {\n      // super option changed,\n      // need to resolve new options.\n      Ctor.superOptions = superOptions;\n      // check if there are any late-modified/attached options (#4976)\n      var modifiedOptions = resolveModifiedOptions(Ctor);\n      // update base extend options\n      if (modifiedOptions) {\n        extend(Ctor.extendOptions, modifiedOptions);\n      }\n      options = Ctor.options = mergeOptions(superOptions, Ctor.extendOptions);\n      if (options.name) {\n        options.components[options.name] = Ctor;\n      }\n    }\n  }\n  return options\n}\n\nfunction resolveModifiedOptions (Ctor) {\n  var modified;\n  var latest = Ctor.options;\n  var sealed = Ctor.sealedOptions;\n  for (var key in latest) {\n    if (latest[key] !== sealed[key]) {\n      if (!modified) { modified = {}; }\n      modified[key] = latest[key];\n    }\n  }\n  return modified\n}\n\nfunction Vue (options) {\n  if ( true &&\n    !(this instanceof Vue)\n  ) {\n    warn('Vue is a constructor and should be called with the `new` keyword');\n  }\n  this._init(options);\n}\n\ninitMixin(Vue);\nstateMixin(Vue);\neventsMixin(Vue);\nlifecycleMixin(Vue);\nrenderMixin(Vue);\n\n/*  */\n\nfunction initUse (Vue) {\n  Vue.use = function (plugin) {\n    var installedPlugins = (this._installedPlugins || (this._installedPlugins = []));\n    if (installedPlugins.indexOf(plugin) > -1) {\n      return this\n    }\n\n    // additional parameters\n    var args = toArray(arguments, 1);\n    args.unshift(this);\n    if (typeof plugin.install === 'function') {\n      plugin.install.apply(plugin, args);\n    } else if (typeof plugin === 'function') {\n      plugin.apply(null, args);\n    }\n    installedPlugins.push(plugin);\n    return this\n  };\n}\n\n/*  */\n\nfunction initMixin$1 (Vue) {\n  Vue.mixin = function (mixin) {\n    this.options = mergeOptions(this.options, mixin);\n    return this\n  };\n}\n\n/*  */\n\nfunction initExtend (Vue) {\n  /**\n   * Each instance constructor, including Vue, has a unique\n   * cid. This enables us to create wrapped \"child\n   * constructors\" for prototypal inheritance and cache them.\n   */\n  Vue.cid = 0;\n  var cid = 1;\n\n  /**\n   * Class inheritance\n   */\n  Vue.extend = function (extendOptions) {\n    extendOptions = extendOptions || {};\n    var Super = this;\n    var SuperId = Super.cid;\n    var cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = {});\n    if (cachedCtors[SuperId]) {\n      return cachedCtors[SuperId]\n    }\n\n    var name = extendOptions.name || Super.options.name;\n    if ( true && name) {\n      validateComponentName(name);\n    }\n\n    var Sub = function VueComponent (options) {\n      this._init(options);\n    };\n    Sub.prototype = Object.create(Super.prototype);\n    Sub.prototype.constructor = Sub;\n    Sub.cid = cid++;\n    Sub.options = mergeOptions(\n      Super.options,\n      extendOptions\n    );\n    Sub['super'] = Super;\n\n    // For props and computed properties, we define the proxy getters on\n    // the Vue instances at extension time, on the extended prototype. This\n    // avoids Object.defineProperty calls for each instance created.\n    if (Sub.options.props) {\n      initProps$1(Sub);\n    }\n    if (Sub.options.computed) {\n      initComputed$1(Sub);\n    }\n\n    // allow further extension/mixin/plugin usage\n    Sub.extend = Super.extend;\n    Sub.mixin = Super.mixin;\n    Sub.use = Super.use;\n\n    // create asset registers, so extended classes\n    // can have their private assets too.\n    ASSET_TYPES.forEach(function (type) {\n      Sub[type] = Super[type];\n    });\n    // enable recursive self-lookup\n    if (name) {\n      Sub.options.components[name] = Sub;\n    }\n\n    // keep a reference to the super options at extension time.\n    // later at instantiation we can check if Super's options have\n    // been updated.\n    Sub.superOptions = Super.options;\n    Sub.extendOptions = extendOptions;\n    Sub.sealedOptions = extend({}, Sub.options);\n\n    // cache constructor\n    cachedCtors[SuperId] = Sub;\n    return Sub\n  };\n}\n\nfunction initProps$1 (Comp) {\n  var props = Comp.options.props;\n  for (var key in props) {\n    proxy(Comp.prototype, \"_props\", key);\n  }\n}\n\nfunction initComputed$1 (Comp) {\n  var computed = Comp.options.computed;\n  for (var key in computed) {\n    defineComputed(Comp.prototype, key, computed[key]);\n  }\n}\n\n/*  */\n\nfunction initAssetRegisters (Vue) {\n  /**\n   * Create asset registration methods.\n   */\n  ASSET_TYPES.forEach(function (type) {\n    Vue[type] = function (\n      id,\n      definition\n    ) {\n      if (!definition) {\n        return this.options[type + 's'][id]\n      } else {\n        /* istanbul ignore if */\n        if ( true && type === 'component') {\n          validateComponentName(id);\n        }\n        if (type === 'component' && isPlainObject(definition)) {\n          definition.name = definition.name || id;\n          definition = this.options._base.extend(definition);\n        }\n        if (type === 'directive' && typeof definition === 'function') {\n          definition = { bind: definition, update: definition };\n        }\n        this.options[type + 's'][id] = definition;\n        return definition\n      }\n    };\n  });\n}\n\n/*  */\n\n\n\nfunction getComponentName (opts) {\n  return opts && (opts.Ctor.options.name || opts.tag)\n}\n\nfunction matches (pattern, name) {\n  if (Array.isArray(pattern)) {\n    return pattern.indexOf(name) > -1\n  } else if (typeof pattern === 'string') {\n    return pattern.split(',').indexOf(name) > -1\n  } else if (isRegExp(pattern)) {\n    return pattern.test(name)\n  }\n  /* istanbul ignore next */\n  return false\n}\n\nfunction pruneCache (keepAliveInstance, filter) {\n  var cache = keepAliveInstance.cache;\n  var keys = keepAliveInstance.keys;\n  var _vnode = keepAliveInstance._vnode;\n  for (var key in cache) {\n    var cachedNode = cache[key];\n    if (cachedNode) {\n      var name = getComponentName(cachedNode.componentOptions);\n      if (name && !filter(name)) {\n        pruneCacheEntry(cache, key, keys, _vnode);\n      }\n    }\n  }\n}\n\nfunction pruneCacheEntry (\n  cache,\n  key,\n  keys,\n  current\n) {\n  var cached$$1 = cache[key];\n  if (cached$$1 && (!current || cached$$1.tag !== current.tag)) {\n    cached$$1.componentInstance.$destroy();\n  }\n  cache[key] = null;\n  remove(keys, key);\n}\n\nvar patternTypes = [String, RegExp, Array];\n\nvar KeepAlive = {\n  name: 'keep-alive',\n  abstract: true,\n\n  props: {\n    include: patternTypes,\n    exclude: patternTypes,\n    max: [String, Number]\n  },\n\n  created: function created () {\n    this.cache = Object.create(null);\n    this.keys = [];\n  },\n\n  destroyed: function destroyed () {\n    for (var key in this.cache) {\n      pruneCacheEntry(this.cache, key, this.keys);\n    }\n  },\n\n  mounted: function mounted () {\n    var this$1 = this;\n\n    this.$watch('include', function (val) {\n      pruneCache(this$1, function (name) { return matches(val, name); });\n    });\n    this.$watch('exclude', function (val) {\n      pruneCache(this$1, function (name) { return !matches(val, name); });\n    });\n  },\n\n  render: function render () {\n    var slot = this.$slots.default;\n    var vnode = getFirstComponentChild(slot);\n    var componentOptions = vnode && vnode.componentOptions;\n    if (componentOptions) {\n      // check pattern\n      var name = getComponentName(componentOptions);\n      var ref = this;\n      var include = ref.include;\n      var exclude = ref.exclude;\n      if (\n        // not included\n        (include && (!name || !matches(include, name))) ||\n        // excluded\n        (exclude && name && matches(exclude, name))\n      ) {\n        return vnode\n      }\n\n      var ref$1 = this;\n      var cache = ref$1.cache;\n      var keys = ref$1.keys;\n      var key = vnode.key == null\n        // same constructor may get registered as different local components\n        // so cid alone is not enough (#3269)\n        ? componentOptions.Ctor.cid + (componentOptions.tag ? (\"::\" + (componentOptions.tag)) : '')\n        : vnode.key;\n      if (cache[key]) {\n        vnode.componentInstance = cache[key].componentInstance;\n        // make current key freshest\n        remove(keys, key);\n        keys.push(key);\n      } else {\n        cache[key] = vnode;\n        keys.push(key);\n        // prune oldest entry\n        if (this.max && keys.length > parseInt(this.max)) {\n          pruneCacheEntry(cache, keys[0], keys, this._vnode);\n        }\n      }\n\n      vnode.data.keepAlive = true;\n    }\n    return vnode || (slot && slot[0])\n  }\n};\n\nvar builtInComponents = {\n  KeepAlive: KeepAlive\n};\n\n/*  */\n\nfunction initGlobalAPI (Vue) {\n  // config\n  var configDef = {};\n  configDef.get = function () { return config; };\n  if (true) {\n    configDef.set = function () {\n      warn(\n        'Do not replace the Vue.config object, set individual fields instead.'\n      );\n    };\n  }\n  Object.defineProperty(Vue, 'config', configDef);\n\n  // exposed util methods.\n  // NOTE: these are not considered part of the public API - avoid relying on\n  // them unless you are aware of the risk.\n  Vue.util = {\n    warn: warn,\n    extend: extend,\n    mergeOptions: mergeOptions,\n    defineReactive: defineReactive$$1\n  };\n\n  Vue.set = set;\n  Vue.delete = del;\n  Vue.nextTick = nextTick;\n\n  // 2.6 explicit observable API\n  Vue.observable = function (obj) {\n    observe(obj);\n    return obj\n  };\n\n  Vue.options = Object.create(null);\n  ASSET_TYPES.forEach(function (type) {\n    Vue.options[type + 's'] = Object.create(null);\n  });\n\n  // this is used to identify the \"base\" constructor to extend all plain-object\n  // components with in Weex's multi-instance scenarios.\n  Vue.options._base = Vue;\n\n  extend(Vue.options.components, builtInComponents);\n\n  initUse(Vue);\n  initMixin$1(Vue);\n  initExtend(Vue);\n  initAssetRegisters(Vue);\n}\n\ninitGlobalAPI(Vue);\n\nObject.defineProperty(Vue.prototype, '$isServer', {\n  get: isServerRendering\n});\n\nObject.defineProperty(Vue.prototype, '$ssrContext', {\n  get: function get () {\n    /* istanbul ignore next */\n    return this.$vnode && this.$vnode.ssrContext\n  }\n});\n\n// expose FunctionalRenderContext for ssr runtime helper installation\nObject.defineProperty(Vue, 'FunctionalRenderContext', {\n  value: FunctionalRenderContext\n});\n\nVue.version = '2.6.10';\n\n/**\n * https://raw.githubusercontent.com/Tencent/westore/master/packages/westore/utils/diff.js\n */\nvar ARRAYTYPE = '[object Array]';\nvar OBJECTTYPE = '[object Object]';\n// const FUNCTIONTYPE = '[object Function]'\n\nfunction diff(current, pre) {\n    var result = {};\n    syncKeys(current, pre);\n    _diff(current, pre, '', result);\n    return result\n}\n\nfunction syncKeys(current, pre) {\n    if (current === pre) { return }\n    var rootCurrentType = type(current);\n    var rootPreType = type(pre);\n    if (rootCurrentType == OBJECTTYPE && rootPreType == OBJECTTYPE) {\n        if(Object.keys(current).length >= Object.keys(pre).length){\n            for (var key in pre) {\n                var currentValue = current[key];\n                if (currentValue === undefined) {\n                    current[key] = null;\n                } else {\n                    syncKeys(currentValue, pre[key]);\n                }\n            }\n        }\n    } else if (rootCurrentType == ARRAYTYPE && rootPreType == ARRAYTYPE) {\n        if (current.length >= pre.length) {\n            pre.forEach(function (item, index) {\n                syncKeys(current[index], item);\n            });\n        }\n    }\n}\n\nfunction _diff(current, pre, path, result) {\n    if (current === pre) { return }\n    var rootCurrentType = type(current);\n    var rootPreType = type(pre);\n    if (rootCurrentType == OBJECTTYPE) {\n        if (rootPreType != OBJECTTYPE || Object.keys(current).length < Object.keys(pre).length) {\n            setResult(result, path, current);\n        } else {\n            var loop = function ( key ) {\n                var currentValue = current[key];\n                var preValue = pre[key];\n                var currentType = type(currentValue);\n                var preType = type(preValue);\n                if (currentType != ARRAYTYPE && currentType != OBJECTTYPE) {\n                    if (currentValue != pre[key]) {\n                        setResult(result, (path == '' ? '' : path + \".\") + key, currentValue);\n                    }\n                } else if (currentType == ARRAYTYPE) {\n                    if (preType != ARRAYTYPE) {\n                        setResult(result, (path == '' ? '' : path + \".\") + key, currentValue);\n                    } else {\n                        if (currentValue.length < preValue.length) {\n                            setResult(result, (path == '' ? '' : path + \".\") + key, currentValue);\n                        } else {\n                            currentValue.forEach(function (item, index) {\n                                _diff(item, preValue[index], (path == '' ? '' : path + \".\") + key + '[' + index + ']', result);\n                            });\n                        }\n                    }\n                } else if (currentType == OBJECTTYPE) {\n                    if (preType != OBJECTTYPE || Object.keys(currentValue).length < Object.keys(preValue).length) {\n                        setResult(result, (path == '' ? '' : path + \".\") + key, currentValue);\n                    } else {\n                        for (var subKey in currentValue) {\n                            _diff(currentValue[subKey], preValue[subKey], (path == '' ? '' : path + \".\") + key + '.' + subKey, result);\n                        }\n                    }\n                }\n            };\n\n            for (var key in current) loop( key );\n        }\n    } else if (rootCurrentType == ARRAYTYPE) {\n        if (rootPreType != ARRAYTYPE) {\n            setResult(result, path, current);\n        } else {\n            if (current.length < pre.length) {\n                setResult(result, path, current);\n            } else {\n                current.forEach(function (item, index) {\n                    _diff(item, pre[index], path + '[' + index + ']', result);\n                });\n            }\n        }\n    } else {\n        setResult(result, path, current);\n    }\n}\n\nfunction setResult(result, k, v) {\n    // if (type(v) != FUNCTIONTYPE) {\n        result[k] = v;\n    // }\n}\n\nfunction type(obj) {\n    return Object.prototype.toString.call(obj)\n}\n\n/*  */\r\n\r\nfunction flushCallbacks$1(vm) {\r\n    if (vm.__next_tick_callbacks && vm.__next_tick_callbacks.length) {\r\n        if (Object({\"VUE_APP_PLATFORM\":\"app-plus\",\"NODE_ENV\":\"development\",\"BASE_URL\":\"/\"}).VUE_APP_DEBUG) {\r\n            var mpInstance = vm.$scope;\r\n            console.log('[' + (+new Date) + '][' + (mpInstance.is || mpInstance.route) + '][' + vm._uid +\r\n                ']:flushCallbacks[' + vm.__next_tick_callbacks.length + ']');\r\n        }\r\n        var copies = vm.__next_tick_callbacks.slice(0);\r\n        vm.__next_tick_callbacks.length = 0;\r\n        for (var i = 0; i < copies.length; i++) {\r\n            copies[i]();\r\n        }\r\n    }\r\n}\r\n\r\nfunction hasRenderWatcher(vm) {\r\n    return queue.find(function (watcher) { return vm._watcher === watcher; })\r\n}\r\n\r\nfunction nextTick$1(vm, cb) {\r\n    //1.nextTick 之前 已 setData 且 setData 还未回调完成\r\n    //2.nextTick 之前存在 render watcher\r\n    if (!vm.__next_tick_pending && !hasRenderWatcher(vm)) {\n        if(Object({\"VUE_APP_PLATFORM\":\"app-plus\",\"NODE_ENV\":\"development\",\"BASE_URL\":\"/\"}).VUE_APP_DEBUG){\n            var mpInstance = vm.$scope;\n            console.log('[' + (+new Date) + '][' + (mpInstance.is || mpInstance.route) + '][' + vm._uid +\n                ']:nextVueTick');\n        }\r\n        return nextTick(cb, vm)\r\n    }else{\n        if(Object({\"VUE_APP_PLATFORM\":\"app-plus\",\"NODE_ENV\":\"development\",\"BASE_URL\":\"/\"}).VUE_APP_DEBUG){\n            var mpInstance$1 = vm.$scope;\n            console.log('[' + (+new Date) + '][' + (mpInstance$1.is || mpInstance$1.route) + '][' + vm._uid +\n                ']:nextMPTick');\n        }\n    }\r\n    var _resolve;\r\n    if (!vm.__next_tick_callbacks) {\r\n        vm.__next_tick_callbacks = [];\r\n    }\r\n    vm.__next_tick_callbacks.push(function () {\r\n        if (cb) {\r\n            try {\r\n                cb.call(vm);\r\n            } catch (e) {\r\n                handleError(e, vm, 'nextTick');\r\n            }\r\n        } else if (_resolve) {\r\n            _resolve(vm);\r\n        }\r\n    });\r\n    // $flow-disable-line\r\n    if (!cb && typeof Promise !== 'undefined') {\r\n        return new Promise(function (resolve) {\r\n            _resolve = resolve;\r\n        })\r\n    }\r\n}\n\n/*  */\r\n\r\nfunction cloneWithData(vm) {\r\n  // 确保当前 vm 所有数据被同步\r\n  var ret = Object.create(null);\r\n  var dataKeys = [].concat(\r\n    Object.keys(vm._data || {}),\r\n    Object.keys(vm._computedWatchers || {}));\r\n\r\n  dataKeys.reduce(function(ret, key) {\r\n    ret[key] = vm[key];\r\n    return ret\r\n  }, ret);\r\n  //TODO 需要把无用数据处理掉，比如 list=>l0 则 list 需要移除，否则多传输一份数据\r\n  Object.assign(ret, vm.$mp.data || {});\r\n  if (\r\n    Array.isArray(vm.$options.behaviors) &&\r\n    vm.$options.behaviors.indexOf('uni://form-field') !== -1\r\n  ) { //form-field\r\n    ret['name'] = vm.name;\r\n    ret['value'] = vm.value;\r\n  }\r\n\r\n  return JSON.parse(JSON.stringify(ret))\r\n}\r\n\r\nvar patch = function(oldVnode, vnode) {\n  var this$1 = this;\n\r\n  if (vnode === null) { //destroy\r\n    return\r\n  }\r\n  if (this.mpType === 'page' || this.mpType === 'component') {\r\n    var mpInstance = this.$scope;\r\n    var data = Object.create(null);\r\n    try {\r\n      data = cloneWithData(this);\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n    data.__webviewId__ = mpInstance.data.__webviewId__;\r\n    var mpData = Object.create(null);\r\n    Object.keys(data).forEach(function (key) { //仅同步 data 中有的数据\r\n      mpData[key] = mpInstance.data[key];\r\n    });\r\n    var diffData = diff(data, mpData);\r\n    if (Object.keys(diffData).length) {\r\n      if (Object({\"VUE_APP_PLATFORM\":\"app-plus\",\"NODE_ENV\":\"development\",\"BASE_URL\":\"/\"}).VUE_APP_DEBUG) {\r\n        console.log('[' + (+new Date) + '][' + (mpInstance.is || mpInstance.route) + '][' + this._uid +\r\n          ']差量更新',\r\n          JSON.stringify(diffData));\r\n      }\r\n      this.__next_tick_pending = true;\r\n      mpInstance.setData(diffData, function () {\r\n        this$1.__next_tick_pending = false;\r\n        flushCallbacks$1(this$1);\r\n      });\r\n    } else {\r\n      flushCallbacks$1(this);\r\n    }\r\n  }\r\n};\n\n/*  */\n\nfunction createEmptyRender() {\n\n}\n\nfunction mountComponent$1(\n  vm,\n  el,\n  hydrating\n) {\n  if (!vm.mpType) {//main.js 中的 new Vue\n    return vm\n  }\n  if (vm.mpType === 'app') {\n    vm.$options.render = createEmptyRender;\n  }\n  if (!vm.$options.render) {\n    vm.$options.render = createEmptyRender;\n    if (true) {\n      /* istanbul ignore if */\n      if ((vm.$options.template && vm.$options.template.charAt(0) !== '#') ||\n        vm.$options.el || el) {\n        warn(\n          'You are using the runtime-only build of Vue where the template ' +\n          'compiler is not available. Either pre-compile the templates into ' +\n          'render functions, or use the compiler-included build.',\n          vm\n        );\n      } else {\n        warn(\n          'Failed to mount component: template or render function not defined.',\n          vm\n        );\n      }\n    }\n  }\n  \n  vm.mpHost !== 'mp-toutiao' && callHook(vm, 'beforeMount');\n\n  var updateComponent = function () {\n    vm._update(vm._render(), hydrating);\n  };\n\n  // we set this to vm._watcher inside the watcher's constructor\n  // since the watcher's initial patch may call $forceUpdate (e.g. inside child\n  // component's mounted hook), which relies on vm._watcher being already defined\n  new Watcher(vm, updateComponent, noop, {\n    before: function before() {\n      if (vm._isMounted && !vm._isDestroyed) {\n        callHook(vm, 'beforeUpdate');\n      }\n    }\n  }, true /* isRenderWatcher */);\n  hydrating = false;\n  return vm\n}\n\n/*  */\n\nfunction renderClass (\n  staticClass,\n  dynamicClass\n) {\n  if (isDef(staticClass) || isDef(dynamicClass)) {\n    return concat(staticClass, stringifyClass(dynamicClass))\n  }\n  /* istanbul ignore next */\n  return ''\n}\n\nfunction concat (a, b) {\n  return a ? b ? (a + ' ' + b) : a : (b || '')\n}\n\nfunction stringifyClass (value) {\n  if (Array.isArray(value)) {\n    return stringifyArray(value)\n  }\n  if (isObject(value)) {\n    return stringifyObject(value)\n  }\n  if (typeof value === 'string') {\n    return value\n  }\n  /* istanbul ignore next */\n  return ''\n}\n\nfunction stringifyArray (value) {\n  var res = '';\n  var stringified;\n  for (var i = 0, l = value.length; i < l; i++) {\n    if (isDef(stringified = stringifyClass(value[i])) && stringified !== '') {\n      if (res) { res += ' '; }\n      res += stringified;\n    }\n  }\n  return res\n}\n\nfunction stringifyObject (value) {\n  var res = '';\n  for (var key in value) {\n    if (value[key]) {\n      if (res) { res += ' '; }\n      res += key;\n    }\n  }\n  return res\n}\n\n/*  */\n\nvar parseStyleText = cached(function (cssText) {\n  var res = {};\n  var listDelimiter = /;(?![^(]*\\))/g;\n  var propertyDelimiter = /:(.+)/;\n  cssText.split(listDelimiter).forEach(function (item) {\n    if (item) {\n      var tmp = item.split(propertyDelimiter);\n      tmp.length > 1 && (res[tmp[0].trim()] = tmp[1].trim());\n    }\n  });\n  return res\n});\n\n// normalize possible array / string values into Object\nfunction normalizeStyleBinding (bindingStyle) {\n  if (Array.isArray(bindingStyle)) {\n    return toObject(bindingStyle)\n  }\n  if (typeof bindingStyle === 'string') {\n    return parseStyleText(bindingStyle)\n  }\n  return bindingStyle\n}\n\n/*  */\r\n\r\nvar MP_METHODS = ['createSelectorQuery', 'createIntersectionObserver', 'selectAllComponents', 'selectComponent'];\r\n\r\nfunction getTarget(obj, path) {\r\n  var parts = path.split('.');\r\n  var key = parts[0];\r\n  if (key.indexOf('__$n') === 0) { //number index\r\n    key = parseInt(key.replace('__$n', ''));\r\n  }\r\n  if (parts.length === 1) {\r\n    return obj[key]\r\n  }\r\n  return getTarget(obj[key], parts.slice(1).join('.'))\r\n}\r\n\r\nfunction internalMixin(Vue) {\r\n\r\n  Vue.config.errorHandler = function(err) {\r\n    console.error(err);\r\n  };\r\n\r\n  var oldEmit = Vue.prototype.$emit;\r\n\r\n  Vue.prototype.$emit = function(event) {\r\n    if (this.$scope && event) {\r\n      this.$scope['triggerEvent'](event, {\r\n        __args__: toArray(arguments, 1)\r\n      });\r\n    }\r\n    return oldEmit.apply(this, arguments)\r\n  };\r\n\r\n  Vue.prototype.$nextTick = function(fn) {\r\n    return nextTick$1(this, fn)\r\n  };\r\n\r\n  MP_METHODS.forEach(function (method) {\r\n    Vue.prototype[method] = function(args) {\r\n      if (this.$scope) {\r\n        return this.$scope[method](args)\r\n      }\r\n    };\r\n  });\r\n\r\n  Vue.prototype.__init_provide = initProvide;\r\n\r\n  Vue.prototype.__init_injections = initInjections;\r\n\r\n  Vue.prototype.__call_hook = function(hook, args) {\r\n    var vm = this;\r\n    // #7573 disable dep collection when invoking lifecycle hooks\r\n    pushTarget();\r\n    var handlers = vm.$options[hook];\r\n    var info = hook + \" hook\";\r\n    var ret;\r\n    if (handlers) {\r\n      for (var i = 0, j = handlers.length; i < j; i++) {\r\n        ret = invokeWithErrorHandling(handlers[i], vm, args ? [args] : null, vm, info);\r\n      }\r\n    }\r\n    if (vm._hasHookEvent) {\r\n      vm.$emit('hook:' + hook);\r\n    }\r\n    popTarget();\r\n    return ret\r\n  };\r\n\r\n  Vue.prototype.__set_model = function(target, key, value, modifiers) {\r\n    if (Array.isArray(modifiers)) {\r\n      if (modifiers.indexOf('trim') !== -1) {\r\n        value = value.trim();\r\n      }\r\n      if (modifiers.indexOf('number') !== -1) {\r\n        value = this._n(value);\r\n      }\r\n    }\r\n    if (!target) {\r\n      target = this;\r\n    }\r\n    target[key] = value;\r\n  };\r\n\r\n  Vue.prototype.__set_sync = function(target, key, value) {\r\n    if (!target) {\r\n      target = this;\r\n    }\r\n    target[key] = value;\r\n  };\r\n\r\n  Vue.prototype.__get_orig = function(item) {\r\n    if (isPlainObject(item)) {\r\n      return item['$orig'] || item\r\n    }\r\n    return item\r\n  };\r\n\r\n  Vue.prototype.__get_value = function(dataPath, target) {\r\n    return getTarget(target || this, dataPath)\r\n  };\r\n\r\n\r\n  Vue.prototype.__get_class = function(dynamicClass, staticClass) {\r\n    return renderClass(staticClass, dynamicClass)\r\n  };\r\n\r\n  Vue.prototype.__get_style = function(dynamicStyle, staticStyle) {\r\n    if (!dynamicStyle && !staticStyle) {\r\n      return ''\r\n    }\r\n    var dynamicStyleObj = normalizeStyleBinding(dynamicStyle);\r\n    var styleObj = staticStyle ? extend(staticStyle, dynamicStyleObj) : dynamicStyleObj;\r\n    return Object.keys(styleObj).map(function (name) { return ((hyphenate(name)) + \":\" + (styleObj[name])); }).join(';')\r\n  };\r\n\r\n  Vue.prototype.__map = function(val, iteratee) {\r\n    //TODO 暂不考虑 string,number\r\n    var ret, i, l, keys, key;\r\n    if (Array.isArray(val)) {\r\n      ret = new Array(val.length);\r\n      for (i = 0, l = val.length; i < l; i++) {\r\n        ret[i] = iteratee(val[i], i);\r\n      }\r\n      return ret\r\n    } else if (isObject(val)) {\r\n      keys = Object.keys(val);\r\n      ret = Object.create(null);\r\n      for (i = 0, l = keys.length; i < l; i++) {\r\n        key = keys[i];\r\n        ret[key] = iteratee(val[key], key, i);\r\n      }\r\n      return ret\r\n    }\r\n    return []\r\n  };\r\n\r\n}\n\n/*  */\r\n\r\nvar LIFECYCLE_HOOKS$1 = [\r\n    //App\r\n    'onLaunch',\r\n    'onShow',\r\n    'onHide',\r\n    'onUniNViewMessage',\n    'onError',\r\n    //Page\r\n    'onLoad',\r\n    // 'onShow',\r\n    'onReady',\r\n    // 'onHide',\r\n    'onUnload',\r\n    'onPullDownRefresh',\r\n    'onReachBottom',\r\n    'onTabItemTap',\r\n    'onShareAppMessage',\n    'onResize',\r\n    'onPageScroll',\r\n    'onNavigationBarButtonTap',\r\n    'onBackPress',\r\n    'onNavigationBarSearchInputChanged',\r\n    'onNavigationBarSearchInputConfirmed',\r\n    'onNavigationBarSearchInputClicked',\r\n    //Component\r\n    // 'onReady', // 兼容旧版本，应该移除该事件\r\n    'onPageShow',\r\n    'onPageHide',\r\n    'onPageResize'\r\n];\r\nfunction lifecycleMixin$1(Vue) {\r\n\r\n    //fixed vue-class-component\r\n    var oldExtend = Vue.extend;\r\n    Vue.extend = function(extendOptions) {\r\n        extendOptions = extendOptions || {};\r\n\r\n        var methods = extendOptions.methods;\r\n        if (methods) {\r\n            Object.keys(methods).forEach(function (methodName) {\r\n                if (LIFECYCLE_HOOKS$1.indexOf(methodName)!==-1) {\r\n                    extendOptions[methodName] = methods[methodName];\r\n                    delete methods[methodName];\r\n                }\r\n            });\r\n        }\r\n\r\n        return oldExtend.call(this, extendOptions)\r\n    };\r\n\r\n    var strategies = Vue.config.optionMergeStrategies;\r\n    var mergeHook = strategies.created;\r\n    LIFECYCLE_HOOKS$1.forEach(function (hook) {\r\n        strategies[hook] = mergeHook;\r\n    });\r\n\r\n    Vue.prototype.__lifecycle_hooks__ = LIFECYCLE_HOOKS$1;\r\n}\n\n/*  */\r\n\n// install platform patch function\r\nVue.prototype.__patch__ = patch;\r\n\r\n// public mount method\r\nVue.prototype.$mount = function(\r\n    el ,\r\n    hydrating \r\n) {\r\n    return mountComponent$1(this, el, hydrating)\r\n};\r\n\r\nlifecycleMixin$1(Vue);\r\ninternalMixin(Vue);\n\n/*  */\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Vue);\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../../webpack/buildin/global.js */ 2)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///3\n");

/***/ }),

/***/ 30:
/*!*****************************************************!*\
  !*** ./node_modules/regenerator-runtime/runtime.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n!(function(global) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  var inModule = typeof module === \"object\";\n  var runtime = global.regeneratorRuntime;\n  if (runtime) {\n    if (inModule) {\n      // If regeneratorRuntime is defined globally and we're in a module,\n      // make the exports object identical to regeneratorRuntime.\n      module.exports = runtime;\n    }\n    // Don't bother evaluating the rest of this file if the runtime was\n    // already defined globally.\n    return;\n  }\n\n  // Define the runtime globally (as expected by generated code) as either\n  // module.exports (if we're in a module) or a new, empty object.\n  runtime = global.regeneratorRuntime = inModule ? module.exports : {};\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  runtime.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunctionPrototype[toStringTagSymbol] =\n    GeneratorFunction.displayName = \"GeneratorFunction\";\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      prototype[method] = function(arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  runtime.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  runtime.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      if (!(toStringTagSymbol in genFun)) {\n        genFun[toStringTagSymbol] = \"GeneratorFunction\";\n      }\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  runtime.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return Promise.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return Promise.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new Promise(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  runtime.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  runtime.async = function(innerFn, outerFn, self, tryLocsList) {\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList)\n    );\n\n    return runtime.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        if (delegate.iterator.return) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  Gp[toStringTagSymbol] = \"Generator\";\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  runtime.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  runtime.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n})(\n  // In sloppy mode, unbound `this` refers to the global object, fallback to\n  // Function constructor if we're in global strict mode. That is sadly a form\n  // of indirect eval which violates Content Security Policy.\n  (function() {\n    return this || (typeof self === \"object\" && self);\n  })() || Function(\"return this\")()\n);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///30\n");

/***/ }),

/***/ 31:
/*!**********************************************************!*\
  !*** C:/Users/a/Desktop/toCWechat/uniapp/api/request.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(__f__, uni) {Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;var _regenerator = _interopRequireDefault(__webpack_require__(/*! ./node_modules/@babel/runtime/regenerator */ 28));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {try {var info = gen[key](arg);var value = info.value;} catch (error) {reject(error);return;}if (info.done) {resolve(value);} else {Promise.resolve(value).then(_next, _throw);}}function _asyncToGenerator(fn) {return function () {var self = this,args = arguments;return new Promise(function (resolve, reject) {var gen = fn.apply(self, args);function _next(value) {asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);}function _throw(err) {asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);}_next(undefined);});};}\nvar baseURL = 'http://47.103.152.26/api';\n// 参数： url:请求地址  param：请求参数  way：请求方式 res：回调函数\n/**\r\n *  @name 请求\r\n */function\napiPost(_x, _x2) {return _apiPost.apply(this, arguments);}function _apiPost() {_apiPost = _asyncToGenerator( /*#__PURE__*/_regenerator.default.mark(function _callee(url, params) {return _regenerator.default.wrap(function _callee$(_context) {while (1) {switch (_context.prev = _context.next) {case 0:\n            if (!params) console.warn(__f__(\"没有传入参数params\", \" at api\\\\request.js:8\"));_context.next = 3;return (\n              new Promise(function (resolve, reject) {\n                uni.request({\n                  url: baseURL + url,\n                  method: \"POST\",\n                  header: {\n                    // 'Token': token,\n                    'Accept': 'application/json',\n                    \"content-type\": \"application/x-www-form-urlencoded\" },\n\n                  data: params,\n                  success: function success(res) {\n                    resolve(res.data);\n                  },\n                  fail: function fail(err) {\n                    reject(err);\n                  } });\n\n              }));case 3:return _context.abrupt(\"return\", _context.sent);case 4:case \"end\":return _context.stop();}}}, _callee, this);}));return _apiPost.apply(this, arguments);}function\n\n\napiGet(_x3, _x4) {return _apiGet.apply(this, arguments);}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// 登录\nfunction _apiGet() {_apiGet = _asyncToGenerator( /*#__PURE__*/_regenerator.default.mark(function _callee2(url, params) {return _regenerator.default.wrap(function _callee2$(_context2) {while (1) {switch (_context2.prev = _context2.next) {case 0:if (!params) console.warn(__f__(\"没有传入参数params\", \" at api\\\\request.js:30\"));_context2.next = 3;return new Promise(function (resolve, reject) {uni.request({ url: baseURL + url, method: \"GET\", header: { 'Accept': 'application/json', \"content-type\": \"application/x-www-form-urlencoded\" }, timeout: 6000, data: params, success: function success(res) {resolve(res.data);}, fail: function fail(err) {reject(err);} });});case 3:return _context2.abrupt(\"return\", _context2.sent);case 4:case \"end\":return _context2.stop();}}}, _callee2, this);}));return _apiGet.apply(this, arguments);}function login(_x5) {return _login.apply(this, arguments);}function _login() {_login = _asyncToGenerator( /*#__PURE__*/_regenerator.default.mark(function _callee3(params) {return _regenerator.default.wrap(function _callee3$(_context3) {while (1) {switch (_context3.prev = _context3.next) {case 0:_context3.next = 2;return (\n              new Promise(function (resolve, reject) {\n                uni.request({\n                  url: baseURL + '/login',\n                  method: \"GET\",\n                  header: {\n                    // 'Token': token,\n                    'Accept': 'application/json',\n                    \"content-type\": \"application/x-www-form-urlencoded\" },\n\n                  data: params,\n                  success: function success(res) {\n                    resolve(res.data);\n                  },\n                  fail: function fail(err) {\n                    reject(err);\n                  } });\n\n              }));case 2:return _context3.abrupt(\"return\", _context3.sent);case 3:case \"end\":return _context3.stop();}}}, _callee3, this);}));return _login.apply(this, arguments);}var _default =\n\n\n{\n  baseURL: baseURL,\n  apiPost: apiPost,\n  apiGet: apiGet,\n  login: login };exports.default = _default;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js */ 10)[\"default\"], __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vYXBpL3JlcXVlc3QuanMiXSwibmFtZXMiOlsiYmFzZVVSTCIsImFwaVBvc3QiLCJ1cmwiLCJwYXJhbXMiLCJjb25zb2xlIiwid2FybiIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwidW5pIiwicmVxdWVzdCIsIm1ldGhvZCIsImhlYWRlciIsImRhdGEiLCJzdWNjZXNzIiwicmVzIiwiZmFpbCIsImVyciIsImFwaUdldCIsInRpbWVvdXQiLCJsb2dpbiJdLCJtYXBwaW5ncyI6IjtBQUNBLElBQU1BLE9BQU8sR0FBRywwQkFBaEI7QUFDQTtBQUNDOzs7QUFHZUMsTyw2SUFBZixpQkFBdUJDLEdBQXZCLEVBQTJCQyxNQUEzQjtBQUNDLGdCQUFHLENBQUNBLE1BQUosRUFBV0MsT0FBTyxDQUFDQyxJQUFSLE9BQWEsY0FBYiw0QkFEWjtBQUVjLGtCQUFJQyxPQUFKLENBQVksVUFBQ0MsT0FBRCxFQUFTQyxNQUFULEVBQWtCO0FBQzFDQyxtQkFBRyxDQUFDQyxPQUFKLENBQVk7QUFDWFIscUJBQUcsRUFBQ0YsT0FBTyxHQUFDRSxHQUREO0FBRVhTLHdCQUFNLEVBQUUsTUFGRztBQUdYQyx3QkFBTSxFQUFDO0FBQ047QUFDQSw4QkFBVSxrQkFGSjtBQUdOLG9DQUFlLG1DQUhULEVBSEk7O0FBUVhDLHNCQUFJLEVBQUNWLE1BUk07QUFTWFcseUJBVFcsbUJBU0hDLEdBVEcsRUFTRTtBQUNaUiwyQkFBTyxDQUFDUSxHQUFHLENBQUNGLElBQUwsQ0FBUDtBQUNBLG1CQVhVO0FBWVhHLHNCQVpXLGdCQVlOQyxHQVpNLEVBWUQ7QUFDVFQsMEJBQU0sQ0FBQ1MsR0FBRCxDQUFOO0FBQ0EsbUJBZFUsRUFBWjs7QUFnQkEsZUFqQlksQ0FGZCx1SDs7O0FBc0JlQyxNOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUF3QmY7d0ZBeEJBLGtCQUFzQmhCLEdBQXRCLEVBQTBCQyxNQUExQiwrSEFDQyxJQUFHLENBQUNBLE1BQUosRUFBV0MsT0FBTyxDQUFDQyxJQUFSLE9BQWEsY0FBYiw2QkFEWiwwQkFFYyxJQUFJQyxPQUFKLENBQVksVUFBQ0MsT0FBRCxFQUFTQyxNQUFULEVBQWtCLENBQzFDQyxHQUFHLENBQUNDLE9BQUosQ0FBWSxFQUNYUixHQUFHLEVBQUNGLE9BQU8sR0FBQ0UsR0FERCxFQUVYUyxNQUFNLEVBQUUsS0FGRyxFQUdYQyxNQUFNLEVBQUMsRUFDTixVQUFVLGtCQURKLEVBRU4sZ0JBQWUsbUNBRlQsRUFISSxFQU9YTyxPQUFPLEVBQUMsSUFQRyxFQVFYTixJQUFJLEVBQUNWLE1BUk0sRUFTWFcsT0FUVyxtQkFTSEMsR0FURyxFQVNFLENBQ1pSLE9BQU8sQ0FBQ1EsR0FBRyxDQUFDRixJQUFMLENBQVAsQ0FDQSxDQVhVLEVBWVhHLElBWlcsZ0JBWU5DLEdBWk0sRUFZRCxDQUNUVCxNQUFNLENBQUNTLEdBQUQsQ0FBTixDQUNBLENBZFUsRUFBWixFQWdCQSxDQWpCWSxDQUZkLDBILG1EQXlCZUcsSyxtSUFBZixrQkFBcUJqQixNQUFyQjtBQUNjLGtCQUFJRyxPQUFKLENBQVksVUFBQ0MsT0FBRCxFQUFTQyxNQUFULEVBQWtCO0FBQzFDQyxtQkFBRyxDQUFDQyxPQUFKLENBQVk7QUFDWFIscUJBQUcsRUFBQ0YsT0FBTyxHQUFDLFFBREQ7QUFFWFcsd0JBQU0sRUFBRSxLQUZHO0FBR1hDLHdCQUFNLEVBQUM7QUFDTjtBQUNBLDhCQUFVLGtCQUZKO0FBR04sb0NBQWUsbUNBSFQsRUFISTs7QUFRWEMsc0JBQUksRUFBQ1YsTUFSTTtBQVNYVyx5QkFUVyxtQkFTSEMsR0FURyxFQVNFO0FBQ1pSLDJCQUFPLENBQUNRLEdBQUcsQ0FBQ0YsSUFBTCxDQUFQO0FBQ0EsbUJBWFU7QUFZWEcsc0JBWlcsZ0JBWU5DLEdBWk0sRUFZRDtBQUNUVCwwQkFBTSxDQUFDUyxHQUFELENBQU47QUFDQSxtQkFkVSxFQUFaOztBQWdCQSxlQWpCWSxDQURkLDJIOzs7QUFxQmM7QUFDWGpCLFNBQU8sRUFBUEEsT0FEVztBQUVkQyxTQUFPLEVBQVBBLE9BRmM7QUFHZGlCLFFBQU0sRUFBTkEsTUFIYztBQUlkRSxPQUFLLEVBQUxBLEtBSmMsRSIsImZpbGUiOiIzMS5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxyXG5jb25zdCBiYXNlVVJMID0gJ2h0dHA6Ly80Ny4xMDMuMTUyLjI2L2FwaSc7XHJcbi8vIOWPguaVsO+8miB1cmw66K+35rGC5Zyw5Z2AICBwYXJhbe+8muivt+axguWPguaVsCAgd2F577ya6K+35rGC5pa55byPIHJlc++8muWbnuiwg+WHveaVsFxyXG4gLyoqXHJcbiAgKiAgQG5hbWUg6K+35rGCXHJcbiAgKi9cclxuIGFzeW5jIGZ1bmN0aW9uIGFwaVBvc3QodXJsLHBhcmFtcyl7XHJcbiBcdGlmKCFwYXJhbXMpY29uc29sZS53YXJuKFwi5rKh5pyJ5Lyg5YWl5Y+C5pWwcGFyYW1zXCIpO1xyXG4gXHRyZXR1cm4gYXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUscmVqZWN0KT0+e1xyXG4gXHRcdHVuaS5yZXF1ZXN0KHtcclxuIFx0XHRcdHVybDpiYXNlVVJMK3VybCxcclxuIFx0XHRcdG1ldGhvZCA6XCJQT1NUXCIsXHJcbiBcdFx0XHRoZWFkZXI6e1xyXG4gXHRcdFx0XHQvLyAnVG9rZW4nOiB0b2tlbixcclxuIFx0XHRcdFx0J0FjY2VwdCc6ICdhcHBsaWNhdGlvbi9qc29uJyxcclxuIFx0XHRcdFx0XCJjb250ZW50LXR5cGVcIjpcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiXHJcbiBcdFx0XHR9LFxyXG4gXHRcdFx0ZGF0YTpwYXJhbXMsXHJcbiBcdFx0XHRzdWNjZXNzKHJlcykge1xyXG4gXHRcdFx0XHRyZXNvbHZlKHJlcy5kYXRhKVxyXG4gXHRcdFx0fSxcclxuIFx0XHRcdGZhaWwoZXJyKSB7XHJcbiBcdFx0XHRcdHJlamVjdChlcnIpXHJcbiBcdFx0XHR9XHJcbiBcdFx0fSlcclxuIFx0fSlcclxuIH1cclxuIFxyXG4gYXN5bmMgZnVuY3Rpb24gYXBpR2V0KHVybCxwYXJhbXMpe1xyXG4gXHRpZighcGFyYW1zKWNvbnNvbGUud2FybihcIuayoeacieS8oOWFpeWPguaVsHBhcmFtc1wiKTtcclxuIFx0cmV0dXJuIGF3YWl0IG5ldyBQcm9taXNlKChyZXNvbHZlLHJlamVjdCk9PntcclxuIFx0XHR1bmkucmVxdWVzdCh7XHJcbiBcdFx0XHR1cmw6YmFzZVVSTCt1cmwsXHJcbiBcdFx0XHRtZXRob2QgOlwiR0VUXCIsXHJcbiBcdFx0XHRoZWFkZXI6e1xyXG4gXHRcdFx0XHQnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24nLFxyXG4gXHRcdFx0XHRcImNvbnRlbnQtdHlwZVwiOlwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCJcclxuIFx0XHRcdH0sXHJcbiBcdFx0XHR0aW1lb3V0OjYwMDAsXHJcbiBcdFx0XHRkYXRhOnBhcmFtcyxcclxuIFx0XHRcdHN1Y2Nlc3MocmVzKSB7XHJcbiBcdFx0XHRcdHJlc29sdmUocmVzLmRhdGEpXHJcbiBcdFx0XHR9LFxyXG4gXHRcdFx0ZmFpbChlcnIpIHtcclxuIFx0XHRcdFx0cmVqZWN0KGVycilcclxuIFx0XHRcdH1cclxuIFx0XHR9KVxyXG4gXHR9KVxyXG4gfVxyXG4gXHJcbiBcclxuIFxyXG4gLy8g55m75b2VXHJcbiBhc3luYyBmdW5jdGlvbiBsb2dpbihwYXJhbXMpe1xyXG4gXHRyZXR1cm4gYXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUscmVqZWN0KT0+e1xyXG4gXHRcdHVuaS5yZXF1ZXN0KHtcclxuIFx0XHRcdHVybDpiYXNlVVJMKycvbG9naW4nLFxyXG4gXHRcdFx0bWV0aG9kIDpcIkdFVFwiLFxyXG4gXHRcdFx0aGVhZGVyOntcclxuIFx0XHRcdFx0Ly8gJ1Rva2VuJzogdG9rZW4sXHJcbiBcdFx0XHRcdCdBY2NlcHQnOiAnYXBwbGljYXRpb24vanNvbicsXHJcbiBcdFx0XHRcdFwiY29udGVudC10eXBlXCI6XCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIlxyXG4gXHRcdFx0fSxcclxuIFx0XHRcdGRhdGE6cGFyYW1zLFxyXG4gXHRcdFx0c3VjY2VzcyhyZXMpIHtcclxuIFx0XHRcdFx0cmVzb2x2ZShyZXMuZGF0YSlcclxuIFx0XHRcdH0sXHJcbiBcdFx0XHRmYWlsKGVycikge1xyXG4gXHRcdFx0XHRyZWplY3QoZXJyKVxyXG4gXHRcdFx0fVxyXG4gXHRcdH0pXHJcbiBcdH0pXHJcbiB9XHJcblxyXG5leHBvcnQgZGVmYXVsdCB7XHJcbiAgICBiYXNlVVJMLFxyXG5cdGFwaVBvc3QsXHJcblx0YXBpR2V0LFxyXG5cdGxvZ2luXHJcbn0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///31\n");

/***/ }),

/***/ 4:
/*!******************************************************!*\
  !*** C:/Users/a/Desktop/toCWechat/uniapp/pages.json ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiI0LmpzIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///4\n");

/***/ }),

/***/ 5:
/*!*******************************************************!*\
  !*** ./node_modules/@dcloudio/uni-stat/dist/index.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(uni) {var _package = __webpack_require__(/*! ../package.json */ 6);function _possibleConstructorReturn(self, call) {if (call && (typeof call === \"object\" || typeof call === \"function\")) {return call;}return _assertThisInitialized(self);}function _assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");}return self;}function _getPrototypeOf(o) {_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return _getPrototypeOf(o);}function _inherits(subClass, superClass) {if (typeof superClass !== \"function\" && superClass !== null) {throw new TypeError(\"Super expression must either be null or a function\");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });if (superClass) _setPrototypeOf(subClass, superClass);}function _setPrototypeOf(o, p) {_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return _setPrototypeOf(o, p);}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);return Constructor;}\n\nvar STAT_VERSION = _package.version;\nvar STAT_URL = 'https://tongji.dcloud.io/uni/stat';\nvar STAT_H5_URL = 'https://tongji.dcloud.io/uni/stat.gif';\nvar PAGE_PVER_TIME = 1800;\nvar APP_PVER_TIME = 300;\nvar OPERATING_TIME = 10;\n\nvar UUID_KEY = '__DC_STAT_UUID';\nvar UUID_VALUE = '__DC_UUID_VALUE';\n\nfunction getUuid() {\n  var uuid = '';\n  if (getPlatformName() === 'n') {\n    try {\n      uuid = plus.runtime.getDCloudId();\n    } catch (e) {\n      uuid = '';\n    }\n    return uuid;\n  }\n\n  try {\n    uuid = uni.getStorageSync(UUID_KEY);\n  } catch (e) {\n    uuid = UUID_VALUE;\n  }\n\n  if (!uuid) {\n    uuid = Date.now() + '' + Math.floor(Math.random() * 1e7);\n    try {\n      uni.setStorageSync(UUID_KEY, uuid);\n    } catch (e) {\n      uni.setStorageSync(UUID_KEY, UUID_VALUE);\n    }\n  }\n  return uuid;\n}\n\nvar getSgin = function getSgin(statData) {\n  var arr = Object.keys(statData);\n  var sortArr = arr.sort();\n  var sgin = {};\n  var sginStr = '';\n  for (var i in sortArr) {\n    sgin[sortArr[i]] = statData[sortArr[i]];\n    sginStr += sortArr[i] + '=' + statData[sortArr[i]] + '&';\n  }\n  // const options = sginStr.substr(0, sginStr.length - 1)\n  // sginStr = sginStr.substr(0, sginStr.length - 1) + '&key=' + STAT_KEY;\n  // const si = crypto.createHash('md5').update(sginStr).digest('hex');\n  return {\n    sign: '',\n    options: sginStr.substr(0, sginStr.length - 1) };\n\n};\n\nvar getSplicing = function getSplicing(data) {\n  var str = '';\n  for (var i in data) {\n    str += i + '=' + data[i] + '&';\n  }\n  return str.substr(0, str.length - 1);\n};\n\nvar getTime = function getTime() {\n  return parseInt(new Date().getTime() / 1000);\n};\n\nvar getPlatformName = function getPlatformName() {\n  var platformList = {\n    'app-plus': 'n',\n    'h5': 'h5',\n    'mp-weixin': 'wx',\n    'mp-alipay': 'ali',\n    'mp-baidu': 'bd',\n    'mp-toutiao': 'tt',\n    'mp-qq': 'qq' };\n\n  return platformList[\"app-plus\"];\n};\n\nvar getPackName = function getPackName() {\n  var packName = '';\n  if (getPlatformName() === 'wx' || getPlatformName() === 'qq') {\n    // 兼容微信小程序低版本基础库\n    if (uni.canIUse('getAccountInfoSync')) {\n      packName = uni.getAccountInfoSync().miniProgram.appId || '';\n    }\n  }\n  return packName;\n};\n\nvar getVersion = function getVersion() {\n  return getPlatformName() === 'n' ? plus.runtime.version : '';\n};\n\nvar getChannel = function getChannel() {\n  var platformName = getPlatformName();\n  var channel = '';\n  if (platformName === 'n') {\n    channel = plus.runtime.channel;\n  }\n  return channel;\n};\n\nvar getScene = function getScene(options) {\n  var platformName = getPlatformName();\n  var scene = '';\n  if (options) {\n    return options;\n  }\n  if (platformName === 'wx') {\n    scene = uni.getLaunchOptionsSync().scene;\n  }\n  return scene;\n};\nvar First__Visit__Time__KEY = 'First__Visit__Time';\nvar Last__Visit__Time__KEY = 'Last__Visit__Time';\n\nvar getFirstVisitTime = function getFirstVisitTime() {\n  var timeStorge = uni.getStorageSync(First__Visit__Time__KEY);\n  var time = 0;\n  if (timeStorge) {\n    time = timeStorge;\n  } else {\n    time = getTime();\n    uni.setStorageSync(First__Visit__Time__KEY, time);\n    uni.removeStorageSync(Last__Visit__Time__KEY);\n  }\n  return time;\n};\n\nvar getLastVisitTime = function getLastVisitTime() {\n  var timeStorge = uni.getStorageSync(Last__Visit__Time__KEY);\n  var time = 0;\n  if (timeStorge) {\n    time = timeStorge;\n  } else {\n    time = '';\n  }\n  uni.setStorageSync(Last__Visit__Time__KEY, getTime());\n  return time;\n};\n\n\nvar PAGE_RESIDENCE_TIME = '__page__residence__time';\nvar First_Page_residence_time = 0;\nvar Last_Page_residence_time = 0;\n\n\nvar setPageResidenceTime = function setPageResidenceTime() {\n  First_Page_residence_time = getTime();\n  if (getPlatformName() === 'n') {\n    uni.setStorageSync(PAGE_RESIDENCE_TIME, getTime());\n  }\n  return First_Page_residence_time;\n};\n\nvar getPageResidenceTime = function getPageResidenceTime() {\n  Last_Page_residence_time = getTime();\n  if (getPlatformName() === 'n') {\n    First_Page_residence_time = uni.getStorageSync(PAGE_RESIDENCE_TIME);\n  }\n  return Last_Page_residence_time - First_Page_residence_time;\n};\nvar TOTAL__VISIT__COUNT = 'Total__Visit__Count';\nvar getTotalVisitCount = function getTotalVisitCount() {\n  var timeStorge = uni.getStorageSync(TOTAL__VISIT__COUNT);\n  var count = 1;\n  if (timeStorge) {\n    count = timeStorge;\n    count++;\n  }\n  uni.setStorageSync(TOTAL__VISIT__COUNT, count);\n  return count;\n};\n\nvar GetEncodeURIComponentOptions = function GetEncodeURIComponentOptions(statData) {\n  var data = {};\n  for (var prop in statData) {\n    data[prop] = encodeURIComponent(statData[prop]);\n  }\n  return data;\n};\n\nvar Set__First__Time = 0;\nvar Set__Last__Time = 0;\n\nvar getFirstTime = function getFirstTime() {\n  var time = new Date().getTime();\n  Set__First__Time = time;\n  Set__Last__Time = 0;\n  return time;\n};\n\n\nvar getLastTime = function getLastTime() {\n  var time = new Date().getTime();\n  Set__Last__Time = time;\n  return time;\n};\n\n\nvar getResidenceTime = function getResidenceTime(type) {\n  var residenceTime = 0;\n  if (Set__First__Time !== 0) {\n    residenceTime = Set__Last__Time - Set__First__Time;\n  }\n\n  residenceTime = parseInt(residenceTime / 1000);\n  residenceTime = residenceTime < 1 ? 1 : residenceTime;\n  if (type === 'app') {\n    var overtime = residenceTime > APP_PVER_TIME ? true : false;\n    return {\n      residenceTime: residenceTime,\n      overtime: overtime };\n\n  }\n  if (type === 'page') {\n    var _overtime = residenceTime > PAGE_PVER_TIME ? true : false;\n    return {\n      residenceTime: residenceTime,\n      overtime: _overtime };\n\n  }\n\n  return {\n    residenceTime: residenceTime };\n\n\n};\n\nvar getRoute = function getRoute() {\n  var pages = getCurrentPages();\n  var page = pages[pages.length - 1];\n  var _self = page.$vm;\n\n  if (getPlatformName() === 'bd') {\n    return _self.$mp && _self.$mp.page.is;\n  } else {\n    return _self.$scope && _self.$scope.route || _self.$mp && _self.$mp.page.route;\n  }\n};\n\nvar getPageRoute = function getPageRoute(self) {\n  var pages = getCurrentPages();\n  var page = pages[pages.length - 1];\n  var _self = page.$vm;\n  var query = self._query;\n  var str = query && JSON.stringify(query) !== '{}' ? '?' + JSON.stringify(query) : '';\n  // clear\n  self._query = '';\n  if (getPlatformName() === 'bd') {\n    return _self.$mp && _self.$mp.page.is + str;\n  } else {\n    return _self.$scope && _self.$scope.route + str || _self.$mp && _self.$mp.page.route + str;\n  }\n};\n\nvar getPageTypes = function getPageTypes(self) {\n  if (self.mpType === 'page' || self.$mp && self.$mp.mpType === 'page' || self.$options.mpType === 'page') {\n    return true;\n  }\n  return false;\n};\n\nvar calibration = function calibration(eventName, options) {\n  //  login 、 share 、pay_success 、pay_fail 、register 、title\n  if (!eventName) {\n    console.error(\"uni.report \\u7F3A\\u5C11 [eventName] \\u53C2\\u6570\");\n    return true;\n  }\n  if (typeof eventName !== 'string') {\n    console.error(\"uni.report [eventName] \\u53C2\\u6570\\u7C7B\\u578B\\u9519\\u8BEF,\\u53EA\\u80FD\\u4E3A String \\u7C7B\\u578B\");\n    return true;\n  }\n  if (eventName.length > 255) {\n    console.error(\"uni.report [eventName] \\u53C2\\u6570\\u957F\\u5EA6\\u4E0D\\u80FD\\u5927\\u4E8E 255\");\n    return true;\n  }\n\n  if (typeof options !== 'string' && typeof options !== 'object') {\n    console.error(\"uni.report [options] \\u53C2\\u6570\\u7C7B\\u578B\\u9519\\u8BEF,\\u53EA\\u80FD\\u4E3A String \\u6216 Object \\u7C7B\\u578B\");\n    return true;\n  }\n\n  if (typeof options === 'string' && options.length > 255) {\n    console.error(\"uni.report [options] \\u53C2\\u6570\\u957F\\u5EA6\\u4E0D\\u80FD\\u5927\\u4E8E 255\");\n    return true;\n  }\n\n  if (eventName === 'title' && typeof options !== 'string') {\n    console.error('uni.report [eventName] 参数为 title 时，[options] 参数只能为 String 类型');\n    return true;\n  }\n};\n\nvar PagesJson = __webpack_require__(/*! uni-pages?{\"type\":\"style\"} */ 7).default;\nvar statConfig = __webpack_require__(/*! uni-stat-config */ 8).default || __webpack_require__(/*! uni-stat-config */ 8);\n\nvar resultOptions = uni.getSystemInfoSync();var\n\nUtil = /*#__PURE__*/function () {\n  function Util() {_classCallCheck(this, Util);\n    this.self = '';\n    this._retry = 0;\n    this._platform = '';\n    this._query = {};\n    this._navigationBarTitle = {\n      config: '',\n      page: '',\n      report: '',\n      lt: '' };\n\n    this._operatingTime = 0;\n    this._reportingRequestData = {\n      '1': [],\n      '11': [] };\n\n    this.__prevent_triggering = false;\n\n    this.__licationHide = false;\n    this.__licationShow = false;\n    this._lastPageRoute = '';\n    this.statData = {\n      uuid: getUuid(),\n      ut: getPlatformName(),\n      mpn: getPackName(),\n      ak: statConfig.appid,\n      usv: STAT_VERSION,\n      v: getVersion(),\n      ch: getChannel(),\n      cn: '',\n      pn: '',\n      ct: '',\n      t: getTime(),\n      tt: '',\n      p: resultOptions.platform === 'android' ? 'a' : 'i',\n      brand: resultOptions.brand || '',\n      md: resultOptions.model,\n      sv: resultOptions.system.replace(/(Android|iOS)\\s/, ''),\n      mpsdk: resultOptions.SDKVersion || '',\n      mpv: resultOptions.version || '',\n      lang: resultOptions.language,\n      pr: resultOptions.pixelRatio,\n      ww: resultOptions.windowWidth,\n      wh: resultOptions.windowHeight,\n      sw: resultOptions.screenWidth,\n      sh: resultOptions.screenHeight };\n\n\n  }_createClass(Util, [{ key: \"_applicationShow\", value: function _applicationShow()\n\n    {\n      if (this.__licationHide) {\n        getLastTime();\n        var time = getResidenceTime('app');\n        if (time.overtime) {\n          var options = {\n            path: this._lastPageRoute,\n            scene: this.statData.sc };\n\n          this._sendReportRequest(options);\n        }\n        this.__licationHide = false;\n      }\n    } }, { key: \"_applicationHide\", value: function _applicationHide(\n\n    self, type) {\n\n      this.__licationHide = true;\n      getLastTime();\n      var time = getResidenceTime();\n      getFirstTime();\n      var route = getPageRoute(this);\n      this._sendHideRequest({\n        urlref: route,\n        urlref_ts: time.residenceTime },\n      type);\n    } }, { key: \"_pageShow\", value: function _pageShow()\n\n    {\n      var route = getPageRoute(this);\n      var routepath = getRoute();\n      this._navigationBarTitle.config = PagesJson &&\n      PagesJson.pages[routepath] &&\n      PagesJson.pages[routepath].titleNView &&\n      PagesJson.pages[routepath].titleNView.titleText ||\n      PagesJson &&\n      PagesJson.pages[routepath] &&\n      PagesJson.pages[routepath].navigationBarTitleText || '';\n\n      if (this.__licationShow) {\n        getFirstTime();\n        this.__licationShow = false;\n        // console.log('这是 onLauch 之后执行的第一次 pageShow ，为下次记录时间做准备');\n        this._lastPageRoute = route;\n        return;\n      }\n\n      getLastTime();\n      this._lastPageRoute = route;\n      var time = getResidenceTime('page');\n      if (time.overtime) {\n        var options = {\n          path: this._lastPageRoute,\n          scene: this.statData.sc };\n\n        this._sendReportRequest(options);\n      }\n      getFirstTime();\n    } }, { key: \"_pageHide\", value: function _pageHide()\n\n    {\n      if (!this.__licationHide) {\n        getLastTime();\n        var time = getResidenceTime('page');\n        this._sendPageRequest({\n          url: this._lastPageRoute,\n          urlref: this._lastPageRoute,\n          urlref_ts: time.residenceTime });\n\n        this._navigationBarTitle = {\n          config: '',\n          page: '',\n          report: '',\n          lt: '' };\n\n        return;\n      }\n    } }, { key: \"_login\", value: function _login()\n\n    {\n      this._sendEventRequest({\n        key: 'login' },\n      0);\n    } }, { key: \"_share\", value: function _share()\n\n    {\n      this._sendEventRequest({\n        key: 'share' },\n      0);\n    } }, { key: \"_payment\", value: function _payment(\n    key) {\n      this._sendEventRequest({\n        key: key },\n      0);\n    } }, { key: \"_sendReportRequest\", value: function _sendReportRequest(\n    options) {\n\n      this._navigationBarTitle.lt = '1';\n      var query = options.query && JSON.stringify(options.query) !== '{}' ? '?' + JSON.stringify(options.query) : '';\n      this.statData.lt = '1';\n      this.statData.url = options.path + query || '';\n      this.statData.t = getTime();\n      this.statData.sc = getScene(options.scene);\n      this.statData.fvts = getFirstVisitTime();\n      this.statData.lvts = getLastVisitTime();\n      this.statData.tvc = getTotalVisitCount();\n      if (getPlatformName() === 'n') {\n        this.getProperty();\n      } else {\n        this.getNetworkInfo();\n      }\n    } }, { key: \"_sendPageRequest\", value: function _sendPageRequest(\n\n    opt) {var\n\n      url =\n\n\n      opt.url,urlref = opt.urlref,urlref_ts = opt.urlref_ts;\n      this._navigationBarTitle.lt = '11';\n      var options = {\n        ak: this.statData.ak,\n        uuid: this.statData.uuid,\n        lt: '11',\n        ut: this.statData.ut,\n        url: url,\n        tt: this.statData.tt,\n        urlref: urlref,\n        urlref_ts: urlref_ts,\n        ch: this.statData.ch,\n        usv: this.statData.usv,\n        t: getTime(),\n        p: this.statData.p };\n\n      this.request(options);\n    } }, { key: \"_sendHideRequest\", value: function _sendHideRequest(\n\n    opt, type) {var\n\n      urlref =\n\n      opt.urlref,urlref_ts = opt.urlref_ts;\n      var options = {\n        ak: this.statData.ak,\n        uuid: this.statData.uuid,\n        lt: '3',\n        ut: this.statData.ut,\n        urlref: urlref,\n        urlref_ts: urlref_ts,\n        ch: this.statData.ch,\n        usv: this.statData.usv,\n        t: getTime(),\n        p: this.statData.p };\n\n      this.request(options, type);\n    } }, { key: \"_sendEventRequest\", value: function _sendEventRequest()\n\n\n\n    {var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},_ref$key = _ref.key,key = _ref$key === void 0 ? '' : _ref$key,_ref$value = _ref.value,value = _ref$value === void 0 ? \"\" : _ref$value;\n      var route = this._lastPageRoute;\n      var options = {\n        ak: this.statData.ak,\n        uuid: this.statData.uuid,\n        lt: '21',\n        ut: this.statData.ut,\n        url: route,\n        ch: this.statData.ch,\n        e_n: key,\n        e_v: typeof value === 'object' ? JSON.stringify(value) : value.toString(),\n        usv: this.statData.usv,\n        t: getTime(),\n        p: this.statData.p };\n\n      this.request(options);\n    } }, { key: \"getNetworkInfo\", value: function getNetworkInfo()\n\n    {var _this = this;\n      uni.getNetworkType({\n        success: function success(result) {\n          _this.statData.net = result.networkType;\n          _this.getLocation();\n        } });\n\n    } }, { key: \"getProperty\", value: function getProperty()\n\n    {var _this2 = this;\n      plus.runtime.getProperty(plus.runtime.appid, function (wgtinfo) {\n        _this2.statData.v = wgtinfo.version || '';\n        _this2.getNetworkInfo();\n      });\n    } }, { key: \"getLocation\", value: function getLocation()\n\n    {var _this3 = this;\n      if (statConfig.getLocation) {\n        uni.getLocation({\n          type: 'wgs84',\n          geocode: true,\n          success: function success(result) {\n            if (result.address) {\n              _this3.statData.cn = result.address.country;\n              _this3.statData.pn = result.address.province;\n              _this3.statData.ct = result.address.city;\n            }\n\n            _this3.statData.lat = result.latitude;\n            _this3.statData.lng = result.longitude;\n            _this3.request(_this3.statData);\n          } });\n\n      } else {\n        this.statData.lat = 0;\n        this.statData.lng = 0;\n        this.request(this.statData);\n      }\n    } }, { key: \"request\", value: function request(\n\n    data, type) {var _this4 = this;\n      var time = getTime();\n      var title = this._navigationBarTitle;\n      data.ttn = title.page;\n      data.ttpj = title.config;\n      data.ttc = title.report;\n\n      var requestData = this._reportingRequestData;\n      if (getPlatformName() === 'n') {\n        requestData = uni.getStorageSync('__UNI__STAT__DATA') || {};\n      }\n      if (!requestData[data.lt]) {\n        requestData[data.lt] = [];\n      }\n      requestData[data.lt].push(data);\n\n      if (getPlatformName() === 'n') {\n        uni.setStorageSync('__UNI__STAT__DATA', requestData);\n      }\n      if (getPageResidenceTime() < OPERATING_TIME && !type) {\n        return;\n      }\n      var uniStatData = this._reportingRequestData;\n      if (getPlatformName() === 'n') {\n        uniStatData = uni.getStorageSync('__UNI__STAT__DATA');\n      }\n      // 时间超过，重新获取时间戳\n      setPageResidenceTime();\n      var firstArr = [];\n      var contentArr = [];\n      var lastArr = [];var _loop = function _loop(\n\n      i) {\n        var rd = uniStatData[i];\n        rd.forEach(function (elm) {\n          var newData = getSplicing(elm);\n          if (i === 0) {\n            firstArr.push(newData);\n          } else if (i === 3) {\n            lastArr.push(newData);\n          } else {\n            contentArr.push(newData);\n          }\n        });};for (var i in uniStatData) {_loop(i);\n      }\n\n      firstArr.push.apply(firstArr, contentArr.concat(lastArr));\n      var optionsData = {\n        usv: STAT_VERSION, //统计 SDK 版本号\n        t: time, //发送请求时的时间戮\n        requests: JSON.stringify(firstArr) };\n\n\n      this._reportingRequestData = {};\n      if (getPlatformName() === 'n') {\n        uni.removeStorageSync('__UNI__STAT__DATA');\n      }\n\n      if (data.ut === 'h5') {\n        this.imageRequest(optionsData);\n        return;\n      }\n\n      if (getPlatformName() === 'n' && this.statData.p === 'a') {\n        setTimeout(function () {\n          _this4._sendRequest(optionsData);\n        }, 200);\n        return;\n      }\n      this._sendRequest(optionsData);\n    } }, { key: \"_sendRequest\", value: function _sendRequest(\n    optionsData) {var _this5 = this;\n      uni.request({\n        url: STAT_URL,\n        method: 'POST',\n        // header: {\n        //   'content-type': 'application/json' // 默认值\n        // },\n        data: optionsData,\n        success: function success() {\n          // if (process.env.NODE_ENV === 'development') {\n          //   console.log('stat request success');\n          // }\n        },\n        fail: function fail(e) {\n          if (++_this5._retry < 3) {\n            setTimeout(function () {\n              _this5._sendRequest(optionsData);\n            }, 1000);\n          }\n        } });\n\n    }\n    /**\r\n       * h5 请求\r\n       */ }, { key: \"imageRequest\", value: function imageRequest(\n    data) {\n      var image = new Image();\n      var options = getSgin(GetEncodeURIComponentOptions(data)).options;\n      image.src = STAT_H5_URL + '?' + options;\n    } }, { key: \"sendEvent\", value: function sendEvent(\n\n    key, value) {\n      // 校验 type 参数\n      if (calibration(key, value)) return;\n\n      if (key === 'title') {\n        this._navigationBarTitle.report = value;\n        return;\n      }\n      this._sendEventRequest({\n        key: key,\n        value: typeof value === 'object' ? JSON.stringify(value) : value },\n      1);\n    } }]);return Util;}();var\n\n\n\nStat = /*#__PURE__*/function (_Util) {_inherits(Stat, _Util);_createClass(Stat, null, [{ key: \"getInstance\", value: function getInstance()\n    {\n      if (!this.instance) {\n        this.instance = new Stat();\n      }\n      return this.instance;\n    } }]);\n  function Stat() {var _this6;_classCallCheck(this, Stat);\n    _this6 = _possibleConstructorReturn(this, _getPrototypeOf(Stat).call(this));\n    _this6.instance = null;\n    // 注册拦截器\n    if (typeof uni.addInterceptor === 'function' && \"development\" !== 'development') {\n      _this6.addInterceptorInit();\n      _this6.interceptLogin();\n      _this6.interceptShare(true);\n      _this6.interceptRequestPayment();\n    }return _this6;\n  }_createClass(Stat, [{ key: \"addInterceptorInit\", value: function addInterceptorInit()\n\n    {\n      var self = this;\n      uni.addInterceptor('setNavigationBarTitle', {\n        invoke: function invoke(args) {\n          self._navigationBarTitle.page = args.title;\n        } });\n\n    } }, { key: \"interceptLogin\", value: function interceptLogin()\n\n    {\n      var self = this;\n      uni.addInterceptor('login', {\n        complete: function complete() {\n          self._login();\n        } });\n\n    } }, { key: \"interceptShare\", value: function interceptShare(\n\n    type) {\n      var self = this;\n      if (!type) {\n        self._share();\n        return;\n      }\n      uni.addInterceptor('share', {\n        success: function success() {\n          self._share();\n        },\n        fail: function fail() {\n          self._share();\n        } });\n\n    } }, { key: \"interceptRequestPayment\", value: function interceptRequestPayment()\n\n    {\n      var self = this;\n      uni.addInterceptor('requestPayment', {\n        success: function success() {\n          self._payment('pay_success');\n        },\n        fail: function fail() {\n          self._payment('pay_fail');\n        } });\n\n    } }, { key: \"report\", value: function report(\n\n    options, self) {\n      this.self = self;\n      // if (process.env.NODE_ENV === 'development') {\n      //   console.log('report init');\n      // }\n      setPageResidenceTime();\n      this.__licationShow = true;\n      this._sendReportRequest(options, true);\n    } }, { key: \"load\", value: function load(\n\n    options, self) {\n      if (!self.$scope && !self.$mp) {\n        var page = getCurrentPages();\n        self.$scope = page[page.length - 1];\n      }\n      this.self = self;\n      this._query = options;\n    } }, { key: \"show\", value: function show(\n\n    self) {\n      this.self = self;\n      if (getPageTypes(self)) {\n        this._pageShow(self);\n      } else {\n        this._applicationShow(self);\n      }\n    } }, { key: \"ready\", value: function ready(\n\n    self) {\n      // this.self = self;\n      // if (getPageTypes(self)) {\n      //   this._pageShow(self);\n      // }\n    } }, { key: \"hide\", value: function hide(\n    self) {\n      this.self = self;\n      if (getPageTypes(self)) {\n        this._pageHide(self);\n      } else {\n        this._applicationHide(self, true);\n      }\n    } }, { key: \"error\", value: function error(\n    em) {\n      if (this._platform === 'devtools') {\n        if (true) {\n          console.info('当前运行环境为开发者工具，不上报数据。');\n        }\n        // return;\n      }\n      var emVal = '';\n      if (!em.message) {\n        emVal = JSON.stringify(em);\n      } else {\n        emVal = em.stack;\n      }\n      var options = {\n        ak: this.statData.ak,\n        uuid: this.statData.uuid,\n        lt: '31',\n        ut: this.statData.ut,\n        ch: this.statData.ch,\n        mpsdk: this.statData.mpsdk,\n        mpv: this.statData.mpv,\n        v: this.statData.v,\n        em: emVal,\n        usv: this.statData.usv,\n        t: getTime(),\n        p: this.statData.p };\n\n      this.request(options);\n    } }]);return Stat;}(Util);\n\n\nvar stat = Stat.getInstance();\nvar isHide = false;\nvar lifecycle = {\n  onLaunch: function onLaunch(options) {\n    stat.report(options, this);\n  },\n  onReady: function onReady() {\n    stat.ready(this);\n  },\n  onLoad: function onLoad(options) {\n    stat.load(options, this);\n    // 重写分享，获取分享上报事件\n    if (this.$scope && this.$scope.onShareAppMessage) {\n      var oldShareAppMessage = this.$scope.onShareAppMessage;\n      this.$scope.onShareAppMessage = function (options) {\n        stat.interceptShare(false);\n        return oldShareAppMessage.call(this, options);\n      };\n    }\n  },\n  onShow: function onShow() {\n    isHide = false;\n    stat.show(this);\n  },\n  onHide: function onHide() {\n    isHide = true;\n    stat.hide(this);\n  },\n  onUnload: function onUnload() {\n    if (isHide) {\n      isHide = false;\n      return;\n    }\n    stat.hide(this);\n  },\n  onError: function onError(e) {\n    stat.error(e);\n  } };\n\n\nfunction main() {\n  if (true) {\n    uni.report = function (type, options) {};\n  } else { var Vue; }\n}\n\nmain();\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///5\n");

/***/ }),

/***/ 6:
/*!******************************************************!*\
  !*** ./node_modules/@dcloudio/uni-stat/package.json ***!
  \******************************************************/
/*! exports provided: _from, _id, _inBundle, _integrity, _location, _phantomChildren, _requested, _requiredBy, _resolved, _shasum, _spec, _where, author, bugs, bundleDependencies, deprecated, description, devDependencies, files, gitHead, homepage, license, main, name, repository, scripts, version, default */
/***/ (function(module) {

eval("module.exports = {\"_from\":\"@dcloudio/uni-stat@next\",\"_id\":\"@dcloudio/uni-stat@2.0.0-24220191115004\",\"_inBundle\":false,\"_integrity\":\"sha512-UKnpiHSP7h9c5IFpJFkWkpm1KyWz9iHj1hchrQSUxPhChx+KPOmunnQcKGiQvvBz9CeSi7Se/eauJYha5ch0kw==\",\"_location\":\"/@dcloudio/uni-stat\",\"_phantomChildren\":{},\"_requested\":{\"type\":\"tag\",\"registry\":true,\"raw\":\"@dcloudio/uni-stat@next\",\"name\":\"@dcloudio/uni-stat\",\"escapedName\":\"@dcloudio%2funi-stat\",\"scope\":\"@dcloudio\",\"rawSpec\":\"next\",\"saveSpec\":null,\"fetchSpec\":\"next\"},\"_requiredBy\":[\"#USER\",\"/\",\"/@dcloudio/vue-cli-plugin-uni\"],\"_resolved\":\"https://registry.npmjs.org/@dcloudio/uni-stat/-/uni-stat-2.0.0-24220191115004.tgz\",\"_shasum\":\"5848f2204f37daaf8c340fb27d9f76b16fcbfdeb\",\"_spec\":\"@dcloudio/uni-stat@next\",\"_where\":\"/Users/guoshengqiang/Documents/dcloud-plugins/release/uniapp-cli\",\"author\":\"\",\"bugs\":{\"url\":\"https://github.com/dcloudio/uni-app/issues\"},\"bundleDependencies\":false,\"deprecated\":false,\"description\":\"\",\"devDependencies\":{\"@babel/core\":\"^7.5.5\",\"@babel/preset-env\":\"^7.5.5\",\"eslint\":\"^6.1.0\",\"rollup\":\"^1.19.3\",\"rollup-plugin-babel\":\"^4.3.3\",\"rollup-plugin-clear\":\"^2.0.7\",\"rollup-plugin-commonjs\":\"^10.0.2\",\"rollup-plugin-copy\":\"^3.1.0\",\"rollup-plugin-eslint\":\"^7.0.0\",\"rollup-plugin-json\":\"^4.0.0\",\"rollup-plugin-node-resolve\":\"^5.2.0\",\"rollup-plugin-replace\":\"^2.2.0\",\"rollup-plugin-uglify\":\"^6.0.2\"},\"files\":[\"dist\",\"package.json\",\"LICENSE\"],\"gitHead\":\"bcf65737c5111d47398695d3db8ed87305df346e\",\"homepage\":\"https://github.com/dcloudio/uni-app#readme\",\"license\":\"Apache-2.0\",\"main\":\"dist/index.js\",\"name\":\"@dcloudio/uni-stat\",\"repository\":{\"type\":\"git\",\"url\":\"git+https://github.com/dcloudio/uni-app.git\",\"directory\":\"packages/uni-stat\"},\"scripts\":{\"build\":\"NODE_ENV=production rollup -c rollup.config.js\",\"dev\":\"NODE_ENV=development rollup -w -c rollup.config.js\"},\"version\":\"2.0.0-24220191115004\"};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiI2LmpzIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///6\n");

/***/ }),

/***/ 64:
/*!*****************************************************************!*\
  !*** C:/Users/a/Desktop/toCWechat/uniapp/pages/repair/index.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(__f__, uni) {Object.defineProperty(exports, \"__esModule\", { value: true });exports.handleSignClick = handleSignClick;exports.setSignInfo = setSignInfo;exports.addSignInfo = addSignInfo;exports.getSignInfo = getSignInfo;exports.delSignInfo = delSignInfo;exports.getInfo = getInfo;exports.key = void 0;function handleSignClick() {\n  console.log(__f__(1, \" at pages\\\\repair\\\\index.js:2\"));\n}\n// 本地存储打卡信息\nfunction setSignInfo(info) {\n  var signInfo = { main: [info] };\n  uni.setStorageSync(\"signInfo\", JSON.stringify(signInfo));\n}\n// 本地添加打卡信息\nfunction addSignInfo(info, sign) {\n  sign.main.push(info);\n  uni.setStorageSync(\"signInfo\", JSON.stringify(sign));\n}\n// 本地获取打卡信息\nfunction getSignInfo() {\n  var sign = uni.getStorageSync(\"signInfo\");\n  if (!sign) {\n    return;\n  }\n  return JSON.parse(sign);\n}\n// 本地打卡信息清理\nfunction delSignInfo() {\n  uni.removeStorage({\n    key: 'signInfo',\n    success: function success() {\n      uni.showToast({ title: \"重置成功\" });\n    } });\n\n}\n// 打卡信息\nfunction getInfo(signInfo) {\n  var nowT = new Date();\n  var info = { mode: signInfo.mode, nowT: nowT, address: signInfo.address, time: signInfo.time, latitude: signInfo.latitude, longitude: signInfo.longitude, remarks: signInfo.remarks };\n  return info;\n}\n\n// 腾讯位置服务key 值\nvar key = \"VEEBZ-HJL34-U3LUY-XUBOX-NSUF7-E4BRF\";exports.key = key;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js */ 10)[\"default\"], __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vcGFnZXMvcmVwYWlyL2luZGV4LmpzIl0sIm5hbWVzIjpbImhhbmRsZVNpZ25DbGljayIsImNvbnNvbGUiLCJsb2ciLCJzZXRTaWduSW5mbyIsImluZm8iLCJzaWduSW5mbyIsIm1haW4iLCJ1bmkiLCJzZXRTdG9yYWdlU3luYyIsIkpTT04iLCJzdHJpbmdpZnkiLCJhZGRTaWduSW5mbyIsInNpZ24iLCJwdXNoIiwiZ2V0U2lnbkluZm8iLCJnZXRTdG9yYWdlU3luYyIsInBhcnNlIiwiZGVsU2lnbkluZm8iLCJyZW1vdmVTdG9yYWdlIiwia2V5Iiwic3VjY2VzcyIsInNob3dUb2FzdCIsInRpdGxlIiwiZ2V0SW5mbyIsIm5vd1QiLCJEYXRlIiwibW9kZSIsImFkZHJlc3MiLCJ0aW1lIiwibGF0aXR1ZGUiLCJsb25naXR1ZGUiLCJyZW1hcmtzIl0sIm1hcHBpbmdzIjoiaVZBQU8sU0FBU0EsZUFBVCxHQUEwQjtBQUNoQ0MsU0FBTyxDQUFDQyxHQUFSLE9BQVksQ0FBWjtBQUNBO0FBQ0Q7QUFDTyxTQUFTQyxXQUFULENBQXFCQyxJQUFyQixFQUEwQjtBQUNoQyxNQUFJQyxRQUFRLEdBQUcsRUFBQ0MsSUFBSSxFQUFDLENBQUNGLElBQUQsQ0FBTixFQUFmO0FBQ0FHLEtBQUcsQ0FBQ0MsY0FBSixDQUFtQixVQUFuQixFQUE4QkMsSUFBSSxDQUFDQyxTQUFMLENBQWVMLFFBQWYsQ0FBOUI7QUFDQTtBQUNEO0FBQ08sU0FBU00sV0FBVCxDQUFxQlAsSUFBckIsRUFBMEJRLElBQTFCLEVBQStCO0FBQ3JDQSxNQUFJLENBQUNOLElBQUwsQ0FBVU8sSUFBVixDQUFlVCxJQUFmO0FBQ0FHLEtBQUcsQ0FBQ0MsY0FBSixDQUFtQixVQUFuQixFQUE4QkMsSUFBSSxDQUFDQyxTQUFMLENBQWVFLElBQWYsQ0FBOUI7QUFDQTtBQUNEO0FBQ08sU0FBU0UsV0FBVCxHQUFzQjtBQUM1QixNQUFJRixJQUFJLEdBQUdMLEdBQUcsQ0FBQ1EsY0FBSixDQUFtQixVQUFuQixDQUFYO0FBQ0EsTUFBRyxDQUFDSCxJQUFKLEVBQVM7QUFDUjtBQUNBO0FBQ0QsU0FBT0gsSUFBSSxDQUFDTyxLQUFMLENBQVdKLElBQVgsQ0FBUDtBQUNBO0FBQ0Q7QUFDTyxTQUFTSyxXQUFULEdBQXNCO0FBQzVCVixLQUFHLENBQUNXLGFBQUosQ0FBa0I7QUFDakJDLE9BQUcsRUFBRSxVQURZO0FBRWpCQyxXQUZpQixxQkFFUjtBQUNSYixTQUFHLENBQUNjLFNBQUosQ0FBYyxFQUFDQyxLQUFLLEVBQUMsTUFBUCxFQUFkO0FBQ0EsS0FKZ0IsRUFBbEI7O0FBTUE7QUFDRDtBQUNPLFNBQVNDLE9BQVQsQ0FBaUJsQixRQUFqQixFQUEwQjtBQUNoQyxNQUFJbUIsSUFBSSxHQUFHLElBQUlDLElBQUosRUFBWDtBQUNBLE1BQUlyQixJQUFJLEdBQUcsRUFBQ3NCLElBQUksRUFBQ3JCLFFBQVEsQ0FBQ3FCLElBQWYsRUFBcUJGLElBQUksRUFBQ0EsSUFBMUIsRUFBK0JHLE9BQU8sRUFBQ3RCLFFBQVEsQ0FBQ3NCLE9BQWhELEVBQXdEQyxJQUFJLEVBQUN2QixRQUFRLENBQUN1QixJQUF0RSxFQUEyRUMsUUFBUSxFQUFDeEIsUUFBUSxDQUFDd0IsUUFBN0YsRUFBc0dDLFNBQVMsRUFBQ3pCLFFBQVEsQ0FBQ3lCLFNBQXpILEVBQW1JQyxPQUFPLEVBQUMxQixRQUFRLENBQUMwQixPQUFwSixFQUFYO0FBQ0EsU0FBTzNCLElBQVA7QUFDQTs7QUFFRDtBQUNPLElBQU1lLEdBQUcsR0FBRyxxQ0FBWixDIiwiZmlsZSI6IjY0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIGhhbmRsZVNpZ25DbGljaygpe1xuXHRjb25zb2xlLmxvZygxKVxufVxuLy8g5pys5Zyw5a2Y5YKo5omT5Y2h5L+h5oGvXG5leHBvcnQgZnVuY3Rpb24gc2V0U2lnbkluZm8oaW5mbyl7XG5cdHZhciBzaWduSW5mbyA9IHttYWluOltpbmZvXX1cblx0dW5pLnNldFN0b3JhZ2VTeW5jKFwic2lnbkluZm9cIixKU09OLnN0cmluZ2lmeShzaWduSW5mbykpO1xufVxuLy8g5pys5Zyw5re75Yqg5omT5Y2h5L+h5oGvXG5leHBvcnQgZnVuY3Rpb24gYWRkU2lnbkluZm8oaW5mbyxzaWduKXtcblx0c2lnbi5tYWluLnB1c2goaW5mbyk7XG5cdHVuaS5zZXRTdG9yYWdlU3luYyhcInNpZ25JbmZvXCIsSlNPTi5zdHJpbmdpZnkoc2lnbikpO1xufVxuLy8g5pys5Zyw6I635Y+W5omT5Y2h5L+h5oGvXG5leHBvcnQgZnVuY3Rpb24gZ2V0U2lnbkluZm8oKXtcblx0bGV0IHNpZ24gPSB1bmkuZ2V0U3RvcmFnZVN5bmMoXCJzaWduSW5mb1wiKTtcblx0aWYoIXNpZ24pe1xuXHRcdHJldHVybjtcblx0fVxuXHRyZXR1cm4gSlNPTi5wYXJzZShzaWduKVxufVxuLy8g5pys5Zyw5omT5Y2h5L+h5oGv5riF55CGXG5leHBvcnQgZnVuY3Rpb24gZGVsU2lnbkluZm8oKXtcblx0dW5pLnJlbW92ZVN0b3JhZ2Uoe1xuXHRcdGtleTogJ3NpZ25JbmZvJyxcblx0XHRzdWNjZXNzKCl7XG5cdFx0XHR1bmkuc2hvd1RvYXN0KHt0aXRsZTpcIumHjee9ruaIkOWKn1wifSlcblx0XHR9XG5cdH0pO1xufVxuLy8g5omT5Y2h5L+h5oGvXG5leHBvcnQgZnVuY3Rpb24gZ2V0SW5mbyhzaWduSW5mbyl7XG5cdHZhciBub3dUID0gbmV3IERhdGUoKTtcblx0dmFyIGluZm8gPSB7bW9kZTpzaWduSW5mby5tb2RlLCBub3dUOm5vd1QsYWRkcmVzczpzaWduSW5mby5hZGRyZXNzLHRpbWU6c2lnbkluZm8udGltZSxsYXRpdHVkZTpzaWduSW5mby5sYXRpdHVkZSxsb25naXR1ZGU6c2lnbkluZm8ubG9uZ2l0dWRlLHJlbWFya3M6c2lnbkluZm8ucmVtYXJrc307XG5cdHJldHVybiBpbmZvO1xufVxuXG4vLyDohb7orq/kvY3nva7mnI3liqFrZXkg5YC8XG5leHBvcnQgY29uc3Qga2V5ID0gXCJWRUVCWi1ISkwzNC1VM0xVWS1YVUJPWC1OU1VGNy1FNEJSRlwiO1xuXG5cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///64\n");

/***/ }),

/***/ 7:
/*!***********************************************************************!*\
  !*** C:/Users/a/Desktop/toCWechat/uniapp/pages.json?{"type":"style"} ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;var _default = { \"pages\": { \"pages/login/login\": { \"bounce\": \"none\", \"titleNView\": false, \"usingComponents\": {} }, \"pages/login/loginDW\": { \"bounce\": \"none\", \"titleNView\": false }, \"pages/message/message\": { \"navigationBarTitleText\": \"消息提醒\", \"bounce\": \"none\" }, \"pages/repair/repairList\": { \"navigationBarTitleText\": \"报修列表\", \"bounce\": \"none\" }, \"pages/repair/repairEdit\": { \"navigationBarTitleText\": \"设备报修\", \"bounce\": \"none\" }, \"pages/adddevice/adddevice\": { \"navigationBarTitleText\": \"新增设备\", \"bounce\": \"none\" }, \"pages/chooseLocation/chooseLocation\": { \"navigationBarTitleText\": \"选择地点\", \"bounce\": \"none\" }, \"pages/adddevice/devicedetail\": { \"navigationBarTitleText\": \"设备详情\", \"bounce\": \"none\" }, \"pages/adddevice/devicemore\": { \"navigationBarTitleText\": \"更多\", \"bounce\": \"none\" }, \"pages/personCenter/personCenter\": { \"navigationBarTitleText\": \"个人中心\", \"bounce\": \"none\" }, \"pages/personCenter/mydevice\": { \"navigationBarTitleText\": \"我的设备\", \"bounce\": \"none\" }, \"pages/personCenter/warnhistroy\": { \"navigationBarTitleText\": \"历史告警\", \"bounce\": \"none\" }, \"pages/login/registration\": { \"navigationBarTitleText\": \"注册\", \"bounce\": \"none\" }, \"pages/login/forget-password\": { \"navigationBarTitleText\": \"忘记密码\", \"bounce\": \"none\" }, \"pages/index/index\": { \"bounce\": \"none\", \"titleNView\": false } }, \"globalStyle\": { \"navigationBarTextStyle\": \"black\", \"navigationBarTitleText\": \"智能消防\", \"navigationBarBackgroundColor\": \"#FFFFFF\", \"backgroundColor\": \"#f8f8f8\" } };exports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJzR0FBZSxFQUFDLFNBQVEsRUFBQyxxQkFBb0IsRUFBQyxVQUFTLE1BQVYsRUFBaUIsY0FBYSxLQUE5QixFQUFvQyxtQkFBa0IsRUFBdEQsRUFBckIsRUFBK0UsdUJBQXNCLEVBQUMsVUFBUyxNQUFWLEVBQWlCLGNBQWEsS0FBOUIsRUFBckcsRUFBMEkseUJBQXdCLEVBQUMsMEJBQXlCLE1BQTFCLEVBQWlDLFVBQVMsTUFBMUMsRUFBbEssRUFBb04sMkJBQTBCLEVBQUMsMEJBQXlCLE1BQTFCLEVBQWlDLFVBQVMsTUFBMUMsRUFBOU8sRUFBZ1MsMkJBQTBCLEVBQUMsMEJBQXlCLE1BQTFCLEVBQWlDLFVBQVMsTUFBMUMsRUFBMVQsRUFBNFcsNkJBQTRCLEVBQUMsMEJBQXlCLE1BQTFCLEVBQWlDLFVBQVMsTUFBMUMsRUFBeFksRUFBMGIsdUNBQXNDLEVBQUMsMEJBQXlCLE1BQTFCLEVBQWlDLFVBQVMsTUFBMUMsRUFBaGUsRUFBa2hCLGdDQUErQixFQUFDLDBCQUF5QixNQUExQixFQUFpQyxVQUFTLE1BQTFDLEVBQWpqQixFQUFtbUIsOEJBQTZCLEVBQUMsMEJBQXlCLElBQTFCLEVBQStCLFVBQVMsTUFBeEMsRUFBaG9CLEVBQWdyQixtQ0FBa0MsRUFBQywwQkFBeUIsTUFBMUIsRUFBaUMsVUFBUyxNQUExQyxFQUFsdEIsRUFBb3dCLCtCQUE4QixFQUFDLDBCQUF5QixNQUExQixFQUFpQyxVQUFTLE1BQTFDLEVBQWx5QixFQUFvMUIsa0NBQWlDLEVBQUMsMEJBQXlCLE1BQTFCLEVBQWlDLFVBQVMsTUFBMUMsRUFBcjNCLEVBQXU2Qiw0QkFBMkIsRUFBQywwQkFBeUIsSUFBMUIsRUFBK0IsVUFBUyxNQUF4QyxFQUFsOEIsRUFBay9CLCtCQUE4QixFQUFDLDBCQUF5QixNQUExQixFQUFpQyxVQUFTLE1BQTFDLEVBQWhoQyxFQUFra0MscUJBQW9CLEVBQUMsVUFBUyxNQUFWLEVBQWlCLGNBQWEsS0FBOUIsRUFBdGxDLEVBQVQsRUFBcW9DLGVBQWMsRUFBQywwQkFBeUIsT0FBMUIsRUFBa0MsMEJBQXlCLE1BQTNELEVBQWtFLGdDQUErQixTQUFqRyxFQUEyRyxtQkFBa0IsU0FBN0gsRUFBbnBDLEUiLCJmaWxlIjoiNy5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IHtcInBhZ2VzXCI6e1wicGFnZXMvbG9naW4vbG9naW5cIjp7XCJib3VuY2VcIjpcIm5vbmVcIixcInRpdGxlTlZpZXdcIjpmYWxzZSxcInVzaW5nQ29tcG9uZW50c1wiOnt9fSxcInBhZ2VzL2xvZ2luL2xvZ2luRFdcIjp7XCJib3VuY2VcIjpcIm5vbmVcIixcInRpdGxlTlZpZXdcIjpmYWxzZX0sXCJwYWdlcy9tZXNzYWdlL21lc3NhZ2VcIjp7XCJuYXZpZ2F0aW9uQmFyVGl0bGVUZXh0XCI6XCLmtojmga/mj5DphpJcIixcImJvdW5jZVwiOlwibm9uZVwifSxcInBhZ2VzL3JlcGFpci9yZXBhaXJMaXN0XCI6e1wibmF2aWdhdGlvbkJhclRpdGxlVGV4dFwiOlwi5oql5L+u5YiX6KGoXCIsXCJib3VuY2VcIjpcIm5vbmVcIn0sXCJwYWdlcy9yZXBhaXIvcmVwYWlyRWRpdFwiOntcIm5hdmlnYXRpb25CYXJUaXRsZVRleHRcIjpcIuiuvuWkh+aKpeS/rlwiLFwiYm91bmNlXCI6XCJub25lXCJ9LFwicGFnZXMvYWRkZGV2aWNlL2FkZGRldmljZVwiOntcIm5hdmlnYXRpb25CYXJUaXRsZVRleHRcIjpcIuaWsOWinuiuvuWkh1wiLFwiYm91bmNlXCI6XCJub25lXCJ9LFwicGFnZXMvY2hvb3NlTG9jYXRpb24vY2hvb3NlTG9jYXRpb25cIjp7XCJuYXZpZ2F0aW9uQmFyVGl0bGVUZXh0XCI6XCLpgInmi6nlnLDngrlcIixcImJvdW5jZVwiOlwibm9uZVwifSxcInBhZ2VzL2FkZGRldmljZS9kZXZpY2VkZXRhaWxcIjp7XCJuYXZpZ2F0aW9uQmFyVGl0bGVUZXh0XCI6XCLorr7lpIfor6bmg4VcIixcImJvdW5jZVwiOlwibm9uZVwifSxcInBhZ2VzL2FkZGRldmljZS9kZXZpY2Vtb3JlXCI6e1wibmF2aWdhdGlvbkJhclRpdGxlVGV4dFwiOlwi5pu05aSaXCIsXCJib3VuY2VcIjpcIm5vbmVcIn0sXCJwYWdlcy9wZXJzb25DZW50ZXIvcGVyc29uQ2VudGVyXCI6e1wibmF2aWdhdGlvbkJhclRpdGxlVGV4dFwiOlwi5Liq5Lq65Lit5b+DXCIsXCJib3VuY2VcIjpcIm5vbmVcIn0sXCJwYWdlcy9wZXJzb25DZW50ZXIvbXlkZXZpY2VcIjp7XCJuYXZpZ2F0aW9uQmFyVGl0bGVUZXh0XCI6XCLmiJHnmoTorr7lpIdcIixcImJvdW5jZVwiOlwibm9uZVwifSxcInBhZ2VzL3BlcnNvbkNlbnRlci93YXJuaGlzdHJveVwiOntcIm5hdmlnYXRpb25CYXJUaXRsZVRleHRcIjpcIuWOhuWPsuWRiuitplwiLFwiYm91bmNlXCI6XCJub25lXCJ9LFwicGFnZXMvbG9naW4vcmVnaXN0cmF0aW9uXCI6e1wibmF2aWdhdGlvbkJhclRpdGxlVGV4dFwiOlwi5rOo5YaMXCIsXCJib3VuY2VcIjpcIm5vbmVcIn0sXCJwYWdlcy9sb2dpbi9mb3JnZXQtcGFzc3dvcmRcIjp7XCJuYXZpZ2F0aW9uQmFyVGl0bGVUZXh0XCI6XCLlv5jorrDlr4bnoIFcIixcImJvdW5jZVwiOlwibm9uZVwifSxcInBhZ2VzL2luZGV4L2luZGV4XCI6e1wiYm91bmNlXCI6XCJub25lXCIsXCJ0aXRsZU5WaWV3XCI6ZmFsc2V9fSxcImdsb2JhbFN0eWxlXCI6e1wibmF2aWdhdGlvbkJhclRleHRTdHlsZVwiOlwiYmxhY2tcIixcIm5hdmlnYXRpb25CYXJUaXRsZVRleHRcIjpcIuaZuuiDvea2iOmYslwiLFwibmF2aWdhdGlvbkJhckJhY2tncm91bmRDb2xvclwiOlwiI0ZGRkZGRlwiLFwiYmFja2dyb3VuZENvbG9yXCI6XCIjZjhmOGY4XCJ9fSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///7\n");

/***/ }),

/***/ 73:
/*!********************************************************************!*\
  !*** C:/Users/a/Desktop/toCWechat/uniapp/pages/adddevice/index.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(__f__, uni) {Object.defineProperty(exports, \"__esModule\", { value: true });exports.handleSignClick = handleSignClick;exports.setSignInfo = setSignInfo;exports.addSignInfo = addSignInfo;exports.getSignInfo = getSignInfo;exports.delSignInfo = delSignInfo;exports.getInfo = getInfo;exports.key = void 0;function handleSignClick() {\n  console.log(__f__(1, \" at pages\\\\adddevice\\\\index.js:2\"));\n}\n// 本地存储打卡信息\nfunction setSignInfo(info) {\n  var signInfo = { main: [info] };\n  uni.setStorageSync(\"signInfo\", JSON.stringify(signInfo));\n}\n// 本地添加打卡信息\nfunction addSignInfo(info, sign) {\n  sign.main.push(info);\n  uni.setStorageSync(\"signInfo\", JSON.stringify(sign));\n}\n// 本地获取打卡信息\nfunction getSignInfo() {\n  var sign = uni.getStorageSync(\"signInfo\");\n  if (!sign) {\n    return;\n  }\n  return JSON.parse(sign);\n}\n// 本地打卡信息清理\nfunction delSignInfo() {\n  uni.removeStorage({\n    key: 'signInfo',\n    success: function success() {\n      uni.showToast({ title: \"重置成功\" });\n    } });\n\n}\n// 打卡信息\nfunction getInfo(signInfo) {\n  var nowT = new Date();\n  var info = { mode: signInfo.mode, nowT: nowT, address: signInfo.address, time: signInfo.time, latitude: signInfo.latitude, longitude: signInfo.longitude, remarks: signInfo.remarks };\n  return info;\n}\n\n// 腾讯位置服务key 值\nvar key = \"VEEBZ-HJL34-U3LUY-XUBOX-NSUF7-E4BRF\";exports.key = key;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js */ 10)[\"default\"], __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vcGFnZXMvYWRkZGV2aWNlL2luZGV4LmpzIl0sIm5hbWVzIjpbImhhbmRsZVNpZ25DbGljayIsImNvbnNvbGUiLCJsb2ciLCJzZXRTaWduSW5mbyIsImluZm8iLCJzaWduSW5mbyIsIm1haW4iLCJ1bmkiLCJzZXRTdG9yYWdlU3luYyIsIkpTT04iLCJzdHJpbmdpZnkiLCJhZGRTaWduSW5mbyIsInNpZ24iLCJwdXNoIiwiZ2V0U2lnbkluZm8iLCJnZXRTdG9yYWdlU3luYyIsInBhcnNlIiwiZGVsU2lnbkluZm8iLCJyZW1vdmVTdG9yYWdlIiwia2V5Iiwic3VjY2VzcyIsInNob3dUb2FzdCIsInRpdGxlIiwiZ2V0SW5mbyIsIm5vd1QiLCJEYXRlIiwibW9kZSIsImFkZHJlc3MiLCJ0aW1lIiwibGF0aXR1ZGUiLCJsb25naXR1ZGUiLCJyZW1hcmtzIl0sIm1hcHBpbmdzIjoiaVZBQU8sU0FBU0EsZUFBVCxHQUEwQjtBQUNoQ0MsU0FBTyxDQUFDQyxHQUFSLE9BQVksQ0FBWjtBQUNBO0FBQ0Q7QUFDTyxTQUFTQyxXQUFULENBQXFCQyxJQUFyQixFQUEwQjtBQUNoQyxNQUFJQyxRQUFRLEdBQUcsRUFBQ0MsSUFBSSxFQUFDLENBQUNGLElBQUQsQ0FBTixFQUFmO0FBQ0FHLEtBQUcsQ0FBQ0MsY0FBSixDQUFtQixVQUFuQixFQUE4QkMsSUFBSSxDQUFDQyxTQUFMLENBQWVMLFFBQWYsQ0FBOUI7QUFDQTtBQUNEO0FBQ08sU0FBU00sV0FBVCxDQUFxQlAsSUFBckIsRUFBMEJRLElBQTFCLEVBQStCO0FBQ3JDQSxNQUFJLENBQUNOLElBQUwsQ0FBVU8sSUFBVixDQUFlVCxJQUFmO0FBQ0FHLEtBQUcsQ0FBQ0MsY0FBSixDQUFtQixVQUFuQixFQUE4QkMsSUFBSSxDQUFDQyxTQUFMLENBQWVFLElBQWYsQ0FBOUI7QUFDQTtBQUNEO0FBQ08sU0FBU0UsV0FBVCxHQUFzQjtBQUM1QixNQUFJRixJQUFJLEdBQUdMLEdBQUcsQ0FBQ1EsY0FBSixDQUFtQixVQUFuQixDQUFYO0FBQ0EsTUFBRyxDQUFDSCxJQUFKLEVBQVM7QUFDUjtBQUNBO0FBQ0QsU0FBT0gsSUFBSSxDQUFDTyxLQUFMLENBQVdKLElBQVgsQ0FBUDtBQUNBO0FBQ0Q7QUFDTyxTQUFTSyxXQUFULEdBQXNCO0FBQzVCVixLQUFHLENBQUNXLGFBQUosQ0FBa0I7QUFDakJDLE9BQUcsRUFBRSxVQURZO0FBRWpCQyxXQUZpQixxQkFFUjtBQUNSYixTQUFHLENBQUNjLFNBQUosQ0FBYyxFQUFDQyxLQUFLLEVBQUMsTUFBUCxFQUFkO0FBQ0EsS0FKZ0IsRUFBbEI7O0FBTUE7QUFDRDtBQUNPLFNBQVNDLE9BQVQsQ0FBaUJsQixRQUFqQixFQUEwQjtBQUNoQyxNQUFJbUIsSUFBSSxHQUFHLElBQUlDLElBQUosRUFBWDtBQUNBLE1BQUlyQixJQUFJLEdBQUcsRUFBQ3NCLElBQUksRUFBQ3JCLFFBQVEsQ0FBQ3FCLElBQWYsRUFBcUJGLElBQUksRUFBQ0EsSUFBMUIsRUFBK0JHLE9BQU8sRUFBQ3RCLFFBQVEsQ0FBQ3NCLE9BQWhELEVBQXdEQyxJQUFJLEVBQUN2QixRQUFRLENBQUN1QixJQUF0RSxFQUEyRUMsUUFBUSxFQUFDeEIsUUFBUSxDQUFDd0IsUUFBN0YsRUFBc0dDLFNBQVMsRUFBQ3pCLFFBQVEsQ0FBQ3lCLFNBQXpILEVBQW1JQyxPQUFPLEVBQUMxQixRQUFRLENBQUMwQixPQUFwSixFQUFYO0FBQ0EsU0FBTzNCLElBQVA7QUFDQTs7QUFFRDtBQUNPLElBQU1lLEdBQUcsR0FBRyxxQ0FBWixDIiwiZmlsZSI6IjczLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIGhhbmRsZVNpZ25DbGljaygpe1xuXHRjb25zb2xlLmxvZygxKVxufVxuLy8g5pys5Zyw5a2Y5YKo5omT5Y2h5L+h5oGvXG5leHBvcnQgZnVuY3Rpb24gc2V0U2lnbkluZm8oaW5mbyl7XG5cdHZhciBzaWduSW5mbyA9IHttYWluOltpbmZvXX1cblx0dW5pLnNldFN0b3JhZ2VTeW5jKFwic2lnbkluZm9cIixKU09OLnN0cmluZ2lmeShzaWduSW5mbykpO1xufVxuLy8g5pys5Zyw5re75Yqg5omT5Y2h5L+h5oGvXG5leHBvcnQgZnVuY3Rpb24gYWRkU2lnbkluZm8oaW5mbyxzaWduKXtcblx0c2lnbi5tYWluLnB1c2goaW5mbyk7XG5cdHVuaS5zZXRTdG9yYWdlU3luYyhcInNpZ25JbmZvXCIsSlNPTi5zdHJpbmdpZnkoc2lnbikpO1xufVxuLy8g5pys5Zyw6I635Y+W5omT5Y2h5L+h5oGvXG5leHBvcnQgZnVuY3Rpb24gZ2V0U2lnbkluZm8oKXtcblx0bGV0IHNpZ24gPSB1bmkuZ2V0U3RvcmFnZVN5bmMoXCJzaWduSW5mb1wiKTtcblx0aWYoIXNpZ24pe1xuXHRcdHJldHVybjtcblx0fVxuXHRyZXR1cm4gSlNPTi5wYXJzZShzaWduKVxufVxuLy8g5pys5Zyw5omT5Y2h5L+h5oGv5riF55CGXG5leHBvcnQgZnVuY3Rpb24gZGVsU2lnbkluZm8oKXtcblx0dW5pLnJlbW92ZVN0b3JhZ2Uoe1xuXHRcdGtleTogJ3NpZ25JbmZvJyxcblx0XHRzdWNjZXNzKCl7XG5cdFx0XHR1bmkuc2hvd1RvYXN0KHt0aXRsZTpcIumHjee9ruaIkOWKn1wifSlcblx0XHR9XG5cdH0pO1xufVxuLy8g5omT5Y2h5L+h5oGvXG5leHBvcnQgZnVuY3Rpb24gZ2V0SW5mbyhzaWduSW5mbyl7XG5cdHZhciBub3dUID0gbmV3IERhdGUoKTtcblx0dmFyIGluZm8gPSB7bW9kZTpzaWduSW5mby5tb2RlLCBub3dUOm5vd1QsYWRkcmVzczpzaWduSW5mby5hZGRyZXNzLHRpbWU6c2lnbkluZm8udGltZSxsYXRpdHVkZTpzaWduSW5mby5sYXRpdHVkZSxsb25naXR1ZGU6c2lnbkluZm8ubG9uZ2l0dWRlLHJlbWFya3M6c2lnbkluZm8ucmVtYXJrc307XG5cdHJldHVybiBpbmZvO1xufVxuXG4vLyDohb7orq/kvY3nva7mnI3liqFrZXkg5YC8XG5leHBvcnQgY29uc3Qga2V5ID0gXCJWRUVCWi1ISkwzNC1VM0xVWS1YVUJPWC1OU1VGNy1FNEJSRlwiO1xuXG5cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///73\n");

/***/ }),

/***/ 8:
/*!**********************************************************************!*\
  !*** C:/Users/a/Desktop/toCWechat/uniapp/pages.json?{"type":"stat"} ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;var _default = { \"appid\": \"__UNI__143E42D\" };exports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJzR0FBZSxFQUFDLFNBQVEsZ0JBQVQsRSIsImZpbGUiOiI4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQge1wiYXBwaWRcIjpcIl9fVU5JX18xNDNFNDJEXCJ9Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///8\n");

/***/ }),

/***/ 9:
/*!**********************************************************!*\
  !*** C:/Users/a/Desktop/toCWechat/uniapp/store/index.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(uni, __f__) {Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;var _vue = _interopRequireDefault(__webpack_require__(/*! vue */ 3));\nvar _vuex = _interopRequireDefault(__webpack_require__(/*! vuex */ 11));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}\n\n_vue.default.use(_vuex.default);\n\nvar store = new _vuex.default.Store({\n  state: {\n    hasLogin: false,\n    usertype: '',\n    userInfo: {} },\n\n  mutations: _defineProperty({\n    login: function login(state, provider) {\n\n      state.hasLogin = true;\n      state.userInfo = provider;\n      uni.setStorage({ //缓存用户登陆状态\n        key: 'userInfo',\n        data: provider });\n\n      console.log(__f__(state.userInfo, \" at store\\\\index.js:21\"));\n    },\n    logout: function logout(state) {\n      state.hasLogin = false;\n      state.userInfo = {};\n      uni.removeStorage({\n        key: 'userInfo' });\n\n    },\n    usertype: function usertype(state, provider) {\n      state.usertype = provider;\n    } }, \"usertype\", function usertype(\n  state, _usertype) {\n    state.usertype = _usertype;\n  }),\n\n  actions: {\n    usertype: function usertype(ctx, _usertype2) {\n      ctx.commit('usertype', _usertype2);\n    } } });var _default =\n\n\n\nstore;exports.default = _default;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"default\"], __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js */ 10)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vc3RvcmUvaW5kZXguanMiXSwibmFtZXMiOlsiVnVlIiwidXNlIiwiVnVleCIsInN0b3JlIiwiU3RvcmUiLCJzdGF0ZSIsImhhc0xvZ2luIiwidXNlcnR5cGUiLCJ1c2VySW5mbyIsIm11dGF0aW9ucyIsImxvZ2luIiwicHJvdmlkZXIiLCJ1bmkiLCJzZXRTdG9yYWdlIiwia2V5IiwiZGF0YSIsImNvbnNvbGUiLCJsb2ciLCJsb2dvdXQiLCJyZW1vdmVTdG9yYWdlIiwiYWN0aW9ucyIsImN0eCIsImNvbW1pdCJdLCJtYXBwaW5ncyI6InlJQUFBO0FBQ0Esd0U7O0FBRUFBLGFBQUlDLEdBQUosQ0FBUUMsYUFBUjs7QUFFQSxJQUFNQyxLQUFLLEdBQUcsSUFBSUQsY0FBS0UsS0FBVCxDQUFlO0FBQzVCQyxPQUFLLEVBQUU7QUFDTkMsWUFBUSxFQUFFLEtBREo7QUFFTkMsWUFBUSxFQUFDLEVBRkg7QUFHTkMsWUFBUSxFQUFFLEVBSEosRUFEcUI7O0FBTTVCQyxXQUFTO0FBQ1JDLFNBRFEsaUJBQ0ZMLEtBREUsRUFDS00sUUFETCxFQUNlOztBQUV0Qk4sV0FBSyxDQUFDQyxRQUFOLEdBQWlCLElBQWpCO0FBQ0FELFdBQUssQ0FBQ0csUUFBTixHQUFpQkcsUUFBakI7QUFDQUMsU0FBRyxDQUFDQyxVQUFKLENBQWUsRUFBQztBQUNaQyxXQUFHLEVBQUUsVUFETTtBQUVYQyxZQUFJLEVBQUVKLFFBRkssRUFBZjs7QUFJQUssYUFBTyxDQUFDQyxHQUFSLE9BQVlaLEtBQUssQ0FBQ0csUUFBbEI7QUFDQSxLQVZPO0FBV1JVLFVBWFEsa0JBV0RiLEtBWEMsRUFXTTtBQUNiQSxXQUFLLENBQUNDLFFBQU4sR0FBaUIsS0FBakI7QUFDQUQsV0FBSyxDQUFDRyxRQUFOLEdBQWlCLEVBQWpCO0FBQ0FJLFNBQUcsQ0FBQ08sYUFBSixDQUFrQjtBQUNMTCxXQUFHLEVBQUUsVUFEQSxFQUFsQjs7QUFHQSxLQWpCTztBQWtCUlAsWUFsQlEsb0JBa0JDRixLQWxCRCxFQWtCT00sUUFsQlAsRUFrQmdCO0FBQ3ZCTixXQUFLLENBQUNFLFFBQU4sR0FBZUksUUFBZjtBQUNBLEtBcEJPO0FBcUJFTixPQXJCRixFQXFCUUUsU0FyQlIsRUFxQmtCO0FBQ3RCRixTQUFLLENBQUNFLFFBQU4sR0FBaUJBLFNBQWpCO0FBQ0gsR0F2Qk8sQ0FObUI7O0FBK0I1QmEsU0FBTyxFQUFFO0FBQ0RiLFlBREMsb0JBQ1NjLEdBRFQsRUFDYWQsVUFEYixFQUN1QjtBQUNwQmMsU0FBRyxDQUFDQyxNQUFKLENBQVcsVUFBWCxFQUFzQmYsVUFBdEI7QUFDSCxLQUhBLEVBL0JtQixFQUFmLENBQWQsQzs7OztBQXNDZUosSyIsImZpbGUiOiI5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFZ1ZSBmcm9tICd2dWUnXHJcbmltcG9ydCBWdWV4IGZyb20gJ3Z1ZXgnXHJcblxyXG5WdWUudXNlKFZ1ZXgpXHJcblxyXG5jb25zdCBzdG9yZSA9IG5ldyBWdWV4LlN0b3JlKHtcclxuXHRzdGF0ZToge1xyXG5cdFx0aGFzTG9naW46IGZhbHNlLFxyXG5cdFx0dXNlcnR5cGU6JycsXHJcblx0XHR1c2VySW5mbzoge30sXHJcblx0fSxcclxuXHRtdXRhdGlvbnM6IHtcclxuXHRcdGxvZ2luKHN0YXRlLCBwcm92aWRlcikge1xyXG5cclxuXHRcdFx0c3RhdGUuaGFzTG9naW4gPSB0cnVlO1xyXG5cdFx0XHRzdGF0ZS51c2VySW5mbyA9IHByb3ZpZGVyO1xyXG5cdFx0XHR1bmkuc2V0U3RvcmFnZSh7Ly/nvJPlrZjnlKjmiLfnmbvpmYbnirbmgIFcclxuXHRcdFx0ICAgIGtleTogJ3VzZXJJbmZvJywgIFxyXG5cdFx0XHQgICAgZGF0YTogcHJvdmlkZXIgIFxyXG5cdFx0XHR9KSBcclxuXHRcdFx0Y29uc29sZS5sb2coc3RhdGUudXNlckluZm8pO1xyXG5cdFx0fSxcclxuXHRcdGxvZ291dChzdGF0ZSkge1xyXG5cdFx0XHRzdGF0ZS5oYXNMb2dpbiA9IGZhbHNlO1xyXG5cdFx0XHRzdGF0ZS51c2VySW5mbyA9IHt9O1xyXG5cdFx0XHR1bmkucmVtb3ZlU3RvcmFnZSh7ICBcclxuICAgICAgICAgICAgICAgIGtleTogJ3VzZXJJbmZvJyAgXHJcbiAgICAgICAgICAgIH0pXHJcblx0XHR9LFxyXG5cdFx0dXNlcnR5cGUoc3RhdGUscHJvdmlkZXIpe1xyXG5cdFx0XHRzdGF0ZS51c2VydHlwZT1wcm92aWRlclxyXG5cdFx0fSxcclxuXHRcdHVzZXJ0eXBlIChzdGF0ZSx1c2VydHlwZSkge1xyXG5cdFx0ICAgIHN0YXRlLnVzZXJ0eXBlID0gdXNlcnR5cGVcclxuXHRcdH1cclxuXHR9LFxyXG5cdGFjdGlvbnM6IHtcclxuXHQgICAgICAgIHVzZXJ0eXBlIChjdHgsdXNlcnR5cGUpIHtcclxuXHQgICAgICAgICAgICBjdHguY29tbWl0KCd1c2VydHlwZScsdXNlcnR5cGUpXHJcblx0ICAgICAgICB9XHJcblx0ICAgIH1cclxufSlcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHN0b3JlXHJcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///9\n");

/***/ })

}]);